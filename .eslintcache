[{"/home/pawan/Desktop/react-template-hooks/src/index.js":"1","/home/pawan/Desktop/react-template-hooks/src/App.js":"2","/home/pawan/Desktop/react-template-hooks/src/AlertDismissible.js":"3","/home/pawan/Desktop/react-template-hooks/src/api.js":"4","/home/pawan/Desktop/react-template-hooks/src/Layout/Header.js":"5","/home/pawan/Desktop/react-template-hooks/src/Layout/Content.js":"6","/home/pawan/Desktop/react-template-hooks/src/Layout/Sidebar.js":"7","/home/pawan/Desktop/react-template-hooks/src/Layout/Footer.js":"8","/home/pawan/Desktop/react-template-hooks/src/Components/LoginButton.js":"9","/home/pawan/Desktop/react-template-hooks/src/Components/Login.js":"10","/home/pawan/Desktop/react-template-hooks/src/Components/Startexam.js":"11","/home/pawan/Desktop/react-template-hooks/src/Components/Student/StudHome.js":"12","/home/pawan/Desktop/react-template-hooks/src/Components/Student/Instructions.js":"13","/home/pawan/Desktop/react-template-hooks/src/Components/Exam/MyTimer.js":"14","/home/pawan/Desktop/react-template-hooks/src/Components/Student/CountCard.js":"15","/home/pawan/Desktop/react-template-hooks/src/Components/Student/ExamCard.js":"16","/home/pawan/Desktop/react-template-hooks/src/Components/Exam/QuestionAnswer.js":"17","/home/pawan/Desktop/react-template-hooks/src/Components/Exam/QuestionButtons.js":"18","/home/pawan/Desktop/react-template-hooks/src/Components/Exam/NextSaveButton.js":"19","/home/pawan/Desktop/react-template-hooks/src/Components/Exam/EndExamButton.js":"20","/home/pawan/Desktop/react-template-hooks/src/Components/Exam/PreviousButton.js":"21","/home/pawan/Desktop/react-template-hooks/src/Components/Exam/OverallSummery.js":"22","/home/pawan/Desktop/react-template-hooks/src/Components/Exam/ReviewLater.js":"23","/home/pawan/Desktop/react-template-hooks/src/Components/Exam/Options.js":"24","/home/pawan/Desktop/react-template-hooks/src/Components/Exam/WebCamCapture.js":"25","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Adminhome.js":"26","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/ClearSession.js":"27","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/ClearSessionUserInfo.js":"28","/home/pawan/Desktop/react-template-hooks/src/popup.js":"29","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/ConfigureHeader.js":"30","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/ConfigureFooter.js":"31","/home/pawan/Desktop/react-template-hooks/src/Components/Institute/InstHome.js":"32","/home/pawan/Desktop/react-template-hooks/src/Components/Institute/InstReports.js":"33","/home/pawan/Desktop/react-template-hooks/src/Components/Institute/Reports/InstExamReport.js":"34","/home/pawan/Desktop/react-template-hooks/src/Layout/MyContent.js":"35","/home/pawan/Desktop/react-template-hooks/src/Components/Institute/Reports/InstExamStudtReport.js":"36","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/AdminReports.js":"37","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Reports/AdminExamReport.js":"38","/home/pawan/Desktop/react-template-hooks/src/Components/Student/SearchBox.js":"39","/home/pawan/Desktop/react-template-hooks/src/Components/Exam/NextButton.js":"40","/home/pawan/Desktop/react-template-hooks/src/Components/Exam/EndPreviewButton.js":"41","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/GlobalController.js":"42","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/GlobalControllerForm.js":"43","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/UploadGlobalController.js":"44","/home/pawan/Desktop/react-template-hooks/src/Components/Gadmin/GadminHome.js":"45","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Lists/UserList.js":"46","/home/pawan/Desktop/react-template-hooks/src/Components/Student/CountDownButton.js":"47","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/ClusterController.js":"48","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/ClusterControllerForm.js":"49","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/UploadClusterController.js":"50","/home/pawan/Desktop/react-template-hooks/src/Components/Cadmin/CadminHome.js":"51","/home/pawan/Desktop/react-template-hooks/src/Components/Cadmin/AddInst.js":"52","/home/pawan/Desktop/react-template-hooks/src/Components/Cadmin/AddInstForm.js":"53","/home/pawan/Desktop/react-template-hooks/src/Components/Cadmin/UploadInst.js":"54","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/InstClusterAlloc.js":"55","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/InstList.js":"56","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/RbteList.js":"57","/home/pawan/Desktop/react-template-hooks/src/utils/Items.js":"58","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/Insts.js":"59","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/Rbtes.js":"60","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/GlobClusterAlloc.js":"61","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/ClusterList.js":"62","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/GlobList.js":"63","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/Cluster.js":"64","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/Glob.js":"65","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/ProgramMaster.js":"66","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/ProgramMasterForm.js":"67","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/UploadPrograms.js":"68","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/ProgramList.js":"69","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/SubjectMaster.js":"70","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/SubjectMasterForm.js":"71","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/UploadSubjects.js":"72","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/SubjectList.js":"73","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/StudentMaster.js":"74","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/StudentMasterForm.js":"75","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/UploadStudents.js":"76","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/StudentList.js":"77","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/StudSubjectAlloc.js":"78","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/UploadStudentSubjectAlloc.js":"79","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/StudentSubjectList.js":"80","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/TestMaster.js":"81","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/AddTopic.js":"82","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/AddTopicForm.js":"83","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/UploadTopics.js":"84","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/TopicList.js":"85","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/TestMasterForm.js":"86","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/UploadTests.js":"87","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/TestList.js":"88","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/ConfigureTest.js":"89"},{"size":199,"mtime":1610375291000,"results":"90","hashOfConfig":"91"},{"size":3915,"mtime":1613119658375,"results":"92","hashOfConfig":"91"},{"size":501,"mtime":1613543354443,"results":"93","hashOfConfig":"91"},{"size":143,"mtime":1610371769000,"results":"94","hashOfConfig":"91"},{"size":4181,"mtime":1613798582404,"results":"95","hashOfConfig":"91"},{"size":5190,"mtime":1614413442621,"results":"96","hashOfConfig":"91"},{"size":11721,"mtime":1614313966587,"results":"97","hashOfConfig":"91"},{"size":1328,"mtime":1613120102800,"results":"98","hashOfConfig":"91"},{"size":1068,"mtime":1611394431189,"results":"99","hashOfConfig":"91"},{"size":9987,"mtime":1613797489916,"results":"100","hashOfConfig":"91"},{"size":8428,"mtime":1614670316331,"results":"101","hashOfConfig":"91"},{"size":8322,"mtime":1614668155172,"results":"102","hashOfConfig":"91"},{"size":8705,"mtime":1614676908247,"results":"103","hashOfConfig":"91"},{"size":3410,"mtime":1613736079324,"results":"104","hashOfConfig":"91"},{"size":379,"mtime":1611403745246,"results":"105","hashOfConfig":"91"},{"size":4691,"mtime":1613733320777,"results":"106","hashOfConfig":"91"},{"size":3306,"mtime":1614672992426,"results":"107","hashOfConfig":"91"},{"size":2811,"mtime":1612257650542,"results":"108","hashOfConfig":"91"},{"size":9177,"mtime":1612417256712,"results":"109","hashOfConfig":"91"},{"size":2085,"mtime":1611406299706,"results":"110","hashOfConfig":"91"},{"size":1614,"mtime":1613019313683,"results":"111","hashOfConfig":"91"},{"size":3012,"mtime":1610529484000,"results":"112","hashOfConfig":"91"},{"size":4088,"mtime":1613019324654,"results":"113","hashOfConfig":"91"},{"size":2197,"mtime":1613037209602,"results":"114","hashOfConfig":"91"},{"size":8169,"mtime":1614669383393,"results":"115","hashOfConfig":"91"},{"size":454,"mtime":1611323235969,"results":"116","hashOfConfig":"91"},{"size":6616,"mtime":1613544662788,"results":"117","hashOfConfig":"91"},{"size":5088,"mtime":1613544392477,"results":"118","hashOfConfig":"91"},{"size":951,"mtime":1611738624378,"results":"119","hashOfConfig":"91"},{"size":6805,"mtime":1613544884394,"results":"120","hashOfConfig":"91"},{"size":4842,"mtime":1613545020816,"results":"121","hashOfConfig":"91"},{"size":459,"mtime":1611559269161,"results":"122","hashOfConfig":"91"},{"size":1248,"mtime":1613545940012,"results":"123","hashOfConfig":"91"},{"size":9916,"mtime":1614765944644,"results":"124","hashOfConfig":"91"},{"size":7927,"mtime":1610102374000,"results":"125","hashOfConfig":"91"},{"size":5093,"mtime":1613545525274,"results":"126","hashOfConfig":"91"},{"size":1313,"mtime":1613545261509,"results":"127","hashOfConfig":"91"},{"size":1902,"mtime":1614148376424,"results":"128","hashOfConfig":"91"},{"size":2392,"mtime":1612176576265,"results":"129","hashOfConfig":"91"},{"size":1710,"mtime":1612260609047,"results":"130","hashOfConfig":"91"},{"size":427,"mtime":1612353636668,"results":"131","hashOfConfig":"91"},{"size":990,"mtime":1613721700237,"results":"132","hashOfConfig":"91"},{"size":9048,"mtime":1613727895513,"results":"133","hashOfConfig":"91"},{"size":4377,"mtime":1613797148223,"results":"134","hashOfConfig":"91"},{"size":527,"mtime":1613646466301,"results":"135","hashOfConfig":"91"},{"size":4010,"mtime":1613802448906,"results":"136","hashOfConfig":"91"},{"size":996,"mtime":1613736409743,"results":"137","hashOfConfig":"91"},{"size":1045,"mtime":1613796055041,"results":"138","hashOfConfig":"91"},{"size":9056,"mtime":1613796852483,"results":"139","hashOfConfig":"91"},{"size":4380,"mtime":1613797127147,"results":"140","hashOfConfig":"91"},{"size":529,"mtime":1613797564320,"results":"141","hashOfConfig":"91"},{"size":955,"mtime":1613799949204,"results":"142","hashOfConfig":"91"},{"size":8919,"mtime":1613800557981,"results":"143","hashOfConfig":"91"},{"size":4327,"mtime":1613801495104,"results":"144","hashOfConfig":"91"},{"size":1962,"mtime":1614055648303,"results":"145","hashOfConfig":"91"},{"size":2395,"mtime":1613995224399,"results":"146","hashOfConfig":"91"},{"size":562,"mtime":1613994918819,"results":"147","hashOfConfig":"91"},{"size":49,"mtime":1613968228843,"results":"148","hashOfConfig":"91"},{"size":653,"mtime":1613994290880,"results":"149","hashOfConfig":"91"},{"size":2340,"mtime":1614060115416,"results":"150","hashOfConfig":"91"},{"size":2011,"mtime":1614058419349,"results":"151","hashOfConfig":"91"},{"size":2250,"mtime":1614059965419,"results":"152","hashOfConfig":"91"},{"size":513,"mtime":1614059139585,"results":"153","hashOfConfig":"91"},{"size":589,"mtime":1614058561221,"results":"154","hashOfConfig":"91"},{"size":2269,"mtime":1614059872610,"results":"155","hashOfConfig":"91"},{"size":990,"mtime":1614073114049,"results":"156","hashOfConfig":"91"},{"size":8488,"mtime":1614149427443,"results":"157","hashOfConfig":"91"},{"size":4299,"mtime":1614070669267,"results":"158","hashOfConfig":"91"},{"size":3713,"mtime":1614074899531,"results":"159","hashOfConfig":"91"},{"size":964,"mtime":1614168947677,"results":"160","hashOfConfig":"91"},{"size":13400,"mtime":1614318054748,"results":"161","hashOfConfig":"91"},{"size":4299,"mtime":1614170306070,"results":"162","hashOfConfig":"91"},{"size":3937,"mtime":1614317860420,"results":"163","hashOfConfig":"91"},{"size":989,"mtime":1614228270537,"results":"164","hashOfConfig":"91"},{"size":15374,"mtime":1614238642300,"results":"165","hashOfConfig":"91"},{"size":4330,"mtime":1614236006320,"results":"166","hashOfConfig":"91"},{"size":4142,"mtime":1614237968663,"results":"167","hashOfConfig":"91"},{"size":915,"mtime":1614248424250,"results":"168","hashOfConfig":"91"},{"size":4364,"mtime":1614241749134,"results":"169","hashOfConfig":"91"},{"size":4075,"mtime":1614248859760,"results":"170","hashOfConfig":"91"},{"size":927,"mtime":1614406471586,"results":"171","hashOfConfig":"91"},{"size":1383,"mtime":1614322920885,"results":"172","hashOfConfig":"91"},{"size":8990,"mtime":1614319505243,"results":"173","hashOfConfig":"91"},{"size":4300,"mtime":1614321035556,"results":"174","hashOfConfig":"91"},{"size":4354,"mtime":1614325007714,"results":"175","hashOfConfig":"91"},{"size":12456,"mtime":1614590923632,"results":"176","hashOfConfig":"91"},{"size":4384,"mtime":1614401619867,"results":"177","hashOfConfig":"91"},{"size":4580,"mtime":1614414323268,"results":"178","hashOfConfig":"91"},{"size":15570,"mtime":1614667755185,"results":"179","hashOfConfig":"91"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},"1iupvn5",{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"182"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"182"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"182"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"182"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"182"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"182"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"182"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"182"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"182"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"182"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"182"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"182"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"182"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"286","usedDeprecatedRules":"182"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"307","usedDeprecatedRules":"182"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"310","usedDeprecatedRules":"182"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"315","usedDeprecatedRules":"182"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"326","usedDeprecatedRules":"182"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333","usedDeprecatedRules":"182"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"338","usedDeprecatedRules":"182"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"343","usedDeprecatedRules":"182"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"348","usedDeprecatedRules":"182"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"357","usedDeprecatedRules":"182"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"364","usedDeprecatedRules":"182"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"371","messages":"372","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"373","messages":"374","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"375","usedDeprecatedRules":"182"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"382","usedDeprecatedRules":"182"},{"filePath":"383","messages":"384","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"385","usedDeprecatedRules":"182"},"/home/pawan/Desktop/react-template-hooks/src/index.js",[],["386","387"],"/home/pawan/Desktop/react-template-hooks/src/App.js",[],"/home/pawan/Desktop/react-template-hooks/src/AlertDismissible.js",[],"/home/pawan/Desktop/react-template-hooks/src/api.js",[],"/home/pawan/Desktop/react-template-hooks/src/Layout/Header.js",["388","389","390","391"],"import React, { useState , useEffect, useContext } from 'react';\nimport LoginButton from '../Components/LoginButton';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport {ShowContext} from '../App';\nimport {LogoContext} from '../App';\nimport API from '../api';\n\nfunction Header()\n{\n    const {setShow,setMsg}      = useContext(ShowContext);\n    const {logoVal, setLogoVal} = useContext(LogoContext);\n\n    let history                         =   useHistory();\n    let location                        =   useLocation();\n    let [toggle, setToggle]             =   useState(true);\n    let [isLoggedIn, setIsLoggedIn]     =   useState(false);\n    let [isStartExam, setIsStartExam]   =   useState(false);\n    let [isLoaded,setIsLoaded]          =   useState(false);\n    let [myHeader, imgPath]             =   useHeader(setIsLoaded,logoVal);\n\n    useEffect(() =>\n    {\n      let PathName = location.pathname;\n      const searchString = process.env.REACT_APP_NON_AUTH_PATHS.split(' ').find((str) => str === PathName);\n      if(PathName==='/startexam')\n      {\n        if(window.innerWidth < 1000)\n        {\n            setIsStartExam(true);\n            setToggle(true);\n            document.body.classList.remove('sb-nav-fixed');document.body.classList.remove('sb-sidenav-toggled');\n        }\n        else\n        {\n            setIsStartExam(true);\n            setToggle(true);\n            document.body.classList.add('sb-sidenav-toggled');document.body.classList.remove('sb-nav-fixed');\n        }\n      }\n      else\n      {\n        setIsStartExam(false);\n        setToggle(false);\n        document.body.classList.add('sb-nav-fixed');document.body.classList.remove('sb-sidenav-toggled');\n      }\n      if(PathName!==searchString)\n      {\n          setIsLoggedIn(true);\n      }\n      else\n      {\n          setIsLoggedIn(false);\n      }\n\n      if(PathName === '/login')\n      {\n        setToggle(true);\n        document.body.classList.remove('sb-sidenav-toggled');document.body.classList.remove('sb-nav-fixed');\n      }\n    },[location,history,setShow,setMsg]);\n\n\n    return(\n          !isStartExam ?\n            <nav className=\"sb-topnav navbar navbar-expand navbar-dark bg-dark\">\n                <a href={void(0)} className=\"navbar-brand\"><img src={imgPath+'?val='+logoVal} height=\"50\" width=\"50\" alt=\"Logo\" style={{borderRadius:\"45%\"}}></img> {myHeader}</a>\n                <button className=\"btn btn-link btn-sm order-1 order-lg-0\" id=\"sidebarToggle\" onClick={() => {toggleSidebar(setToggle,toggle)}}><i className=\"fas fa-bars\"></i></button>\n\n               <form className=\"d-none d-md-inline-block form-inline ml-auto mr-0 mr-md-3 my-2 my-md-0\">\n                     \n                </form>\n                { isLoggedIn ? <LoginButton url={'/logout'} label={'Logout'} setIsLoggedIn={setIsLoggedIn}/>: null}\n            </nav>\n            : null\n    );\n}\n\nfunction toggleSidebar(setToggle,toggle)\n{\n    setToggle(!toggle);\n    if(!toggle)\n    {\n        document.body.classList.add('sb-sidenav-toggled');document.body.classList.remove('sb-nav-fixed');\n    }\n    else\n    {\n        document.body.classList.add('sb-nav-fixed');document.body.classList.remove('sb-sidenav-toggled');\n    }\n}\n\n\n\nfunction useHeader(setIsLoaded,logoVal)\n{\n    let [myHeader,setMyHeader]          =   useState('GudExams');\n    let [imgPath,setImgPath]            =   useState('');\n\n    useEffect(() =>\n    {\n        getHeaderData();\n    },[logoVal]);\n    \n    async function getHeaderData()\n    {\n        await API.get('/configurations',{params :{\"type\":\"headerconfig\"}})\n        .then(function (res) \n        {\n            if(res.data.status === 'success')\n            {\n                setMyHeader(res.data.header);\n                setImgPath(res.data.imgpath);\n                setIsLoaded(true);\n            }\n            else\n            {\n                setMyHeader('GudExams');\n                setImgPath('');\n                setIsLoaded(true);\n            }\n        })\n        .catch(function (error) \n        {\n            setMyHeader('GudExams');\n            setImgPath('');\n            setIsLoaded(true);\n        })\n    }\n\n    return [myHeader, imgPath];\n}\n\nexport default Header;\n","/home/pawan/Desktop/react-template-hooks/src/Layout/Content.js",[],"/home/pawan/Desktop/react-template-hooks/src/Layout/Sidebar.js",["392","393","394","395"],"import React, { useContext } from 'react';\nimport {UserContext} from '../App';\nimport { Link } from 'react-router-dom';\n\nfunction Sidebar() \n{\n    const {currentUser, setCurrentUser}   = useContext(UserContext);\n\n    if(currentUser && currentUser.role === 'STUDENT')\n    {\n        return (\n                <nav className=\"sb-sidenav accordion sb-sidenav-dark\" id=\"sidenavAccordion\" >\n                    <div className=\"sb-sidenav-menu\">\n                        <div className=\"nav\">\n                            <div className=\"sb-sidenav-menu-heading\">Main Menu</div>\n                            <Link className=\"nav-link\" to={{pathname: \"/studenthome\"}}>\n                                <div className=\"sb-nav-link-icon\"><i className=\"fas fa-tachometer-alt\"></i></div>\n                                Home\n                            </Link>\n                        </div>\n                    </div>\n                </nav>\n        );\n    }\n    else if(currentUser && currentUser.role === 'ADMIN')\n    {\n        return (\n            <nav className=\"sb-sidenav accordion sb-sidenav-dark\" id=\"sidenavAccordion\" >\n                <div className=\"sb-sidenav-menu\">\n                    <div className=\"nav\">\n                        <div className=\"sb-sidenav-menu-heading\">Main Menu</div>\n                        <Link  className=\"nav-link\" to={{pathname: \"/adminhome\"}}>\n                            <div className=\"sb-nav-link-icon\"><i className=\"fas fa-tachometer-alt\"></i></div>\n                            Home\n                        </Link>\n                        <Link  className=\"nav-link\" to={{pathname: \"/clearsession\"}}>\n                            <div className=\"sb-nav-link-icon\"><i className=\"fas fa-address-card\"></i></div>\n                            Clear Session\n                        </Link>\n\n                        <a className=\"nav-link collapsed\" data-toggle=\"collapse\" data-target=\"#collapseConfigurations\" aria-expanded=\"false\" aria-controls=\"collapseLayouts\">\n                            <div className=\"sb-nav-link-icon\"><i className=\"fas fa-cogs\"></i></div>\n                                General Configurations\n                            <div className=\"sb-sidenav-collapse-arrow\"><i className=\"fas fa-angle-down\"></i></div>\n                        </a>\n                        <div className=\"collapse\" id=\"collapseConfigurations\" aria-labelledby=\"headingOne\" data-parent=\"#sidenavAccordion\">\n                            <nav className=\"sb-sidenav-menu-nested nav\">\n                                <Link className=\"nav-link\" to={{pathname: \"/configHeader\"}}>\n                                    <div className=\"sb-nav-link-icon\"><i className=\"fas fa-tools\"></i></div>\n                                    Configure Header\n                                </Link>\n                                <Link className=\"nav-link\" to={{pathname: \"/configFooter\"}}>\n                                    <div className=\"sb-nav-link-icon\"><i className=\"fas fa-tools\"></i></div>\n                                    Configure Footer\n                                </Link>\n                                <Link className=\"nav-link\" to={{pathname: \"/addGlobController\"}}>\n                                    <div className=\"sb-nav-link-icon\"><i className=\"fas fa-tools\"></i></div>\n                                    Add Global Controller\n                                </Link>\n                                <Link className=\"nav-link\" to={{pathname: \"/addClusterController\"}}>\n                                    <div className=\"sb-nav-link-icon\"><i className=\"fas fa-tools\"></i></div>\n                                    Add Cluster Controller\n                                </Link>\n                                <Link className=\"nav-link\" to={{pathname: \"/addInstitutes\"}}>\n                                    <div className=\"sb-nav-link-icon\"><i className=\"fas fa-university\"></i></div>\n                                    Add/Upload Institutes\n                                </Link>\n                                <Link className=\"nav-link\" to={{pathname: \"/globalClusterAllocation\"}}>\n                                    <div className=\"sb-nav-link-icon\"><i className=\"fas fa-university\"></i></div>\n                                    Global-Cluster Alloc\n                                </Link>\n                                <Link className=\"nav-link\" to={{pathname: \"/instClusterAllocation\"}}>\n                                    <div className=\"sb-nav-link-icon\"><i className=\"fas fa-university\"></i></div>\n                                    Inst-Cluster Alloc\n                                </Link>\n                            </nav>\n                        </div>\n\n                        <a className=\"nav-link collapsed\" data-toggle=\"collapse\" data-target=\"#examConfigurations\" aria-expanded=\"false\" aria-controls=\"collapseLayouts\">\n                            <div className=\"sb-nav-link-icon\"><i className=\"fas fa-cogs\"></i></div>\n                                Exam Configurations\n                            <div className=\"sb-sidenav-collapse-arrow\"><i className=\"fas fa-angle-down\"></i></div>\n                        </a>\n                        <div className=\"collapse\" id=\"examConfigurations\" aria-labelledby=\"headingOne\" data-parent=\"#sidenavAccordion\">\n                            <nav className=\"sb-sidenav-menu-nested nav\">\n                                <Link className=\"nav-link\" to={{pathname: \"/programMaster\"}}>\n                                    <div className=\"sb-nav-link-icon\"><i className=\"fas fa-list-alt\"></i></div>\n                                    Program Master\n                                </Link>\n                                <Link className=\"nav-link\" to={{pathname: \"/subjectMaster\"}}>\n                                    <div className=\"sb-nav-link-icon\"><i className=\"fas fa-list-alt\"></i></div>\n                                    Subject Master\n                                </Link>\n                                <Link className=\"nav-link\" to={{pathname: \"/addTest\"}}>\n                                    <div className=\"sb-nav-link-icon\"><i className=\"fas fa-list-alt\"></i></div>\n                                    Add Test\n                                </Link>\n                                <Link className=\"nav-link\" to={{pathname: \"/studentMaster\"}}>\n                                    <div className=\"sb-nav-link-icon\"><i className=\"fas fa-list-alt\"></i></div>\n                                    Student Master\n                                </Link>\n                                <Link className=\"nav-link\" to={{pathname: \"/studSubjectAlloc\"}}>\n                                    <div className=\"sb-nav-link-icon\"><i className=\"fas fa-list-alt\"></i></div>\n                                    Stud Subject Alloc\n                                </Link>\n                            </nav>\n                        </div>\n\n                        <Link  className=\"nav-link\" to={{pathname: \"/adminreports\"}}>\n                            <div className=\"sb-nav-link-icon\"><i className=\"fas fa-clipboard-list\"></i></div>\n                            Reports\n                        </Link>\n                    </div>\n                </div>\n            </nav>\n        );\n    }\n    else if(currentUser && currentUser.role === 'EADMIN')\n    {\n        return (\n            <nav className=\"sb-sidenav accordion sb-sidenav-dark\" id=\"sidenavAccordion\" >\n                <div className=\"sb-sidenav-menu\">\n                    <div className=\"nav\">\n                        <div className=\"sb-sidenav-menu-heading\">Main Menu</div>\n                        <Link  className=\"nav-link\" to={{pathname: \"/insthome\"}}>\n                            <div className=\"sb-nav-link-icon\"><i className=\"fas fa-tachometer-alt\"></i></div>\n                            Home\n                        </Link>\n                        <Link  className=\"nav-link\" to={{pathname: \"/clearsession\"}}>\n                            <div className=\"sb-nav-link-icon\"><i className=\"fas fa-address-card\"></i></div>\n                            Clear Session\n                        </Link>\n                        <Link  className=\"nav-link\" to={{pathname: \"/instreports\"}}>\n                            <div className=\"sb-nav-link-icon\"><i className=\"fas fa-clipboard-list\" aria-hidden=\"true\"></i></div>\n                            Reports\n                        </Link>\n                    </div>\n                </div>\n            </nav>\n        );\n    }\n    else if(currentUser && currentUser.role === 'GADMIN')\n    {\n        return (\n                <nav className=\"sb-sidenav accordion sb-sidenav-dark\" id=\"sidenavAccordion\" >\n                    <div className=\"sb-sidenav-menu\">\n                        <div className=\"nav\">\n                            <div className=\"sb-sidenav-menu-heading\">Main Menu</div>\n                            <Link className=\"nav-link\" to={{pathname: \"/gadminhome\"}}>\n                                <div className=\"sb-nav-link-icon\"><i className=\"fas fa-tachometer-alt\"></i></div>\n                                Home\n                            </Link>\n                        </div>\n                    </div>\n                </nav>\n        );\n    }\n    else if(currentUser && currentUser.role === 'CADMIN')\n    {\n        return (\n                <nav className=\"sb-sidenav accordion sb-sidenav-dark\" id=\"sidenavAccordion\" >\n                    <div className=\"sb-sidenav-menu\">\n                        <div className=\"nav\">\n                            <div className=\"sb-sidenav-menu-heading\">Main Menu</div>\n                            <Link className=\"nav-link\" to={{pathname: \"/cadminhome\"}}>\n                                <div className=\"sb-nav-link-icon\"><i className=\"fas fa-tachometer-alt\"></i></div>\n                                Home\n                            </Link>\n\n                            <a className=\"nav-link collapsed\" data-toggle=\"collapse\" data-target=\"#collapseConfigurations\" aria-expanded=\"false\" aria-controls=\"collapseLayouts\">\n                            <div className=\"sb-nav-link-icon\"><i className=\"fas fa-cogs\"></i></div>\n                                Configurations\n                            <div className=\"sb-sidenav-collapse-arrow\"><i className=\"fas fa-angle-down\"></i></div>\n                            </a>\n                            <div className=\"collapse\" id=\"collapseConfigurations\" aria-labelledby=\"headingOne\" data-parent=\"#sidenavAccordion\">\n                                <nav className=\"sb-sidenav-menu-nested nav\">\n                                    <Link className=\"nav-link\" to={{pathname: \"/addInstitutes\"}}>\n                                        <div className=\"sb-nav-link-icon\"><i className=\"fas fa-university\"></i></div>\n                                        Add/Upload Institutes\n                                    </Link>\n                                </nav>\n                            </div>\n                        </div>\n                    </div>\n                </nav>\n        );\n    }\n    else\n    {\n        return (\n            <nav className=\"sb-sidenav accordion sb-sidenav-dark\" id=\"sidenavAccordion\" >\n                <div className=\"sb-sidenav-menu\">\n                    <div className=\"nav\">\n                        <div className=\"sb-sidenav-menu-heading\">Main Menu</div>\n                        <Link  className=\"nav-link\" to={{pathname: \"/\"}}>\n                            <div className=\"sb-nav-link-icon\"><i className=\"fas fa-tachometer-alt\"></i></div>\n                            Home\n                        </Link>\n                    </div>\n                </div>\n            </nav>\n        );\n    }\n}\n\nexport default Sidebar;","/home/pawan/Desktop/react-template-hooks/src/Layout/Footer.js",["396"],"import React, { useState, useEffect, useContext } from 'react';\nimport API from '../api';\nimport {FooterContext} from '../App';\n\nfunction Footer() \n{\n    const {footerVal, setFooterVal} = useContext(FooterContext);\n    let footerData  = useFooterData(footerVal);\n    let d           = new Date();\n    let year        = d.getFullYear();\n    \n\n    return (\n        footerData !=='' ? \n        <div className=\"container-fluid\">\n            <div className=\"d-flex align-items-center justify-content-between small\">\n                <div className=\"text-muted\">Copyright &copy; {footerData} {year}</div>\n            </div>\n        </div>\n        : null\n    );\n}\n\n\n\n\nfunction useFooterData(footerVal)\n{\n    const [footerData,setFooterData] = useState('');\n    useEffect(() => {getFooterData();},[footerVal]);\n\n    async function getFooterData()\n    {\n        await API.get('/configurations',{params :{\"type\":\"footerconfig\"}})\n        .then(function (res) \n        {\n            if(res.data.status === 'success')\n            {\n                setFooterData(res.data.footer);\n            }\n            else\n            {\n                setFooterData('GudExams');\n            }\n        })\n        .catch(function (error) \n        {\n            setFooterData('GudExams');\n        })\n    }\n\n    return footerData\n}\n\nexport default Footer;\n","/home/pawan/Desktop/react-template-hooks/src/Components/LoginButton.js",["397"],"import React, { useContext } from 'react';\nimport API from '../api';\nimport { useHistory } from 'react-router-dom';\nimport {UserContext} from '../App';\n\nfunction LoginButton(props)\n{\n  let history                                     =   useHistory(props);\n  const {currentUser, setCurrentUser}             =   useContext(UserContext);\n\n  async function loginLogout()\n  {\n    if(props.label === 'Logout')\n    {\n      //-----------Call Logout API and on success redirect to Login Page-------\n\n      const res = await API.post('/logout');\n\n      if(res.data.status === 'Success')\n      {\n        setCurrentUser(undefined);\n        await localStorage.clear();\n        props.setIsLoggedIn(false);\n        history.replace('/login');\n      }\n      //-----------------------------------------------------------------------\n    }\n    else\n    {\n        history.replace('/login');\n    }\n  }\n\n    return (\n        <div>\n          <button onClick={() => {loginLogout(props)}} className=\"btn btn-primary\">{props.label}</button>\n        </div>\n    );\n}\n\nexport default LoginButton;\n","/home/pawan/Desktop/react-template-hooks/src/Components/Login.js",["398","399"],"import React, { useState , useEffect, useContext, createRef } from 'react';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport API from '../api';\nimport ReCAPTCHA   from \"react-google-recaptcha\";\nimport { useHistory } from 'react-router-dom';\nimport {UserContext} from '../App';\nimport ClipLoader from \"react-spinners/ClipLoader\";\n\nwindow.recaptchaOptions = {\n    useRecaptchaNet: true,\n  };\n\nexport default function Login(props)\n{\n  const {currentUser, setCurrentUser}               =    useContext(UserContext);\n  let history                                       =    useHistory();\n  const [myRecaptcha, setMyRecaptcha]               =    useState();\n  const [myMsg, setMyMsg]                           =    useState();\n  let [loading, setLoading]                         =    useState(true);\n  const flag                                        =    useFlag(setLoading);\n  const siteKey                                     =    process.env.REACT_APP_CAPTCHA_SITE_KEY;\n  const recaptchaRef                                =    createRef();\n\n  return (\n    !loading ?\n        flag !== undefined && <Formik\n        initialValues={{ username: \"\", password: \"\", flag:flag ,instId:\"\" }}\n        onSubmit={async (values,actions) =>\n        {\n          if (myRecaptcha !== undefined){\n            await checkLogin(values.username,values.password,values.instId,flag,myRecaptcha,setMyMsg,history,setCurrentUser,recaptchaRef);\n            actions.setSubmitting(false);\n            actions.resetForm({\n                values: {\n                  username: '',\n                  password: '',\n                  flag: flag,\n                  instId:''\n                },\n            });\n          }\n        }}\n        validationSchema={Yup.object().shape({\n            username:Yup.string()\n            .required(\"Username Required\"),\n            password: Yup.string()\n            .required(\"Password is Required\"),\n            flag: Yup.number(),\n            instId: Yup.string().when('flag', {\n              is:0,\n              then: Yup.string().required(\"Inst ID is Required\")\n            })\n        })}\n    >\n    {\n        props => {\n            const {\n                values,\n                touched,\n                errors,\n                isSubmitting,\n                handleChange,\n                handleBlur,\n                handleSubmit\n            } = props;\n            return (\n\n                <div style={{marginBottom:\"30px\"}}>\n                    <div className=\"container\">\n                        <div className=\"row justify-content-center\">\n                            <div className=\"col-lg-6\">\n                                <div className=\"card shadow-lg border-0 rounded-lg mt-10 animate__animated animate__backInDown animate__slow\">\n                                    <div className=\"card-header\"><h3 className=\"text-center font-weight-light my-4\"><b>Login</b></h3></div>\n                                    <div className=\"card-body\" >\n                                        <form onSubmit={handleSubmit}>\n                                            <div className=\"form-group\">\n                                                <label><b>User Name</b></label>\n\n                                                <input className=\"form-control py-4\" id=\"username\" type=\"text\"\n                                                name=\"username\"\n                                                value ={values.username}\n                                                placeholder=\"Enter User Name\"\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                                class1name={errors.username && touched.username && \"error\"}\n                                                />\n\n                                                {errors.username && touched.username && (\n                                                    <div className=\"alert alert-info\">{errors.username}</div>\n                                                )}\n\n                                            </div>\n                                            <div className=\"form-group\">\n                                                <label className=\"form-group\"><b>Password</b></label>\n\n                                                <input className=\"form-control py-4\" id=\"password\" name=\"password\"\n                                                type=\"password\"\n                                                value ={values.password}\n                                                placeholder=\"Enter password\"\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                                class1name={errors.password && touched.password && \"error\"}\n                                                />\n\n                                                {errors.password && touched.password && (\n                                                    <div className=\"alert alert-info\">{errors.password}</div>\n                                                )}\n                                            </div>\n\n                                            {flag === 0 && (<div className=\"form-group\">\n                                                <label className=\"form-group\"><b>Inst ID</b></label>\n\n                                                <input className=\"form-control py-4\" id=\"instId\" name=\"instId\" type=\"instId\"\n                                                value ={values.instId}\n                                                placeholder=\"Enter Institute ID\"\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                                class1name={errors.instId && touched.instId && \"error\"}\n                                                />\n\n                                                {errors.instId && touched.instId && (\n                                                    <div className=\"alert alert-info\">{errors.instId}</div>\n                                                )}\n                                            </div>)}\n\n                                            <ReCAPTCHA name=\"myRecaptcha\" id=\"myRecaptcha\" sitekey={siteKey} badge=\"inline\" onChange={(value) => setMyRecaptcha(value)} ref={recaptchaRef}/>\n\n                                            <div className=\"form-group d-flex align-items-center justify-content-between mt-4 mb-0\">\n                                                <button className=\"btn btn-primary\" type=\"submit\" id=\"submit\" disabled={isSubmitting}>Login</button>\n                                            </div><br/>\n\n                                            {myMsg !== undefined && (\n                                                <div className=\"alert alert-success animate__animated animate__bounceIn animate_slow\">{myMsg}</div>\n                                            )}\n\n                                        </form>\n                                    </div>\n                                    <div className=\"card-footer text-center\">\n                                        <div className=\"small\"><a href=\"/register\">Need an account? Sign up!</a></div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                      </div>\n                </div>\n            );\n        }\n    }\n    </Formik>\n    :\n    <div className=\"col-lg-12\" style={{position:\"absolute\",top:\"40%\",left:\"40%\"}}>\n        <ClipLoader color={'#ff0000'} loading={loading} size={100} />\n    </div>\n  );\n}\n\nasync function checkLogin(username,password,instId,flag,myRecaptcha,setMyMsg,history,setCurrentUser,recaptchaRef)\n{\n    await API.post('/login',{\"username\":username,\"password\":password,\"inst_id\":instId,\"flag\":flag,\"myRecaptcha\":myRecaptcha}).then(res =>\n    {\n            if(res.data.status === 'success')\n            {\n                localStorage.setItem(\"token\",JSON.stringify(res.data.token));\n                if(res.data.data.role === 'STUDENT')\n                {\n                    setCurrentUser(res.data.data);\n                    history.replace({ pathname: '/studenthome',state:{currentUser: res.data.data}});\n                }\n                else if(res.data.data.role === 'ADMIN')\n                {\n                    setCurrentUser(res.data.data);\n                    history.replace({ pathname: '/adminhome',state:{currentUser: res.data.data}});\n                }\n                else if(res.data.data.role === 'EADMIN')\n                {\n                    setCurrentUser(res.data.data);\n                    history.replace({ pathname: '/insthome',state:{currentUser: res.data.data}});\n                }\n                else if(res.data.data.role === 'GADMIN')\n                {\n                    setCurrentUser(res.data.data);\n                    history.replace({ pathname: '/gadminhome',state:{currentUser: res.data.data}});\n                }\n                else if(res.data.data.role === 'CADMIN')\n                {\n                    setCurrentUser(res.data.data);\n                    history.replace({ pathname: '/cadminhome',state:{currentUser: res.data.data}});\n                }\n            }\n            else\n            {\n                recaptchaRef.current.reset();\n                setMyMsg(res.data.message);\n            }\n    })\n}\n\n\n\nfunction useFlag(setLoading)\n{\n    const [flag, setFlag]   =    useState();\n\n    useEffect(() => {updateFlag();}, []);\n\n    async function updateFlag()\n    {\n        setLoading(true);\n        const res = await API.get('/settings',{params: {\"type\":\"login\"}});\n        if(res.data.status==='success')\n        {\n            setFlag(res.data.flag);\n            setLoading(false);\n        }\n    }\n\n    return flag;\n}\n","/home/pawan/Desktop/react-template-hooks/src/Components/Startexam.js",["400","401","402","403","404"],"import React ,{ useState, useEffect, useContext }  from 'react';\nimport QuestionAnswer from \"./Exam/QuestionAnswer\";\nimport QuestionButtons from \"./Exam/QuestionButtons\";\nimport NextSaveButton from \"./Exam/NextSaveButton\";\nimport NextButton from \"./Exam/NextButton\";\nimport EndExamButton from \"./Exam/EndExamButton\";\nimport EndPreviewButton from \"./Exam/EndPreviewButton\";\nimport PreviousButton from \"./Exam/PreviousButton\";\nimport OverallSummery from \"./Exam/OverallSummery\";\nimport ReviewLater from \"./Exam/ReviewLater\";\nimport MyTimer from \"./Exam/MyTimer.js\";\nimport { useHistory } from 'react-router-dom';\nimport API from '../api';\nimport {ShowContext} from '../App';\nimport {PopupContext} from '../App';\nimport WebCamCapture from './Exam/WebCamCapture';\n\nfunction Startexam(props)\n{\n  const {setShow,setMsg}                          =   useContext(ShowContext);\n  const {setPopupShow,setPopupMsg}                =   useContext(PopupContext);\n  let history                                     =   useHistory();\n  let [myOption, setMyOption]                     =   useState();\n  let [myPhotoCapture, setMyPhotoCapture]         =   useState(false);\n  let [myCameraPerm, setMyCameraPerm]             =   useState(false);\n\n  \n\n  if(props.location.state)\n  {\n    //console.log(props.location.state.questions);\n    var originalSelectedOptions        = getSelectedOptions(props.location.state.questions);\n    var questionIndex                  = props.location.state.currentQuestionIndex;\n    var myReviewArray                  = getReviewOptions(props.location.state.questions);\n  }\n\n  let [selectedOptions, setSelectedOptions] = useState(originalSelectedOptions);\n\n  useEffect(() => \n  {\n    if (props.location.state === undefined)\n    {\n      setShow(true);\n      setMsg('You are redirected because you have refreshed the examination page forcefully');\n        history.replace('/studenthome');\n    }\n  }, [props.location])\n\n\n  useEffect(() => {\n    if(myOption)\n    {\n      setSelectedOptions(prev => {\n        return {...prev, [questionIndex]: myOption.trim()}\n      });\n    }\n  }, [myOption]);\n//----------------------Catching Opening of other window------------------------\n  useEffect(() =>\n  {\n    if(props.location.state && !props.location.state.preview)\n    {\n      const onBlurCallback = () => onBlur(props, setPopupShow,setPopupMsg, history);\n      window.addEventListener('blur', onBlurCallback);\n      return () =>\n      {\n        window.removeEventListener('blur', onBlurCallback);\n      };\n    }\n  }, [props.location]);\n//------------------------------------------------------------------------------\n//------------------------Restraining back button of browser--------------------\n  useEffect(() => {\n  window.history.pushState(props.location.state, '', '/startexam');\n}, [props.location]);\n//------------------------------------------------------------------------------\n//------------------------Proctoring -------------------------------------------\nuseEffect(() => {\n\n  if(props.location.state)\n  {\n    if(props.location.state.exam.paper.photo_capture)\n    {\n      setMyPhotoCapture(true);\n    }\n    else\n    {\n      setMyCameraPerm(true);\n    }\n  }\n}, [props.location]);\n//------------------------------------------------------------------------------\n\n  return (\n    props.location.state ?\n      <div className=\"row animate__animated animate__lightSpeedInLeft animate_slower\">\n          <div className='card col-lg-12'>\n              <div className=\"card-header bg-primary row\" style={{color:\"white\"}}>\n                <div className=\"col-lg-8\">\n                  <h5><b>Subject Name: {props.location.state.exam.paper.paper_name} ({props.location.state.exam.paper.paper_code}) </b></h5>\n                </div>\n                <div className=\"col-lg-4\">\n                      <i className=\"fas fa-clock fa-lg\" style={{float:\"right\"}}></i> &nbsp;&nbsp;\n                      {myCameraPerm && !props.location.state.preview && (<div style={{float:\"right\"}}><MyTimer data={props}/></div>)}\n                </div>\n              </div>\n          </div>\n\n          <div className=\"card col-lg-8\">\n            <div className=\"card-body\">\n            {myCameraPerm && (<QuestionAnswer questions={props} setMyOption={setMyOption}  selectedOptions={selectedOptions}/>)}\n              <hr/>\n              <div className=\"col-lg-12 row\">\n              {myCameraPerm && (<PreviousButton data={props} setMyOption={setMyOption}/>)}\n\n              {myCameraPerm && !props.location.state.preview && (<NextSaveButton data={props} myOption={myOption} setMyOption={setMyOption} setSelectedOptions={setSelectedOptions} />)}\n\n              {myCameraPerm && props.location.state.preview && (<NextButton data={props} myOption={myOption} setMyOption={setMyOption} setSelectedOptions={setSelectedOptions} />)}\n\n              {myCameraPerm && props.location.state.preview && (<EndPreviewButton index={questionIndex} length={props.location.state.questions.length} data={props}/>)}\n\n              {myCameraPerm && !props.location.state.preview && (<EndExamButton index={questionIndex} length={props.location.state.questions.length} data={props}/>)}\n\n              {parseInt(props.location.state.exam.paper.review_question) ? myCameraPerm && !props.location.state.preview && (<ReviewLater data={props} myReviewQuestions={myReviewArray} index={questionIndex}/>) : null}\n\n                {myPhotoCapture && (<WebCamCapture exam={props.location.state.exam.id} setMyCameraPerm={setMyCameraPerm} CaptureTime={props.location.state.exam.paper.capture_interval} isProctored={props.location.state.exam.paper.proctoring}/>)}\n              </div>\n            </div>\n          </div>\n          <div className=\"col-lg-4\" style={{float: \"right\"}}>\n          {myCameraPerm && (<QuestionButtons qas={props} setSelectedOptions={setSelectedOptions} setMyOption={setMyOption}/>)}\n          {myCameraPerm && (<OverallSummery data={props}/>)}\n          </div>\n      </div> : null\n  );\n}\n\nasync function onBlur(props, setPopupShow,setPopupMsg, history)\n{\n  const exam                    = props.location.state.exam;\n  const total_allowable_alerts  = props.location.state.exam.paper.exam_switch_alerts;\n  const ExamId                  = exam.id;\n\n  await API.put('/exam/'+ExamId,{\"status\": \"windowswitch\"})\n  .then((res) => {\n    if(res.data.status === 'success')\n    {\n      if(parseInt(res.data.switchedcount) === parseInt(total_allowable_alerts))\n      {\n          //---------------end Examination-----------------------------------\n          handleEndExam(exam,history,setPopupShow,setPopupMsg,res.data.switchedcount);\n          //-----------------------------------------------------------------\n      }\n      else if(parseInt(res.data.switchedcount)+ 5 === parseInt(total_allowable_alerts))\n      {\n        setPopupShow(true);\n        setPopupMsg('Your Window switching limit is about to expire. Continuing switching window now will end your Examination abruptly.');\n      }\n      else\n      {\n        setPopupShow(true);\n        setPopupMsg('Please do not switch window while exam is in progress. This Event will be Recorded.');\n      }\n    }\n  })\n  .catch((error) =>\n  {\n    setPopupShow(true);\n    setPopupMsg('Please do not switch window while exam is in progress.');\n  });\n};\n\nasync function handleEndExam(exam,history,setPopupShow,setPopupMsg,cnt)\n{\n  const ExamId    = exam.id;\n\n  await API.put('/exam/'+ExamId,{\"status\": \"end\"})\n  .then((res) => {\n    if(res.data.status === 'success')\n    {\n      setPopupShow(true);\n      setPopupMsg('Your Examination is Ended abruptly because you switched window '+cnt+' times.');\n      history.replace(\"/studenthome\");\n    }\n  })\n  .catch((error) =>\n  {\n    setPopupShow(true);\n    setPopupMsg('Please do not switch window while exam is in progress.');\n  });\n}\n\n\nfunction getSelectedOptions(questions)\n{\n  let originalSelectedOptions = {};\n  questions.map((question,index) =>\n  {\n    if(question.stdanswer)\n    {\n      originalSelectedOptions[index] = question.stdanswer.trim();\n    }\n    else\n    {\n      originalSelectedOptions[index] = question.stdanswer;\n    }\n  });\n  return originalSelectedOptions;\n}\n\nfunction getReviewOptions(questions)\n{\n  let array = [];\n  questions.map((question,index) =>\n  {\n      if(question.answered.indexOf('review') >= 0)\n      {\n        array[index] = true;\n      }\n      else\n      {\n        array[index] = false;\n      }\n  });\n  return array;\n}\n\nexport default Startexam;\n","/home/pawan/Desktop/react-template-hooks/src/Components/Student/StudHome.js",["405"],"import React, { useState , useEffect, useContext } from 'react';\nimport API from '../../api';\nimport CountCard from './CountCard';\nimport ExamCard from './ExamCard';\nimport { useLocation } from 'react-router-dom';\nimport {UserContext} from '../../App';\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport SearchBox from './SearchBox';\n\nfunction StudHome()\n{\n  const location                                  =   useLocation();\n  const {currentUser, setCurrentUser}             =   useContext(UserContext);\n  let [loading, setLoading]                       =   useState(true);\n\n  const [userRequest, setUserRequest] = useState({\n    loading: true,\n    myExams: null,\n    numExams:0,\n    compExams:0,\n    yetToStartExam:0,\n    resumeExam:0,\n    expiredExam:0\n  });\n\n  //------------------------Restraining back button of browser--------------------\n  useEffect(() => \n  {\n    window.history.pushState(location.state, '', '/studenthome');\n  }, [location]);\n  //------------------------------------------------------------------------------\n\n  useEffect(() =>\n  {\n    getExamData(setUserRequest,setLoading);\n  },[]);\n\n  return (\n      !userRequest.loading && currentUser && !loading?\n      <div>\n        <div className=\"container-fluid\">\n            <h1 className=\"mt-4\">Student Home</h1>\n            <div className=\"breadcrumb col-lg-12 row\">\n              <div className=\"col-lg-6\">\n                <b>Student Name:</b> {currentUser.name} \n              </div>\n              <div className=\"col-lg-6\">\n                <b>Enrollment No:</b> ({currentUser.username})\n              </div>\n            </div>\n            \n            <div className=\"row col-lg-12 animate__animated animate__lightSpeedInLeft animate_slower\">\n              <CountCard count={userRequest.numExams} label={\"All\"} color={\"danger\"} onClick={() => {getExamData(setUserRequest,setLoading);}}/>\n              <CountCard count={userRequest.compExams} label={\"Completed\"} color={\"success\"} onClick={() => {getExamData(setUserRequest,setLoading,'over');}}/>\n              <CountCard count={userRequest.yetToStartExam} label={\"Yet To Start\"} color={\"warning\"} onClick={() => {getExamData(setUserRequest,setLoading,'yettostart');}}/>\n              <CountCard count={userRequest.resumeExam} label={\"Resume\"} color={\"primary\"} onClick={() => {getExamData(setUserRequest,setLoading,'inprogress');}}/>\n              <CountCard count={userRequest.expiredExam} label={\"Expired\"} color={\"info\"} onClick={() => {getExamData(setUserRequest,setLoading,'expired');}}/>\n              <SearchBox getExamData={getExamData} setUserRequest={setUserRequest} setLoading={setLoading}/>\n            </div>\n            <br/><br/>\n            <div className=\"row col-lg-12 animate__animated animate__lightSpeedInLeft animate_slower\">\n            {\n              userRequest.numExams ?\n              userRequest.myExams ? userRequest.myExams.data.map((exam) =>\n              (\n                  <ExamCard exam={exam} key={exam.id}/>\n              )) : null\n              : null\n            }\n            </div><br/>\n        </div>\n      </div> : \n      <div className=\"col-lg-12\" style={{position:\"absolute\",top:\"40%\",left:\"50%\"}}>\n        <ClipLoader color={'#ff0000'} loading={loading} size={200} />\n      </div>\n  );\n}\n\n\nasync function getExamData(setUserRequest,setLoading,filter1='All')\n{\n        setLoading(true);\n        const res = await API.get('/exam');\n        let exams = await res.data;\n        //-------------------Sort data according to exam date for cards---------\n        let unsortedData= exams.data;\n        let sorted = {};\n        sorted = unsortedData.sort(function(a,b)\n        {\n          return a.paper.from_date - b.paper.from_date;\n        });\n        //----------------------------------------------------------------------\n        let i               = 0;\n        let compleated      = 0;\n        let yetToStart      = 0;\n        let resume          = 0;\n        let expired         = 0;\n        let numExams        = exams.data.length;\n        let EndTime         = '';\n        let Now             = '';\n        let overIndex          = [];\n        let inprogressIndex    = [];\n        let yetToStartIndex    = [];\n        let expiredIndex       = [];\n\n        Object.keys(sorted).forEach(function(key)\n        {\n          EndTime           = sorted[key].paper.to_date;\n          Now               = sorted[key].now;\n\n          if(sorted[key].examstatus === 'over')\n          {\n            compleated = compleated+1;\n            overIndex.push(key);\n          }\n          else if(sorted[key].examstatus === '')\n          {\n            if(EndTime < Now)\n            {\n              expired = expired+1;\n              expiredIndex.push(key);\n            }\n            else\n            {\n              yetToStart = yetToStart+1;\n              yetToStartIndex.push(key);\n            }\n          }\n          else if(sorted[key].examstatus === 'inprogress')\n          {\n            if(EndTime < Now)\n            {\n              expired = expired+1;\n              expiredIndex.push(key);\n            }\n            else\n            {\n              resume = resume+1;\n              inprogressIndex.push(key);\n            }\n          }\n          else if(sorted[key].examstatus === 'expired')\n          {\n            expired = expired+1;\n            expiredIndex.push(key);\n          }\n        });\n\n        //---------------------------Filtering array based on examStatus-------\n        if(filter1 === 'over')\n        {\n          for(i=0;i< inprogressIndex.length;i++)\n          {\n            delete sorted[inprogressIndex[i]];\n          }\n          \n          for(i=0;i< yetToStartIndex.length;i++)\n          {\n            delete sorted[yetToStartIndex[i]];\n          }\n          \n          for(i=0;i< expiredIndex.length;i++)\n          {\n            delete sorted[expiredIndex[i]];\n          }\n        }\n        else if(filter1 === 'inprogress')\n        {\n          for(i=0;i< overIndex.length;i++)\n          {\n            delete sorted[overIndex[i]];\n          }\n          \n          for(i=0;i< expiredIndex.length;i++)\n          {\n            delete sorted[expiredIndex[i]];\n          }\n\n          for(i=0;i< yetToStartIndex.length;i++)\n          {\n            delete sorted[yetToStartIndex[i]];\n          }\n        }\n        else if(filter1 === 'expired')\n        {\n          for(i=0;i< overIndex.length;i++)\n          {\n            delete sorted[overIndex[i]];\n          }\n          \n          for(i=0;i< yetToStartIndex.length;i++)\n          {\n            delete sorted[yetToStartIndex[i]];\n          }\n\n          for(i=0;i< inprogressIndex.length;i++)\n          {\n            delete sorted[inprogressIndex[i]];\n          }\n        }\n        else if(filter1 === 'yettostart')\n        {\n          for(i=0;i< overIndex.length;i++)\n          {\n            delete sorted[overIndex[i]];\n          }\n          \n          for(i=0;i< expiredIndex.length;i++)\n          {\n            delete sorted[expiredIndex[i]];\n          }\n\n          for(i=0;i< inprogressIndex.length;i++)\n          {\n            delete sorted[inprogressIndex[i]];\n          }\n        }\n        else if(filter1==='All')\n        {\n\n        }\n        else\n        {\n          let searched = [];\n          //-------------------------Search Paper Name-------------------------------------\n            for(let i=0;i<sorted.length;i++)\n            {\n              let paper_name = sorted[i].paper.paper_name.toLowerCase();\n              let myFilter = filter1.toLowerCase();\n\n              if(paper_name.includes(myFilter))\n              {\n                searched.push(sorted[i]);\n              }\n            }\n            exams.data = searched;\n          //-------------------------------------------------------------------------------\n        }\n        //---------------------------------------------------------------------\n        if(exams.data)\n        {\n          setUserRequest({ loading:false, myExams:exams, numExams:numExams,  compExams:compleated, yetToStartExam:yetToStart, resumeExam:resume, expiredExam:expired });\n        }\n        else\n        {\n          setUserRequest({ loading:false, myExams:exams, numExams:0,  compExams:compleated, yetToStartExam:yetToStart, resumeExam:resume, expiredExam:expired });\n        }\n        setLoading(false);\n}\n\nexport default StudHome;\n","/home/pawan/Desktop/react-template-hooks/src/Components/Student/Instructions.js",["406","407"],"import React ,{ useState, useEffect, useContext }  from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { Link } from 'react-router-dom';\nimport API from '../../api';\nimport WebCamCapture from '../Exam/WebCamCapture';\nimport {UserContext} from '../../App';\n\nfunction useOptions()\n{\n  let history                           =   useHistory();\n  let location                          =   useLocation();\n  let [exam, setExam]                   =   useState();\n  let myExam                            =   undefined;\n  \n\n  if(location.state && location.state.exam)\n  {\n    myExam = location.state.exam;\n    //console.log(myExam);\n  }\n  useEffect(() =>\n  {\n    if (myExam!== undefined)\n    {\n      setExam(myExam);\n    }\n    else\n    {\n      if(location.state && location.state.role === 'STUDENT')\n      {\n        history.replace(\"/studenthome\");\n      }\n      else\n      {\n        history.replace(\"/adminexamreport\");\n      }\n    }\n  }, [myExam,history]);\n\n  return exam;\n}\n\nfunction Instructions(props)\n{\n  const [checked, setChecked]         =   useState(false);\n  const [startexam, setStartexam]     =   useState(true);\n  let history                         =   useHistory();\n  let exam                            =   useOptions();\n  let location                        =   useLocation();\n  let [myCameraPerm, setMyCameraPerm] =   useState(false);\n  const {currentUser, setCurrentUser} =   useContext(UserContext);\n  let shuffleOptions                  =   [];\n\n  let button = '';\n  let BtnLabel = '';\n  let  negativeMarks='';\n  if(exam)\n  {\n        if(exam.examstatus==='inprogress')\n        {\n          BtnLabel = 'Continue Exam';\n        }\n        else\n        {\n          BtnLabel = 'Start Exam';\n        }\n\n        if(location.state.role === 'ADMIN')\n        {\n          BtnLabel = 'Preview Exam';\n        }\n\n        exam.paper.negative_marks===0 ?negativeMarks = 'No' : negativeMarks = 'Yes';\n\n        for(let i=0;i<exam.paper.questions;i++)\n        {\n          shuffleOptions.push(shuffleArray(['optiona','optionb','optionc','optiond']));\n        }\n  }\n\n  return (\n      exam ?\n      <div className=\"animate__animated animate__flash animate_slower\">\n        <div className=\"container-fluid\">\n            <h1 className=\"mt-4\">Exam Instructions</h1>\n            <div className=\"breadcrumb col-lg-12 row\">\n                <div className=\"breadcrumb-item active col-lg-10\">Read Instructions Carefully...</div>\n                <div className=\"col-lg-2\">{currentUser && currentUser.role==='STUDENT' ? <Link to=\"studenthome\" className=\"btn btn-danger btn-sm\">Go Back</Link>: <Link to=\"adminexamreport\" className=\"btn btn-danger btn-sm\">Go Back</Link>}</div>\n            </div>\n            <div className=\"col-lg-12\">\n                  <div className='card'>\n                      <div className=\"card-header bg-primary\" style={{color:\"white\"}}>\n                        <h5><b>{exam.paper.paper_name}({exam.paper.paper_code}) Instructions</b></h5>\n                      </div>\n                      <div className=\"card-body\">\n                        <div className=\"col-lg-8\">\n                          <ul>\n                            <li> Welcome to Online Exam for {exam.paper.paper_name}</li>\n                            <li> Exam has total {exam.paper.questions} Questions</li>\n                            <li> Total time for Exam is {exam.paper.duration} Mins</li>\n                            <li> Negative Marking Exam: <b>{negativeMarks}</b></li>\n                            <li> Close all other windows/apps</li>\n                            <li> Do not close browser/app before logging out</li>\n                          </ul>\n\n                          <h1><i>Best of Luck for your Exam</i></h1>\n                        </div>\n                        <div className=\"col-lg-4\">\n                          <WebCamCapture exam={location.state.exam.id} setMyCameraPerm={setMyCameraPerm} show={'no'} CaptureTime={location.state.exam.paper.capture_interval} isProctored={location.state.exam.paper.proctoring} capture=\"no\"/>\n                        </div>\n                      </div>\n                      <div className=\"card-footer\">\n                        <center>\n                            <input type=\"checkbox\" id=\"read\" name=\"read\" defaultChecked={checked} onChange={() => setChecked(!checked)}/> &nbsp;&nbsp;I have read and understood instructions.<br/><br/>\n                            {BtnLabel!=='Preview Exam' ?\n                            <button disabled={(!checked || !myCameraPerm)} \n                            onClick={() => ExamStart(history,exam,setStartexam,location)} \n                            className=\"btn btn-success\">{BtnLabel}</button>\n                            :\n                            <button disabled={(!checked || !myCameraPerm)} \n                            onClick={() => {ExamPreview(history,exam,setStartexam,location);}} \n                            className=\"btn btn-success\">{BtnLabel}</button>\n                            }\n                        </center>\n                      </div>\n                  </div>\n            </div>\n            <br/>\n            <div>{!startexam && (\n                <div className=\"alert alert-info\">Problem Starting Examination</div>\n            )}</div>\n        </div>\n      </div> : ''\n    );\n}\n\n/*function checkCameraPermissions(setStartexam)\n{\n  setStartexam(true);\n}*/\n\nasync function ExamPreview(history,exam,setStartexam,location)\n{\n\n  let examDetails = {}\n  //------------------Start Exam------------------------------------------------\n  if(location.state.role !== 'STUDENT')\n  {\n        const myQuestions = await getPreviewQuestions(exam);\n        if(myQuestions)\n        {\n          examDetails = {\n          preview                             : true,\n          exam                                : exam,\n          questions                           : myQuestions,\n          currentQuestionIndex                : 0,\n          solvedQuestionIndexes               : [], \n          unsolvedQuestionIndexes             : [],\n          markedSolvedIndexes                 : [],\n          markedUnsolvedIndexes               : [],\n        }\n        setStartexam(true);\n        history.replace(\"/startexam\", examDetails) ;\n      }\n  }\n  else\n  {\n    setStartexam(false);\n  }\n}\n\n\nasync function ExamStart(history,exam,setStartexam,location)\n{\n  let examDetails = {}\n  //------------------Start Exam------------------------------------------------\n  if(location.state.role === 'STUDENT')\n  {\n    if(await startMyExam(exam))\n    {\n        const myQuestions = await getQuestions(exam);\n        if(myQuestions)\n        {\n          //console.log(myQuestions);\n          examDetails = {\n          preview                             :   false,\n          exam                                :   exam,\n          questions                           :   myQuestions,\n          currentQuestionIndex                :   0,\n          solvedQuestionIndexes               :   getIndexes(myQuestions,'answered'), unsolvedQuestionIndexes             :   getIndexes(myQuestions,'unanswered'),\n          markedSolvedIndexes                 :   getIndexes(myQuestions,'answeredandreview'),\n          markedUnsolvedIndexes               :   getIndexes(myQuestions,'unansweredandreview'),\n        }\n        setStartexam(true);\n        history.replace(\"/startexam\", examDetails) ;\n      }\n    }\n    else\n    {\n      setStartexam(false);\n    }\n  }\n  //----------------------------------------------------------------------------\n}\n\nasync function startMyExam(exam)\n{\n  const ExamId = exam.id;\n\n  const res = await API.put('/exam/'+ExamId,{\"status\": \"start\"});\n\n  if(res.data.status === 'success')\n  {\n    return 1;\n  }\n  else\n  {\n    return 0;\n  }\n}\n\n\nasync function getQuestions(exam)\n{\n  const ExamId = exam.id;\n\n  const res = await API.get('/answer',{params: {\"exam_id\": ExamId}});\n  if(res.data.status === 'success')\n  {\n    return res.data.data;\n  }\n  else\n  {\n    return null;\n  }\n}\n\nasync function getPreviewQuestions(exam)\n{\n  const PaperId = exam.paper.id;\n\n  const res = await API.get('/questions/'+PaperId,{params: {\"type\" : \"preview\"}});\n  if(res.data.status === 'success')\n  {\n    return res.data.data;\n  }\n  else\n  {\n    return null;\n  }\n}\n\nfunction getIndexes(myQuestions,searchString)\n{\n  let arr     = [];\n\n  myQuestions.forEach(function(question,index){\n    if(question.answered === searchString)\n    {\n      arr.push(index);\n    }\n  });\n  return arr;\n}\n\nfunction shuffleArray(array) \n{\n  for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n\nexport default Instructions;\n","/home/pawan/Desktop/react-template-hooks/src/Components/Exam/MyTimer.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Student/CountCard.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Student/ExamCard.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Exam/QuestionAnswer.js",["408","409"],"import React, {useState,useEffect} from 'react';\nimport Options from \"./Options\";\nimport MathJax from 'react-mathjax-preview';\nimport Lightbox from 'react-image-lightbox';\nimport 'react-image-lightbox/style.css';\n\nfunction QuestionAnswer(props) {\n  const questions             = props.questions.location.state.questions;\n  const index                 = props.questions.location.state.currentQuestionIndex;\n  const [isOpen, setIsOpen]   = useState(false);\n  const showMarks             = parseInt(props.questions.location.state.exam.paper.question_marks);\n  const shuffleOptions        = parseInt(props.questions.location.state.exam.paper.option_shuffle);\n\n  //------------------------------Question Variables----------------------------\n  let  question       =   '';\n  const projpath      =   process.env.REACT_APP_PROJPATH;\n  let question_path   =  '';\n  //----------------------------------------------------------------------------\n\n  if(!questions[index].question.qu_fig)\n  {\n    question = questions[index].question.question;\n  }\n  else\n  {\n    question = questions[index].question.question;\n    question_path = projpath+\"\"+questions[index].question.qu_fig;\n  }\n\n  return (\n          <div className=\"col-lg-12 row\">\n            {question_path}\n            <div className=\"col-lg-12\">\n              <b>Question {questions[index].qnid_sr}:</b>\n            </div>\n            <div className=\"col-lg-12\" style={{height:\"200px\", overflow:\"auto\"}}>\n                {showMarks ? <div style={{float:'right'}}><b>{'Marks: '+questions[index].marks}</b></div>:null}\n\n                <MathJax math={question} /> \n\n                <br/>\n                {isOpen && (<Lightbox\n                  mainSrc={question_path}\n                  onCloseRequest={() => setIsOpen(false)}\n                  />\n                )}\n              <img src={question_path} alt=\"\" onClick={() => setIsOpen(true)}/>\n            </div>\n\n            <div className=\"col-lg-12\">\n              <hr/>\n            </div>\n\n            <div className=\"col-lg-12\" style={{height:\"250px\", overflow:\"auto\"}}>\n\n\n\n              <Options id=\"optiona\" opt={questions[index].question.optiona} optimage={questions[index].question.a1} qu={questions[index]} setMyOption={props.setMyOption} data={props} selectedOptions={props.selectedOptions} />\n              <hr/>\n              <Options id=\"optionb\" opt={questions[index].question.optionb} optimage={questions[index].question.a2} qu={questions[index]} setMyOption={props.setMyOption} data={props} selectedOptions={props.selectedOptions} />\n              <hr/>\n              <Options id=\"optionc\" opt={questions[index].question.optionc} optimage={questions[index].question.a3} qu={questions[index]} setMyOption={props.setMyOption} data={props} selectedOptions={props.selectedOptions} />\n              <hr/>\n              <Options id=\"optiond\" opt={questions[index].question.optiond} optimage={questions[index].question.a4} qu={questions[index]} setMyOption={props.setMyOption} data={props} selectedOptions={props.selectedOptions} />\n\n            </div>\n          </div>\n  );\n}\n\n/*function shuffleArray(array) \n{\n  for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n  }\n}*/\n\nexport default QuestionAnswer;\n","/home/pawan/Desktop/react-template-hooks/src/Components/Exam/QuestionButtons.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Exam/NextSaveButton.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Exam/EndExamButton.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Exam/PreviousButton.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Exam/OverallSummery.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Exam/ReviewLater.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Exam/Options.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Exam/WebCamCapture.js",["410","411","412","413","414","415","416","417","418","419","420"],"import React, { useState,useEffect, useContext } from 'react';\nimport Webcam from \"react-webcam\";\nimport { useHistory } from 'react-router-dom';\nimport {PopupContext} from '../../App';\nimport API from '../../api';\nimport {UserContext} from '../../App';\n\n\nconst WebCamCapture = (props) => {\n    const {currentUser, setCurrentUser}     = useContext(UserContext);\n    let CaptureTime                         = parseInt(props.CaptureTime) * 1000;\n    \n    if(CaptureTime === 0 || CaptureTime === '0')\n    {\n      CaptureTime = 9999999;\n    }\n    const webcamRef                         = React.useRef(null);\n    const [imgSrc, setimgSrc]               = useState(null);\n    const videoConstraints                  = {facingMode: \"user\"};\n    let history                             = useHistory();\n    const {setPopupShow,setPopupMsg}        = useContext(PopupContext);\n    const exam                              = props.exam;\n    const CapTime                           = props;\n    const capture1                          = props.capture;\n    \n\n    const capture                = React.useCallback(\n    () => \n        { \n          if(webcamRef)\n          {\n              const imageSrc            = webcamRef.current.getScreenshot();\n              setimgSrc(imageSrc); \n              if(capture1 !== 'no')\n              {\n                //-----------------Specifically for getting value instead of Promise-----\n                (async () => \n                {\n                  let res = await storeSnap(exam,imageSrc);\n                  let snapid = res.data.snapid;\n                  if(snapid && props.isProctored)\n                  {\n                    ProcessImage(imageSrc,exam,snapid,setPopupShow,setPopupMsg);\n                  }\n                })();\n                //-----------------------------------------------------------------------\n              }\n          }\n        },\n        [webcamRef,setimgSrc,exam]\n    );\n\n    useEffect(() => {    \n        navigator.mediaDevices.getUserMedia({ video: true, voice: true })\n        .then(function(stream) \n        {\n            props.setMyCameraPerm(true);\n        })\n        .catch(function(err) \n        {\n            props.setMyCameraPerm(false);\n            setPopupShow(true);\n            setPopupMsg('Without Camera Premission Examination can not be started.');\n            if(currentUser && currentUser.role === 'STUDENT')\n            {\n                history.replace('/studenthome');\n            }\n            else if(currentUser && currentUser.role === 'ADMIN')\n            {\n                history.replace('/adminexamreport');\n            }\n        });\n        let myCapture = setInterval(capture, CaptureTime);\n\n        //------------------Cleanup-----------------------------------------\n        return () => {\n            clearInterval(myCapture);\n        }\n        //------------------------------------------------------------------\n    },[history.location,capture,history,props,setPopupMsg,setPopupShow]);   \n\n    let webCamStyle = '';\n\n    if(props.show==='no')\n    {\n        webCamStyle = {display:'none'};\n    }\n    else\n    {\n        webCamStyle = {display:'block'};\n    }\n  \n    return (\n        <div className=\"col-lg-12\" style={{margin:\"20px\"}} style={webCamStyle}>\n            <center>\n                <Webcam\n                audio={false}\n                height={400}\n                ref={webcamRef}\n                screenshotFormat=\"image/jpeg\"\n                width={300}\n                videoConstraints={videoConstraints}\n                screenshotQuality={\"1\"}\n                />\n            </center>\n        </div>\n    );\n  };    \n\n  async function storeSnap(exam,image)\n  {\n    return await API.post('/proctor/',{\"type\": \"snapshot\",\"exam\":exam,\"image\":image});\n  }\n\n\n  function ProcessImage(file,exam,snapid,setPopupShow,setPopupMsg) \n  {\n        AnonLog();\n        var image = null;\n        \n        var jpg = true;\n        try\n        {\n            image = atob(file.split(\"data:image/jpeg;base64,\")[1]);\n        }\n        catch (e)\n        {\n          jpg = false;\n        }\n        if (jpg == false)\n        {\n          try\n          {\n            image = atob(file.split(\"data:image/png;base64,\")[1]);\n          }\n          catch (e)\n          {\n            console.log(\"Not an image file Rekognition can process\");\n            return;\n          }\n        }\n        //unencode image bytes for Rekognition DetectFaces API\n        var length = image.length;\n        var imageBytes = new ArrayBuffer(length);\n        var ua = new Uint8Array(imageBytes);\n        for (var i = 0; i < length; i++)\n        {\n          ua[i] = image.charCodeAt(i);\n        }\n        //Call Rekognition\n        DetectFaces(imageBytes,exam,snapid,setPopupShow,setPopupMsg);\n  }\n  //----------------------------------------------------------------------------\n\n  //--------------------Provides anonymous log on to AWS services---------------\n  function AnonLog()\n  {\n    // Configure the credentials provider to use your identity pool\n    window.AWS.config.region = 'ap-south-1'; // Region\n    window.AWS.config.credentials = new window.AWS.CognitoIdentityCredentials(\n    {\n        IdentityPoolId: 'ap-south-1:948e3fb3-7805-4620-8c28-aafcfdebfbd5',\n    });\n    // Make the call to obtain credentials\n    window.AWS.config.credentials.get(function ()\n    {\n      // Credentials will be available when this function is called.\n      var accessKeyId = window.AWS.config.credentials.accessKeyId;\n      var secretAccessKey = window.AWS.config.credentials.secretAccessKey;\n      var sessionToken = window.AWS.config.credentials.sessionToken;\n    });\n  }\n  //----------------------------------------------------------------------------\n\n  //------------------Face Detection Logic--------------------------------------\n\n  function DetectFaces(imageData,exam,snapid,setPopupShow,setPopupMsg)\n  {\n    window.AWS.region = \"ap-south-1\";\n    var rekognition = new window.AWS.Rekognition();\n    var params = {\n      Image: {\n        Bytes: imageData\n      },\n      Attributes: [\n        'ALL',\n      ]\n    };\n\n    rekognition.detectFaces(params, function (err, data)\n    {\n      if (err) console.log(err, err.stack); // an error occurred\n      else\n      {\n        if(data.FaceDetails.length > 0)\n        {\n          data.FaceDetails.map( async (element) => \n          {\n            const agerange        = element.AgeRange.Low+'-'+element.AgeRange.High;\n            const beard           = element.Beard.Value;\n            const eyeglasses      = element.Eyeglasses.Value;\n            const eyesopen        = element.EyesOpen.Value;\n            const gender          = element.Gender.Value;\n            const mustache        = element.Mustache.Value;\n            const smile           = element.Smile.Value;\n            const sunglasses      = element.Sunglasses.Value;\n            const examid          = exam;\n\n            let res = await API.post('/proctorDetails/',{\"examid\":examid,\"snapid\":snapid,\"agerange\":agerange,\"beard\":beard,\"eyeglasses\":eyeglasses,\"eyesopen\":eyesopen,\"gender\":gender,\"mustache\":mustache,\"smile\":smile,\"sunglasses\":sunglasses});\n\n            console.log(res);\n          });\n\n          if(data.FaceDetails.length > 1)\n          {\n            //----------------------message for more than one person detection-------------\n            setPopupShow(true);\n            setPopupMsg('There are more than one persons sitting with you while taking examination. This  event will be recorded...');\n            //-----------------------------------------------------------------------------\n          }\n        }\n        else\n        {\n          //----------------------message for no person detection--------------------------\n          setPopupShow(true);\n          setPopupMsg('Either no person is taking examination or Camera of your device is not working or it might be intentionally blocked while taking examination. This event will be recorded...');\n          //-------------------------------------------------------------------------------\n        }\n      }\n    });\n  }\n\n  //----------------------------------------------------------------------------\n\n  export default WebCamCapture;","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Adminhome.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/ClearSession.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/ClearSessionUserInfo.js",[],"/home/pawan/Desktop/react-template-hooks/src/popup.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/ConfigureHeader.js",["421"],"import React, { useState, useContext } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport API from '../../../api';\nimport {LogoContext} from '../../../App';\nimport ClipLoader from \"react-spinners/ClipLoader\";\n\nfunction ConfigureHeader(props) \n{\n    const [headerData ,setHeaderData]   =   useState(false);\n    const [msg ,setMsg]                 =   useState('');\n    let [loading, setLoading]           =   useState(false);\n    const {logoVal, setLogoVal}         =   useContext(LogoContext);\n\n    return(\n        <>\n            <Formik\n            initialValues={{ orgName: \"\",file:\"\"}}\n            onSubmit={async (values,actions) =>\n            {\n                await configHeader(values.orgName,values.file,setHeaderData,setMsg,setLoading,setLogoVal);\n                actions.setSubmitting(false);\n                actions.resetForm({\n                        values: {\n                        orgName: '',\n                        file: ''\n                        },\n                });\n            }}\n            validationSchema={Yup.object().shape({\n                orgName:Yup.string()\n                .required(\"Organization Name is Required for Configuring Header Text.\"),\n                file:Yup.string()\n                .required(\"Uploading Organization Logo is Mandatory.\")\n            })}\n            >\n            {\n                props => \n                {\n                    const {\n                        values,\n                        touched,\n                        errors,\n                        handleChange,\n                        isSubmitting,\n                        handleBlur,\n                        handleSubmit,\n                        setFieldValue\n                    } = props;\n\n                    return (\n                        <div>\n                            <div className=\"container-fluid\">\n                                <h1 className=\"mt-4\">Configure Header</h1>\n                                <ol className=\"breadcrumb mb-4\">\n                                    <li className=\"breadcrumb-item active\">Configure Header</li>\n                                </ol>\n                                <div className=\"col-lg-12 animate__animated animate__lightSpeedInLeft animate_slower\">\n                                    \n                                    <Form className=\"col-lg-12 row\" onSubmit={handleSubmit}>\n                                        <Form.Group className=\"col-lg-6 row\">\n                                            <Form.Control \n                                                type=\"text\" \n                                                id=\"orgName\" \n                                                placeholder=\"Enter Organization Name\" \n                                                className=\"col-lg-12\"\n                                                value ={values.orgName}\n                                                onBlur={handleBlur}\n                                                onChange={handleChange}\n                                            />\n                                            {errors.orgName && touched.orgName && (\n                                                <div className=\"alert alert-info col-lg-12\">{errors.orgName}</div>\n                                            )}\n                                        </Form.Group>\n                                        <div className=\"col-lg-1\"></div>\n                                        \n                                        <Form.Group className=\"col-lg-5 row\">\n                                            <center>\n                                            <input \n                                                id=\"file\" \n                                                name=\"file\" \n                                                type=\"file\" \n                                                onChange={(event) => {\n                                                    setFieldValue(\"file\", event.currentTarget.files[0]);\n                                                }} \n                                                onBlur={handleBlur}\n                                                className=\"form-control\" \n                                            />\n                                            {errors.file && touched.file && (\n                                                <div className=\"alert alert-info col-lg-12\">{errors.file}</div>\n                                            )}\n                                            </center>\n                                        </Form.Group>\n                                        \n                                        <div className=\"col-lg-12\">\n                                            <center><Button variant=\"primary\" type=\"submit\" disabled={isSubmitting}>Submit</Button></center>\n                                        </div>\n                                    </Form>\n                                </div>\n                            </div>\n                        </div>\n                    );\n                }\n            }\n            </Formik>\n            <div className=\"col-lg-12\" style={{marginTop:\"20px\"}}>\n                {headerData && !loading ? \n                    <div className=\"alert alert-danger animate__animated animate__tada animate_slower\" role=\"alert\">\n                        {msg}\n                    </div>\n                : \n                    <div className=\"col-lg-12\" style={{position:\"absolute\",top:\"40%\",left:\"40%\"}}>\n                        <ClipLoader color={'#ff0000'} loading={loading} size={200} />\n                    </div>\n                }\n            </div>\n        </>\n    );\n}\n\nasync function configHeader(orgName,file,setHeaderData,setMsg,setLoading,setLogoVal)\n{\n    setLoading(true);\n    let fd = new FormData();\n    fd.append(\"type\", 'headerconfig');\n    fd.append(\"orgName\", orgName);\n    fd.append(\"file\", file);\n\n    const config = {\n        headers: {\n            'content-type': 'multipart/form-data'\n        }\n    }\n\n    await API.post('/configurations',fd,config)\n    .then(function (res) \n    {\n        if(res.data.status === 'success')\n        {\n            setHeaderData(true);\n            setMsg(res.data.message);\n            setLogoVal(Math.random());\n            setTimeout(() => {\n                setHeaderData(false);\n            }, 10000);\n        }\n        else\n        {\n            setMsg(res.data.message);\n            setHeaderData(true);\n        }\n        setLoading(false);\n    })\n    .catch(function (error) \n    {\n        setHeaderData(true);\n        setLoading(false);\n        setMsg(error.response.data.message);\n    });\n}\n\nexport default ConfigureHeader;","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/ConfigureFooter.js",["422"],"import React, { useState, useContext } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport API from '../../../api';\nimport {FooterContext} from '../../../App';\nimport ClipLoader from \"react-spinners/ClipLoader\";\n\nfunction ConfigureFooter(props) \n{\n    const [footerData ,setFooterData]   =   useState(false);\n    const [msg ,setMsg]                 =   useState('');\n    let [loading, setLoading]           =   useState(false);\n    const {footerVal, setFooterVal}     = useContext(FooterContext);\n    \n    return(\n        <>\n            <Formik\n            initialValues={{ orgName: \"\"}}\n            onSubmit={async (values,actions) =>\n            {\n                await updateFooterData(values.orgName,setFooterData,setMsg,setLoading,setFooterVal);\n                actions.setSubmitting(false);\n                actions.resetForm({\n                        values: {\n                        orgName: ''\n                        },\n                });\n            }}\n            validationSchema={Yup.object().shape({\n                orgName:Yup.string()\n                .required(\"Organization Name is Required for Configuring Footer Text.\")\n            })}\n            >\n            {\n                props => \n                {\n                    const {\n                        values,\n                        touched,\n                        errors,\n                        isSubmitting,\n                        handleChange,\n                        handleBlur,\n                        handleSubmit\n                    } = props;\n\n                    return (\n                        <div>\n                            <div className=\"container-fluid\">\n                                <h1 className=\"mt-4\">Configure Footer</h1>\n                                <ol className=\"breadcrumb mb-4\">\n                                    <li className=\"breadcrumb-item active\">Configure Footer</li>\n                                </ol>\n                                <div className=\"col-lg-12 animate__animated animate__lightSpeedInLeft animate_slower\">\n                                    <Form className=\"col-lg-12 row\" onSubmit={handleSubmit}>\n                                        <Form.Group className=\"col-lg-10 row\">\n                                            <Form.Control \n                                                type=\"text\" \n                                                id=\"orgName\" \n                                                placeholder=\"Enter Organization Name\" \n                                                className=\"col-lg-12\"\n                                                value ={values.orgName}\n                                                onBlur={handleBlur}\n                                                onChange={handleChange}\n                                            />\n                                            {errors.orgName && touched.orgName && (\n                                                <div className=\"alert alert-info col-lg-12\">{errors.orgName}</div>\n                                            )}\n                                        </Form.Group>\n                                        <div className=\"col-lg-2\">\n                                            <center><Button variant=\"primary\" type=\"submit\" disabled={isSubmitting}>Submit</Button></center>\n                                        </div>\n                                    </Form>\n                                </div>\n                            </div>\n                        </div>\n                    );\n                }\n            }\n            </Formik>\n            <div className=\"col-lg-12\" style={{marginTop:\"20px\"}}>\n                {footerData && !loading ? \n                <div className=\"alert alert-danger animate__animated animate__tada animate_slower\" role=\"alert\">\n                    {msg}\n                </div>\n                : \n                <div className=\"col-lg-12\" style={{position:\"absolute\",top:\"40%\",left:\"40%\"}}>\n                    <ClipLoader color={'#ff0000'} loading={loading} size={200} />\n                </div>\n                }\n            </div>\n        </>\n    );\n}\n\nasync function updateFooterData(orgName,setFooterData,setMsg,setLoading,setFooterVal)\n{\n    setLoading(true);\n    const res = await API.put('/configurations',{\"orgName\" : orgName,\"type\":\"footerconfig\"});\n    if(res.data.status === 'success')\n    {\n        setFooterData(true);\n        setFooterVal(Math.random());\n        setTimeout(() => {\n            setFooterData(false);\n        }, 10000);\n    }\n    else\n    {\n        setFooterData(false);\n        setFooterVal(Math.random());\n    }\n    setLoading(false);\n    setMsg(res.data.message);\n}\n\nexport default ConfigureFooter;","/home/pawan/Desktop/react-template-hooks/src/Components/Institute/InstHome.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Institute/InstReports.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Institute/Reports/InstExamReport.js",["423","424","425"],"/home/pawan/Desktop/react-template-hooks/src/Layout/MyContent.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Institute/Reports/InstExamStudtReport.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/AdminReports.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Reports/AdminExamReport.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Student/SearchBox.js",["426"],"import React from 'react';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\n\nfunction SearchBox(props)\n{\n    return (\n    <>  \n        <Formik\n            initialValues={{ searchSubject:\"\"}}\n            onSubmit={(values,{ setSubmitting }) =>\n            {\n                props.getExamData(props.setUserRequest,props.setLoading,values.searchSubject);\n            }}\n            validationSchema={Yup.object().shape({\n                searchSubject:Yup.string()\n                .required(\"Subject Name is Required...\")\n            })}\n            >\n            {\n                props => \n                {\n                    const {\n                        values,\n                        touched,\n                        errors,\n                        handleChange,\n                        handleBlur,\n                        handleSubmit\n                    } = props;\n\n                    return (\n                        <div className=\"col-lg-2\">\n                            <form onSubmit={handleSubmit}>\n                                <div className=\"input-group\">\n                                    <input \n                                        className=\"form-control\" \n                                        type=\"text\" \n                                        name=\"searchSubject\" \n                                        id=\"searchSubject\" \n                                        placeholder=\"Subjects...\"\n                                        value ={values.searchSubject}\n                                        onBlur={handleBlur}\n                                        onChange={handleChange}\n                                    />\n                                    <div className=\"input-group-append\">\n                                    <button type=\"button\" className=\"btn btn-primary\" type=\"submit\"><i className=\"fas fa-search\"></i></button>\n                                    </div>\n                                    {errors.searchSubject && touched.searchSubject && (\n                                        <div className=\"alert alert-info col-lg-12\">{errors.searchSubject}</div>\n                                    )}\n                                </div>\n                            </form>\n                        </div>\n                    );\n                }\n            }\n        </Formik>\n    </>\n    );\n}\n\nexport default SearchBox;","/home/pawan/Desktop/react-template-hooks/src/Components/Exam/NextButton.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Exam/EndPreviewButton.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/GlobalController.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/GlobalControllerForm.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/UploadGlobalController.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Gadmin/GadminHome.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Lists/UserList.js",["427"],"import React,{useState,useEffect,useContext} from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport API from '../../../api';\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport filterFactory, { textFilter } from 'react-bootstrap-table2-filter';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport {ShowContext} from '../../../App';\n\nconst UserList = (props) => \n{\n    const {setShow,setMsg}                          =   useContext(ShowContext);\n    let role                                        =   props.role;\n    let [loading, setLoading]                       =   useState(true);\n    let [userList, setUserList]                     =   useState([]);\n    const header                                    =   getHeader(userList);\n    const data                                      =   getData(userList,props.setMyList,props.myList,setShow,setMsg);\n    \n\n    const options = {\n        sizePerPageList: [\n            {\n                text: '5', value: 5\n            }, \n            {\n                text: '10', value: 10\n            }, \n            {\n                text: '50', value: 50\n            },\n            {\n                text: '500', value: 500\n            }, \n            {\n                text: '1000', value: 1000\n            }, \n            {\n                text: '10000', value: 10000\n            }\n        ]\n    };\n\n    useEffect(() => \n    {\n        getUsers(role,setUserList,setLoading);\n    },[props.myList,role]);\n\n    return (\n        userList.length > 0 && !loading ?\n        <div className=\"col-lg-12\" style={{overflow:\"auto\"}}>\n            <BootstrapTable keyField='srno' data={ data } columns={ header } filter={ filterFactory() } pagination={ paginationFactory(options) }/>\n        </div>\n        :   \n        <div className=\"col-lg-12\" style={{position:\"absolute\",top:\"40%\",left:\"50%\"}}>\n            <ClipLoader color={'#ff0000'} loading={loading} size={200} />\n        </div>\n    );\n};\n\nasync function getUsers(role,setUserList,setLoading)\n{\n    await API.get('/user', {params: {'role': role}})\n    .then(function (res) \n    {\n        setUserList(res.data.data);\n        setLoading(false);\n    })\n    .catch(function (error) \n    {\n        setUserList(undefined);\n        setLoading(false);\n    });   \n}\n\nfunction getHeader(userList)\n{\n    let myHeader = [\n        { text: 'Sr No', dataField: 'srno'},\n        { text: 'User Name', dataField: 'username',filter: textFilter()},\n        { text: 'Org', dataField: 'org',filter: textFilter()},\n        { text: 'Role', dataField: 'role',filter: textFilter()},\n        { text: 'Mobile', dataField: 'mobile',filter: textFilter()},\n        { text: 'Email', dataField: 'email',filter: textFilter()},\n        { text: 'Delete', dataField: 'delete'},\n    ];\n    return myHeader;\n}\n\nfunction getData(userList,setMyList,myList,setShow,setMsg)\n{\n    let myData = [];\n    let i = 1;\n\n    userList.map((data, index) => \n    {\n        myData.push({\n            srno                    : i++,\n            username                : data.username,\n            org                     : data.college_name,\n            role                    : data.role,\n            mobile                  : data.mobile,\n            email                   : data.email,\n            delete                  : <button className=\"btn btn-danger\" onClick={()=>{deleteRecord(data.uid,setMyList,myList,setShow,setMsg);}}>Delete</button>\n        });\n    })\n\n    return myData;\n}\n\nasync function deleteRecord(uid,setMyList,myList,setShow,setMsg)\n{\n    await API.delete('/user/'+uid)\n    .then(function (res) \n    {\n        if(res.data.status==='success')\n        {\n            setShow(true);\n            setMsg(res.data.message);\n            setMyList(!myList);\n            setTimeout(()=>{setShow(false)}, 10000);\n        }\n    })\n    .catch(function (error) \n    {\n        setShow(true);\n        setMsg(error.response.data.message);\n        setTimeout(()=>{setShow(false)}, 10000);\n    });\n}\n\nexport default UserList;","/home/pawan/Desktop/react-template-hooks/src/Components/Student/CountDownButton.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/ClusterController.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/ClusterControllerForm.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/UploadClusterController.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Cadmin/CadminHome.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Cadmin/AddInst.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Cadmin/AddInstForm.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Cadmin/UploadInst.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/InstClusterAlloc.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/InstList.js",["428"],"import React,{useEffect} from 'react';\nimport Insts from './Insts';\nimport API from '../../../api';\nimport {ItemTypes} from '../../../utils/Items';\nimport {useDrop} from 'react-dnd';\n\nconst InstList = (props) => {\n    let style                                   = {};\n\n    const [{isOver}, drop]                      = useDrop({\n        accept: ItemTypes.CARD,\n        drop(item, monitor) {\n            const didDrop = monitor.didDrop();\n            if (!didDrop)\n            {\n                let targetId = props.uid;\n                let sourceId = item.uid;\n                searchAndUpdate(sourceId,targetId,props.instList,props.setInstList);\n            } \n            else\n            {\n                return;\n            }\n        },\n        collect: monitor => ({\n            isOver: !! monitor.isOver(),\n        })\n    });\n\n    let instList                                = props.instList;\n    \n\n    if(isOver)\n    {\n        style = {backgroundColor:\"aqua\"};\n    }\n\n    return (\n        <div className=\"col-lg-12\" style={{overflow:\"auto\"}}>\n            <div className=\"card mb-4\">\n                <div className=\"card-header bg-warning\">\n                    <i className=\"fas fa-university mr-1\"></i>\n                    Institute List\n                </div>\n                <div className=\"card-body\" style={{height:\"350px\", ...style}} ref={drop}>\n                    {instList.map((institute,index) => {\n                        return institute.region === null ?\n                        <Insts key={institute.uid} id={institute.uid} username={institute.username} instName={institute.college_name} instList={props.instList} setInstList={props.setInstList}/>\n                        :null\n                    })}\n                </div>\n                <div className=\"card-footer\">\n                </div>\n            </div>\n        </div>\n    );\n};\n\nasync function searchAndUpdate(sourceId,targetId,instList,setInstList)\n{\n    let dummyInstList = [...instList];\n    for(let i = 0;i < dummyInstList.length;i++)\n    {\n        if(sourceId === dummyInstList[i].uid)\n        {\n            dummyInstList[i].region = targetId;\n        }\n    }\n    setInstList(dummyInstList);\n\n    await API.put('/user/'+sourceId, {'region':targetId})\n    .then(function (res) \n    {\n        console.log(res.data.data);\n    })\n    .catch(function (error) \n    {\n            \n    });\n}\n\n\nexport default InstList;","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/RbteList.js",["429"],"import React from 'react';\nimport Rbte from './Rbtes';\n\nconst RbteList = (props) => {\n    let clusterList                             = props.clusterList;\n    let instList                                = props.instList;\n    \n    return (\n        <>\n        {clusterList.map((rbte,index) => (\n        <div className=\"col-lg-3\" style={{overflow:\"auto\"}} key={rbte.uid}>\n            <Rbte username={rbte.username} uid={rbte.uid}  instList={props.instList} setInstList={props.setInstList}/>\n        </div>\n        ))}\n        </>\n    );\n};\n\nexport default RbteList;","/home/pawan/Desktop/react-template-hooks/src/utils/Items.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/Insts.js",["430"],"import React from 'react';\nimport {useDrag} from 'react-dnd';\nimport {ItemTypes} from '../../../utils/Items';\n\nconst Insts = (props) => {\n\n    const [{ isDragging }, drag] = useDrag({\n        item: {\n            type:ItemTypes.CARD,\n            uid:props.id,\n            instId:props.username,\n            instName:props.instName,\n        },\n        collect: monitor => ({\n            isDragging : !!monitor.isDragging()\n        }),\n    });\n\n    return (\n        <div className=\"alert alert-danger\" role=\"alert\"  ref={drag} style={{fontSize:\"10px\"}}>\n            ({props.username}) <b>{props.instName}</b>\n        </div>\n    );\n};\n\nexport default Insts;","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/Rbtes.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/GlobClusterAlloc.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/ClusterList.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/GlobList.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/Cluster.js",["431"],"import React from 'react';\nimport {useDrag} from 'react-dnd';\nimport {ItemTypes} from '../../../utils/Items';\n\nconst Cluster = (props) => {\n\n    const [{ isDragging }, drag] = useDrag({\n        item: {\n            type:ItemTypes.CARD,\n            uid:props.uid,\n            instId:props.username,\n        },\n        collect: monitor => ({\n            isDragging : !!monitor.isDragging()\n        }),\n    });\n    return (\n        <div className=\"alert alert-danger\" role=\"alert\"  ref={drag}>\n            {props.username} <b>({props.uid})</b>\n        </div>\n    );\n};\n\nexport default Cluster;","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/Glob.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/ProgramMaster.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/ProgramMasterForm.js",["432","433","434","435"],"import React, {useState,useEffect,useContext} from 'react';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport API from '../../../api';\nimport {ShowContext} from '../../../App';\nimport ClipLoader from \"react-spinners/ClipLoader\";\n\nconst ProgramMasterForm = (props) => {\n    const [myMsg, setMyMsg]         = useState('');\n    const [loading, setLoading]     = useState(false);\n    const myFlag                    = useFlag(setLoading);\n    const myInitialValues           = { progCode: '', progName: '', flag:myFlag , instId:''};\n    const {setShow,setMsg}          = useContext(ShowContext);\n    const [insts,setInsts]          = useState([]);\n    const [value, setValue]         = useState();\n\n    useEffect(() => {\n        if(myFlag !== undefined && myFlag !== 1)\n        {\n            getInsts(setInsts,setShow,setMsg);\n        }\n    },[myFlag,setShow,setMsg]);\n\n    return (\n        !loading && myFlag !== undefined ? <Formik \n        initialValues= {myInitialValues}\n        onSubmit= {async (values,actions) => \n        {\n            setMyMsg('');\n            registerProgram(values.progCode, values.progName,setLoading,setMyMsg,props.setMyList,props.myList,values.flag,values.instId);\n            actions.setSubmitting(false);\n            actions.resetForm({\n            values: {\n                        progCode: '', progName: '', flag:myFlag, instId:''\n                    },\n            });\n        }}\n        validationSchema = {Yup.object({\n            progCode: Yup.string()\n            .required(\"Program Code is Required\"),\n            progName: Yup.string()\n            .required(\"Program Name is Required.\"),\n            flag: Yup.number(),\n            instId: Yup.string().when('flag', {\n                is:0,\n                then: Yup.string().required(\"Inst ID is Required\")\n            })\n        })}\n        >\n        {\n            props => {\n                const {\n                    values,\n                    touched,\n                    errors,\n                    isSubmitting,\n                    handleChange,\n                    handleBlur,\n                    handleSubmit\n                } = props;\n                return (\n                <div className=\"col-xl-8\">\n                    <form id=\"form-Prog\" method=\"post\" className=\"form-horizontal\" onSubmit={handleSubmit}>\n                        <div className=\"card mb-4\">\n                            <div className=\"card-header\">\n                                <i className=\"fas fa-address-card mr-1\"/>\n                                Add Program Form\n                            </div>\n                            <div className=\"card-body\">\n                                    <div className=\"form-group\">\n                                        <div className=\"col-lg-12 row\">\n                                            <div className=\"col-lg-4\">\n                                                Enter Program Code\n                                            </div>\n                                            <div className=\"col-lg-8\">\n                                                <input type=\"text\" id=\"progCode\" name=\"progCode\" onChange={handleChange} value={values.progCode} onBlur={handleBlur} className=\"form-control\" placeholder=\"Enter Program Code...\" />\n\n                                                {errors.progCode ? <div className=\"alert alert-info\">{errors.progCode}</div> : null}\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div className=\"form-group\">\n                                        <div className=\"col-lg-12 row\">\n                                            <div className=\"col-lg-4\">\n                                                Enter Program Name\n                                            </div>\n                                            <div className=\"col-lg-8\">\n                                                <input type=\"text\" id=\"progName\" name=\"progName\" onChange={handleChange} value={values.progName} onBlur={handleBlur} className=\"form-control\" placeholder=\"Enter Program Name...\" />\n\n                                                {errors.progName ? <div className=\"alert alert-info\">{errors.progName}</div> : null}\n                                            </div>\n                                        </div>\n                                    </div>\n\n                                    {myFlag === 0 && insts.length > 0 && (\n                                    <div className=\"form-group\">\n                                        <div className=\"col-lg-12 row\">\n                                            <div className=\"col-lg-4\">\n                                                Enter Inst Id\n                                            </div>\n                                            <div className=\"col-lg-8\">\n                                            <select id=\"instId\" name=\"instId\" className=\"form-control\" onChange={handleChange} onBlur={handleBlur} value={values.instId}>\n                                                <option value=\"\">Select Institute</option>\n                                                {\n                                                insts.map(inst => \n                                                (\n                                                    <option key={inst.uid} value={inst.uid}>\n                                                    ({inst.username}) {inst.college_name}\n                                                    </option>\n                                                ))\n                                                }\n                                            </select>\n\n                                            {errors.instId ? <div className=\"alert alert-info\">{errors.instId}</div> : null}\n                                            </div>\n                                        </div>\n                                    </div>)}\n                            </div>\n                            <div className=\"card-footer\">\n                                <div className=\"form-group\">\n                                    <center>\n                                        <button type=\"submit\" className=\"btn btn-primary\" disabled={isSubmitting}>Submit</button>\n                                    </center>\n                                </div>\n                                \n                                {myMsg !== '' &&(\n                                    <div className=\"alert alert-dark animate__animated animate__tada animate_slower\">{myMsg}</div>)}\n\n                                {loading && (\n                                    <div className=\"col-lg-12\" style={{position:\"absolute\",top:\"40%\",left:\"40%\"}}>\n                                        <ClipLoader color={'#ff0000'} loading={loading} size={200} />\n                                    </div>)}\n                            </div>\n                        </div>\n                    </form>\n                </div>\n                );\n            }\n        }\n        </Formik>\n        :null\n    );\n};\n\nasync function registerProgram(progCode,progName,setLoading,setMyMsg,setMyList,myList,flag,instId)\n{\n    setLoading(true);\n    await API.post('/program', {'progCode': progCode,'progName': progName,'flag':flag,'instId':instId})\n    .then(function (res) \n    {\n        setLoading(false);\n        setMyMsg(res.data.message);\n        setMyList(!myList);\n        setTimeout(()=>{setMyMsg('')}, 10000);\n    })\n    .catch(function (error) \n    {\n        setLoading(false);\n        setMyMsg(error.response.data.message);\n        setTimeout(()=>{setMyMsg('')}, 10000);\n    });   \n}\n\nfunction useFlag(setLoading)\n{\n    const [flag, setFlag]   =    useState();\n\n    useEffect(() => {updateFlag();}, []);\n\n    async function updateFlag()\n    {\n        setLoading(true);\n        const res = await API.get('/settings',{params: {\"type\":\"login\"}});\n        if(res.data.status==='success')\n        {\n            setFlag(res.data.flag);\n            setLoading(false);\n        }\n    }\n\n    return flag;\n}\n\nasync function getInsts(setInsts,setShow,setMsg)\n{\n  await API.get('/user',{params: {\"role\":\"EADMIN\"}})\n  .then((res) => {\n    if(res.data.status === 'success')\n    {\n      setInsts(res.data.data);\n    }\n    else\n    {\n      setShow(true);\n      setMsg('Problem Fetching Data from Server');\n    }\n  });\n}\n\nexport default ProgramMasterForm;","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/UploadPrograms.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/ProgramList.js",["436"],"import React,{useState,useEffect,useContext} from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport API from '../../../api';\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport filterFactory, { textFilter } from 'react-bootstrap-table2-filter';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport {ShowContext} from '../../../App';\n\nconst ProgramList = (props) => \n{\n    const {setShow,setMsg}                          =   useContext(ShowContext);\n    let role                                        =   props.role;\n    let [loading, setLoading]                       =   useState(true);\n    let [programList, setProgramList]               =   useState([]);\n    const header                                    =   getHeader(programList);\n    const data                                      =   getData(programList,props.setMyList,props.myList,setShow,setMsg);\n    \n\n    const options = {\n        sizePerPageList: [\n            {\n                text: '5', value: 5\n            }, \n            {\n                text: '10', value: 10\n            }, \n            {\n                text: '50', value: 50\n            },\n            {\n                text: '500', value: 500\n            }, \n            {\n                text: '1000', value: 1000\n            }, \n            {\n                text: '10000', value: 10000\n            }\n        ]\n    };\n\n    useEffect(() => \n    {\n        getUsers(setProgramList,setLoading);\n    },[props.myList,role]);\n\n    return (\n        programList.length > 0 && !loading ?\n        <div className=\"col-lg-12\" style={{overflow:\"auto\"}}>\n            <BootstrapTable keyField='srno' data={ data } columns={ header } filter={ filterFactory() } pagination={ paginationFactory(options) }/>\n        </div>\n        :   \n        <div className=\"col-lg-12\" style={{position:\"absolute\",top:\"40%\",left:\"50%\"}}>\n            <ClipLoader color={'#ff0000'} loading={loading} size={200} />\n        </div>\n    );\n};\n\nasync function getUsers(setProgramList,setLoading)\n{\n    await API.get('/program',{params:{'type':'all'}})\n    .then(function (res) \n    {\n        setProgramList(res.data.data);\n        setLoading(false);\n    })\n    .catch(function (error) \n    {\n        setProgramList(undefined);\n        setLoading(false);\n    });   \n}\n\nfunction getHeader(programList)\n{\n    let myHeader = [\n        { text: 'Sr No', dataField: 'srno'},\n        { text: 'Program Code', dataField: 'programCode',filter: textFilter()},\n        { text: 'Program Name', dataField: 'programName',filter: textFilter()},\n        { text: 'Delete', dataField: 'delete'},\n    ];\n    return myHeader;\n}\n\nfunction getData(programList,setMyList,myList,setShow,setMsg)\n{\n    let myData = [];\n    let i = 1;\n\n    programList.map((data, index) => \n    {\n        myData.push({\n            srno                    : i++,\n            programCode             : data.program_code,\n            programName             : data.program_name,\n            delete                  : <button className=\"btn btn-danger\" onClick={()=>{deleteRecord(data.id,setMyList,myList,setShow,setMsg);}}>Delete</button>\n        });\n    })\n\n    return myData;\n}\n\nasync function deleteRecord(id,setMyList,myList,setShow,setMsg)\n{\n    await API.delete('/program/'+id)\n    .then(function (res) \n    {\n        if(res.data.status==='success')\n        {\n            setShow(true);\n            setMsg(res.data.message);\n            setMyList(!myList);\n            setTimeout(()=>{setShow(false)}, 10000);\n        }\n    })\n    .catch(function (error) \n    {\n        setShow(true);\n        setMsg(error.response.data.message);\n        setTimeout(()=>{setShow(false)}, 10000);\n    });\n}\n\nexport default ProgramList;","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/SubjectMaster.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/SubjectMasterForm.js",["437"],"import React, {useState,useEffect,useContext} from 'react';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport API from '../../../api';\nimport {ShowContext} from '../../../App';\nimport ClipLoader from \"react-spinners/ClipLoader\";\n\nconst SubjectMasterForm = (props) => {\n    const [myMsg, setMyMsg]         = useState('');\n    const [loading, setLoading]     = useState(false);\n    const myFlag                    = useFlag(setLoading);\n    const myInitialValues           = { paperCode: '', paperName: '', flag:myFlag , programId:'', instId:'',semester:''};\n    const {setShow,setMsg}          = useContext(ShowContext);\n    const [insts,setInsts]          = useState([]);\n    const [programs,setPrograms]    = useState([]);\n\n    useEffect(() => {\n        if(myFlag !== undefined && myFlag !== 1)\n        {\n            getInsts(setInsts,setShow,setMsg);\n        }\n        getPrograms(setPrograms,myFlag,setShow,setMsg);\n    },[myFlag,setShow,setMsg]);\n\n    return (\n        !loading && myFlag !== undefined ? <Formik \n        initialValues= {myInitialValues}\n        onSubmit= {async (values,actions) => \n        {\n            setMyMsg('');\n            saveSubject(values,setLoading,setShow,setMsg,setMyMsg,props.setMyList,props.myList);\n            actions.setSubmitting(false);\n            actions.resetForm({\n            values: {\n                        paperCode: '', paperName: '', flag:myFlag , programId:'', instId:'',semester:''\n                    },\n            });\n        }}\n        validationSchema = {Yup.object({\n            paperCode: Yup.string()\n            .required(\"Paper Code is Required\"),\n            paperName: Yup.string()\n            .required(\"Paper Name is Required.\"),\n            flag: Yup.number(),\n            programId: Yup.number()\n            .required(\"Program is Required\"),\n            instId: Yup.string().when('flag', {\n                is:0,\n                then: Yup.string().required(\"Inst ID is Required\")\n            }),\n            semester: Yup.number()\n            .required('Semester is Required'),\n        })}\n        >\n        {\n            props => {\n                const {\n                    values,\n                    errors,\n                    isSubmitting,\n                    handleChange,\n                    handleBlur,\n                    handleSubmit\n                } = props;\n                return (\n                <div className=\"col-xl-8\">\n                    <form id=\"form-Prog\" method=\"post\" className=\"form-horizontal\" onSubmit={handleSubmit}>\n                        <div className=\"card mb-4\">\n                            <div className=\"card-header\">\n                                <i className=\"fas fa-address-card mr-1\"/>\n                                Add Subject Form\n                            </div>\n                            <div className=\"card-body\">\n                                    <div className=\"form-group\">\n                                        <div className=\"col-lg-12 row\">\n                                            <div className=\"col-lg-4\">\n                                                Enter Paper Code\n                                            </div>\n                                            <div className=\"col-lg-8\">\n                                                <input type=\"text\" id=\"paperCode\" name=\"paperCode\" onChange={handleChange} value={values.paperCode} onBlur={handleBlur} className=\"form-control\" placeholder=\"Enter Paper Code...\" />\n\n                                                {errors.paperCode ? <div className=\"alert alert-info\">{errors.paperCode}</div> : null}\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div className=\"form-group\">\n                                        <div className=\"col-lg-12 row\">\n                                            <div className=\"col-lg-4\">\n                                                Enter Program Name\n                                            </div>\n                                            <div className=\"col-lg-8\">\n                                                <input type=\"text\" id=\"paperName\" name=\"paperName\" onChange={handleChange} value={values.paperName} onBlur={handleBlur} className=\"form-control\" placeholder=\"Enter Program Name...\" />\n\n                                                {errors.paperName ? <div className=\"alert alert-info\">{errors.paperName}</div> : null}\n                                            </div>\n                                        </div>\n                                    </div>\n\n                                    {myFlag === 0 && insts.length > 0 && (\n                                    <div className=\"form-group\">\n                                        <div className=\"col-lg-12 row\">\n                                            <div className=\"col-lg-4\">\n                                                Enter Inst Id\n                                            </div>\n                                            <div className=\"col-lg-8\">\n                                            <select id=\"instId\" name=\"instId\" className=\"form-control\" onChange={(e) => {\n                                                setLoading(true);\n                                                handleChange(e);\n                                                getPrograms1(setPrograms,e.target.value,setShow,setMsg);\n                                                setLoading(false);\n                                            }} onBlur={handleBlur} value={values.instId}>\n                                                <option value=\"\">Select Institute</option>\n                                                {\n                                                insts.map(inst => \n                                                (\n                                                    <option key={inst.uid} value={inst.uid}>\n                                                    ({inst.username}) {inst.college_name}\n                                                    </option>\n                                                ))\n                                                }\n                                            </select>\n\n                                            {errors.instId ? <div className=\"alert alert-info\">{errors.instId}</div> : null}\n                                            </div>\n                                        </div>\n                                    </div>)}\n\n                                    <div className=\"form-group\">\n                                        <div className=\"col-lg-12 row\">\n                                            <div className=\"col-lg-4\">\n                                                Select Program\n                                            </div>\n                                            <div className=\"col-lg-8\">\n                                            <select id=\"programId\" name=\"programId\" className=\"form-control\" onChange={handleChange} onBlur={handleBlur} value={values.programId}>\n                                                <option value=\"\">Select Program</option>\n                                                {\n                                                programs.map(program => \n                                                (\n                                                    <option key={program.id} value={program.id}>\n                                                    ({program.program_code}) {program.program_name}\n                                                    </option>\n                                                ))\n                                                }\n                                            </select>\n\n                                            {errors.programId ? <div className=\"alert alert-info\">{errors.programId}</div> : null}\n                                            </div>\n                                        </div>\n                                    </div>\n\n                                    <div className=\"form-group\">\n                                        <div className=\"col-lg-12 row\">\n                                            <div className=\"col-lg-4\">\n                                                Select Semester\n                                            </div>\n                                            <div className=\"col-lg-8\">\n                                            <select id=\"semester\" name=\"semester\" className=\"form-control\" onChange={handleChange} onBlur={handleBlur} value={values.semester}>\n                                                <option value=\"\">Select Semester</option>\n                                                <option value=\"1\">1</option>\n                                                <option value=\"2\">2</option>\n                                                <option value=\"3\">3</option>\n                                                <option value=\"4\">4</option>\n                                                <option value=\"5\">5</option>\n                                                <option value=\"6\">6</option>\n                                                <option value=\"7\">7</option>\n                                                <option value=\"8\">8</option>\n                                            </select>\n\n                                            {errors.semester ? <div className=\"alert alert-info\">{errors.semester}</div> : null}\n                                            </div>\n                                        </div>\n                                    </div>\n                            </div>\n                            <div className=\"card-footer\">\n                                <div className=\"form-group\">\n                                    <center>\n                                        <button type=\"submit\" className=\"btn btn-primary\" disabled={isSubmitting}>Submit</button>\n                                    </center>\n                                </div>\n                                \n                                {myMsg !== '' &&(\n                                    <div className=\"alert alert-dark animate__animated animate__tada animate_slower\">{myMsg}</div>)}\n\n                                {loading && (\n                                    <div className=\"col-lg-12\" style={{position:\"absolute\",top:\"40%\",left:\"40%\"}}>\n                                        <ClipLoader color={'#ff0000'} loading={loading} size={200} />\n                                    </div>)}\n                            </div>\n                        </div>\n                    </form>\n                </div>\n                );\n            }\n        }\n        </Formik>\n        :null\n    );\n};\n\nfunction useFlag(setLoading)\n{\n    const [flag, setFlag]   =    useState();\n\n    useEffect(() => {updateFlag();}, []);\n\n    async function updateFlag()\n    {\n        setLoading(true);\n        const res = await API.get('/settings',{params: {\"type\":\"login\"}});\n        if(res.data.status==='success')\n        {\n            setFlag(res.data.flag);\n            setLoading(false);\n        }\n    }\n\n    return flag;\n}\n\nasync function getInsts(setInsts,setShow,setMsg)\n{\n  await API.get('/user',{params: {\"role\":\"EADMIN\"}})\n  .then((res) => {\n    if(res.data.status === 'success')\n    {\n      setInsts(res.data.data);\n    }\n    else\n    {\n      setShow(true);\n      setMsg('Problem Fetching Data from Server');\n    }\n  });\n}\n\nasync function getPrograms(setPrograms,myFlag,setShow,setMsg)\n{\n    await API.get('/program',{params: {\"type\":\"all\"}})\n        .then((res) => \n        {\n            if(res.data.status === 'success')\n            {\n                setPrograms(res.data.data);\n            }\n            else\n            {\n                setShow(true);\n                setMsg('Problem Fetching Data from Server');\n            }\n        });\n}\n\nasync function getPrograms1(setPrograms,instUid,setShow,setMsg)\n{\n    await API.get('/program',{params: {\"type\":\"instUid\",\"instUid\":instUid}})\n        .then((res) => \n        {\n            if(res.data.status === 'success')\n            {\n                setPrograms(res.data.data);\n            }\n            else\n            {\n                setShow(true);\n                setMsg('Problem Fetching Data from Server');\n            }\n        });\n}\n\nasync function saveSubject(values,setLoading,setShow,setMsg,setMyMsg,setMyList,myList)\n{\n    setLoading(true);\n    let paperCode   = values.paperCode;\n    let paperName   = values.paperName;\n    let programId   = values.programId;\n    let instId      = values.instId;\n    let semester    = values.semester;\n\n    await API.post('/subject',{'paperCode':paperCode,'paperName':paperName,'programId':programId,'instId':instId,'semester':semester})\n        .then((res) => \n        {\n            if(res.data.status === 'success')\n            {\n                setMyMsg(res.data.message);\n                setLoading(false);\n                setMyList(!myList);\n            }\n            else\n            {\n                setMyMsg(res.data.message);\n                setLoading(false);\n            }\n        })\n        .catch(function (error) {\n            setMyMsg(error.response.data.message);\n            setLoading(false);\n        });\n\n}\n\nexport default SubjectMasterForm;","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/UploadSubjects.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/SubjectList.js",["438"],"import React,{useState,useEffect,useContext} from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport API from '../../../api';\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport filterFactory, { textFilter } from 'react-bootstrap-table2-filter';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport {ShowContext} from '../../../App';\nimport { Link } from 'react-router-dom';\n\nconst SubjectList = (props) => \n{\n    const {setShow,setMsg}                          =   useContext(ShowContext);\n    let [loading, setLoading]                       =   useState(true);\n    let [subjectList, setSubjectList]               =   useState([]);\n    const header                                    =   getHeader();\n    const data                                      =   getData(subjectList,props.setMyList,props.myList,setShow,setMsg);\n    \n\n    const options = {\n        sizePerPageList: [\n            {\n                text: '5', value: 5\n            }, \n            {\n                text: '10', value: 10\n            }, \n            {\n                text: '50', value: 50\n            },\n            {\n                text: '500', value: 500\n            }, \n            {\n                text: '1000', value: 1000\n            }, \n            {\n                text: '10000', value: 10000\n            }\n        ]\n    };\n\n    useEffect(() => \n    {\n        getSubjects(setSubjectList,setLoading);\n    },[props.myList]);\n\n    return (\n        subjectList.length > 0 && !loading ?\n        <div className=\"col-lg-12\" style={{overflow:\"auto\"}}>\n            <BootstrapTable keyField='srno' data={ data } columns={ header } filter={ filterFactory() } pagination={ paginationFactory(options) }/>\n        </div>\n        :   \n        <div className=\"col-lg-12\" style={{position:\"absolute\",top:\"40%\",left:\"50%\"}}>\n            <ClipLoader color={'#ff0000'} loading={loading} size={200} />\n        </div>\n    );\n};\n\nasync function getSubjects(setSubjectList,setLoading)\n{\n    await API.get('/subject',{params:{'type':'all'}})\n    .then(function (res) \n    {\n        setSubjectList(res.data.data);\n        console.log(res.data.data);\n        setLoading(false);\n    })\n    .catch(function (error) \n    {\n        setSubjectList(undefined);\n        setLoading(false);\n    });   \n}\n\nfunction getHeader()\n{\n    let myHeader = [\n        { text: 'Sr No', dataField: 'srno'},\n        { text: 'Paper Code', dataField: 'paperCode',filter: textFilter()},\n        { text: 'Paper Name', dataField: 'paperName',filter: textFilter()},\n        { text: 'Add Topic Data', dataField: 'topicData'},\n        { text: 'Delete', dataField: 'delete'},\n    ];\n    return myHeader;\n}\n\nfunction getData(subjectList,setMyList,myList,setShow,setMsg)\n{\n    let myData = [];\n    let i = 1;\n    subjectList.map((data, index) => \n    {\n        myData.push({\n            srno                    : i++,\n            paperCode               : data.paper_code,\n            paperName               : data.paper_name,\n            topicData               : <Link className=\"nav-link\" to={{pathname: \"/addTopic\",state:{paperId: data.id,paperCode:data.paper_code,paperName:data.paper_name}}}>Add Topics</Link>,\n            delete                  : <button className=\"btn btn-danger\" onClick={()=>{deleteRecord(data.id,setMyList,myList,setShow,setMsg);}}>Delete</button>\n        });\n    })\n\n    return myData;\n}\n\nasync function deleteRecord(id,setMyList,myList,setShow,setMsg)\n{\n    await API.delete('/subject/'+id)\n    .then(function (res) \n    {\n        if(res.data.status==='success')\n        {\n            setShow(true);\n            setMsg(res.data.message);\n            setMyList(!myList);\n            setTimeout(()=>{setShow(false)}, 10000);\n        }\n    })\n    .catch(function (error) \n    {\n        setShow(true);\n        setMsg(error.response.data.message);\n        setTimeout(()=>{setShow(false)}, 10000);\n    });\n}\n\nexport default SubjectList;","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/StudentMaster.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/StudentMasterForm.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/UploadStudents.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/StudentList.js",["439"],"import React,{useState,useEffect,useContext} from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport API from '../../../api';\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport filterFactory, { textFilter } from 'react-bootstrap-table2-filter';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport {ShowContext} from '../../../App';\n\nconst StudentList = (props) => \n{\n    const {setShow,setMsg}                          =   useContext(ShowContext);\n    let [loading, setLoading]                       =   useState(true);\n    let [studentList, setStudentList]               =   useState([]);\n    const header                                    =   getHeader();\n    const data                                      =   getData(studentList,props.setMyList,props.myList,setShow,setMsg);\n    \n\n    const options = {\n        sizePerPageList: [\n            {\n                text: '5', value: 5\n            }, \n            {\n                text: '10', value: 10\n            }, \n            {\n                text: '50', value: 50\n            },\n            {\n                text: '500', value: 500\n            }, \n            {\n                text: '1000', value: 1000\n            }, \n            {\n                text: '10000', value: 10000\n            }\n        ]\n    };\n\n    useEffect(() => \n    {\n        getStudents(setStudentList,setLoading);\n    },[props.myList]);\n\n    return (\n        studentList.length > 0 && !loading ?\n        <div className=\"col-lg-12\" style={{overflow:\"auto\"}}>\n            <BootstrapTable keyField='srno' data={ data } columns={ header } filter={ filterFactory() } pagination={ paginationFactory(options) }/>\n        </div>\n        :   \n        <div className=\"col-lg-12\" style={{position:\"absolute\",top:\"40%\",left:\"50%\"}}>\n            <ClipLoader color={'#ff0000'} loading={loading} size={200} />\n        </div>\n    );\n};\n\nasync function getStudents(setStudentList,setLoading)\n{\n    await API.get('/user', {params: {'role': 'STUDENT'}})\n    .then(function (res) \n    {\n        setStudentList(res.data.data);\n        console.log(res.data.data);\n        setLoading(false);\n    })\n    .catch(function (error) \n    {\n        setStudentList(undefined);\n        setLoading(false);\n    });   \n}\n\nfunction getHeader()\n{\n    let myHeader = [\n        { text: 'Sr No', dataField: 'srno'},\n        { text: 'Enrollment No', dataField: 'enrollno',filter: textFilter()},\n        { text: 'Student Name', dataField: 'studname',filter: textFilter()},\n        { text: 'Inst Id', dataField: 'instid',filter: textFilter()},\n        { text: 'Semester', dataField: 'semester',filter: textFilter()},\n        { text: 'Mobile No', dataField: 'mobile',filter: textFilter()},\n        { text: 'Email Address', dataField: 'email',filter: textFilter()},\n        { text: 'Delete', dataField: 'delete'},\n    ];\n    return myHeader;\n}\n\nfunction getData(studentList,setMyList,myList,setShow,setMsg)\n{\n    let myData = [];\n    let i = 1;\n    studentList.map((data, index) => \n    {\n        myData.push({\n            srno                    : i++,\n            enrollno                : data.username,\n            studname                : data.name,\n            instid                  : data.inst_id,\n            semester                : data.semester,\n            mobile                  : data.mobile,\n            email                   : data.email,\n            delete                  : <button className=\"btn btn-danger\" onClick={()=>{deleteRecord(data.uid,setMyList,myList,setShow,setMsg);}}>Delete</button>\n        });\n    })\n\n    return myData;\n}\n\nasync function deleteRecord(uid,setMyList,myList,setShow,setMsg)\n{\n    await API.delete('/user/'+uid)\n    .then(function (res) \n    {\n        if(res.data.status==='success')\n        {\n            setShow(true);\n            setMsg(res.data.message);\n            setMyList(!myList);\n            setTimeout(()=>{setShow(false)}, 10000);\n        }\n    })\n    .catch(function (error) \n    {\n        setShow(true);\n        setMsg(error.response.data.message);\n        setTimeout(()=>{setShow(false)}, 10000);\n    });\n}\n\nexport default StudentList;","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/StudSubjectAlloc.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/UploadStudentSubjectAlloc.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/StudentSubjectList.js",["440"],"import React,{useState,useEffect,useContext} from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport API from '../../../api';\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport filterFactory, { textFilter } from 'react-bootstrap-table2-filter';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport {ShowContext} from '../../../App';\n\nconst StudentSubjectList = (props) => \n{\n    const {setShow,setMsg}                          =   useContext(ShowContext);\n    let [loading, setLoading]                       =   useState(true);\n    let [studentList, setStudentList]               =   useState([]);\n    const header                                    =   getHeader();\n    const data                                      =   getData(studentList,props.setMyList,props.myList,setShow,setMsg);\n    \n\n    const options = {\n        sizePerPageList: [\n            {\n                text: '5', value: 5\n            }, \n            {\n                text: '10', value: 10\n            }, \n            {\n                text: '50', value: 50\n            },\n            {\n                text: '500', value: 500\n            }, \n            {\n                text: '1000', value: 1000\n            }, \n            {\n                text: '10000', value: 10000\n            }\n        ]\n    };\n\n    useEffect(() => \n    {\n        getStudentSubjects(setStudentList,setLoading);\n    },[props.myList]);\n\n    return (\n        studentList.length > 0 && !loading ?\n        <div className=\"col-lg-12\" style={{overflow:\"auto\"}}>\n            <BootstrapTable keyField='srno' data={ data } columns={ header } filter={ filterFactory() } pagination={ paginationFactory(options) }/>\n        </div>\n        :   \n        <div className=\"col-lg-12\" style={{position:\"absolute\",top:\"40%\",left:\"50%\"}}>\n            <ClipLoader color={'#ff0000'} loading={loading} size={200} />\n        </div>\n    );\n};\n\nasync function getStudentSubjects(setStudentList,setLoading)\n{\n    await API.get('/exam')\n    .then(function (res) \n    {\n        setStudentList(res.data.data);\n        console.log(res.data.data);\n        setLoading(false);\n    })\n    .catch(function (error) \n    {\n        setStudentList(undefined);\n        setLoading(false);\n    });   \n}\n\nfunction getHeader()\n{\n    let myHeader = [\n        { text: 'Sr No', dataField: 'srno'},\n        { text: 'Enrollment No', dataField: 'enrollno',filter: textFilter()},\n        { text: 'Student Name', dataField: 'studname',filter: textFilter()},\n        { text: 'Inst Id', dataField: 'instid',filter: textFilter()},\n        { text: 'Semester', dataField: 'semester',filter: textFilter()},\n        { text: 'Subject', dataField: 'subject',filter: textFilter()},\n        { text: 'Delete', dataField: 'delete'},\n    ];\n    return myHeader;\n}\n\nfunction getData(studentList,setMyList,myList,setShow,setMsg)\n{\n    let myData = [];\n    let i = 1;\n    studentList.map((data, index) => \n    {\n        myData.push({\n            srno                    : i++,\n            enrollno                : data.stdid.username,\n            studname                : data.stdid.name,\n            instid                  : data.stdid.inst_id,\n            semester                : data.stdid.semester,\n            subject                 : '('+data.paper.paper_code+') '+data.paper.paper_name,\n            delete                  : <button className=\"btn btn-danger\" onClick={()=>{deleteRecord(data.id,setMyList,myList,setShow,setMsg);}}>Delete</button>\n        });\n    })\n\n    return myData;\n}\n\nasync function deleteRecord(id,setMyList,myList,setShow,setMsg)\n{\n    await API.delete('/exam/'+id)\n    .then(function (res) \n    {\n        if(res.data.status==='success')\n        {\n            setShow(true);\n            setMsg(res.data.message);\n            setMyList(!myList);\n            setTimeout(()=>{setShow(false)}, 10000);\n        }\n    })\n    .catch(function (error) \n    {\n        setShow(true);\n        setMsg(error.response.data.message);\n        setTimeout(()=>{setShow(false)}, 10000);\n    });\n}\n\nexport default StudentSubjectList;","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/TestMaster.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/AddTopic.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/AddTopicForm.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/UploadTopics.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/TopicList.js",["441","442","443","444"],"import React,{useState,useEffect,useContext} from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport API from '../../../api';\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport filterFactory, { textFilter } from 'react-bootstrap-table2-filter';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport {ShowContext} from '../../../App';\nimport { Link } from 'react-router-dom';\n\nconst TopicList = (props) => \n{\n    const {setShow,setMsg}                          =   useContext(ShowContext);\n    let [loading, setLoading]                       =   useState(true);\n    let [topicList, setTopicList]                   =   useState([]);\n    const header                                    =   getHeader();\n    const data                                      =   getData(topicList,props.setMyList,props.myList,setShow,setMsg);\n    const paperId                                   = props.paperId;\n    const paperCode                                 = props.paperCode;\n    const paperName                                 = props.paperName;\n    \n\n    const options = {\n        sizePerPageList: [\n            {\n                text: '5', value: 5\n            }, \n            {\n                text: '10', value: 10\n            }, \n            {\n                text: '50', value: 50\n            },\n            {\n                text: '500', value: 500\n            }, \n            {\n                text: '1000', value: 1000\n            }, \n            {\n                text: '10000', value: 10000\n            }\n        ]\n    };\n\n    useEffect(() => \n    {\n        getTopics(setTopicList,setLoading,paperId);\n    },[props.myList,paperId]);\n\n    return (\n        topicList.length > 0 && !loading ?\n        <div className=\"col-lg-12\" style={{overflow:\"auto\"}}>\n            <BootstrapTable keyField='srno' data={ data } columns={ header } filter={ filterFactory() } pagination={ paginationFactory(options) }/>\n        </div>\n        :   \n        <div className=\"col-lg-12\" style={{position:\"absolute\",top:\"40%\",left:\"50%\"}}>\n            <ClipLoader color={'#ff0000'} loading={loading} size={200} />\n        </div>\n    );\n};\n\nasync function getTopics(setTopicList,setLoading,paperId)\n{\n    await API.get('/subject/topic',{params:{'type':'single','paperId':paperId}})\n    .then(function (res) \n    {\n        setTopicList(res.data.data);\n        console.log(res.data.data);\n        setLoading(false);\n    })\n    .catch(function (error) \n    {\n        setTopicList(undefined);\n        setLoading(false);\n    });   \n}\n\nfunction getHeader()\n{\n    let myHeader = [\n        { text: 'Sr No', dataField: 'srno'},\n        { text: 'Paper Code', dataField: 'paperCode',filter: textFilter()},\n        { text: 'Paper Name', dataField: 'paperName',filter: textFilter()},\n        { text: 'Topic', dataField: 'topic'},\n        { text: 'Sub Topic', dataField: 'subTopic'},\n        { text: 'Questions', dataField: 'questions'},\n        { text: 'Marks', dataField: 'marks'},\n        { text: 'Delete', dataField: 'delete'},\n    ];\n    return myHeader;\n}\n\nfunction getData(subjectList,setMyList,myList,setShow,setMsg)\n{\n    let myData = [];\n    let i = 1;\n    subjectList.map((data, index) => \n    {\n        myData.push({\n            srno                    : i++,\n            paperCode               : data.paper.paper_code,\n            paperName               : data.paper.paper_name,\n            topic                   : data.topic,\n            subTopic                : data.subtopic,\n            questions               : data.questions,\n            marks                   : data.marks,\n            delete                  : <button className=\"btn btn-danger\" onClick={()=>{deleteRecord(data.id,setMyList,myList,setShow,setMsg);}}>Delete</button>\n        });\n    })\n\n    return myData;\n}\n\nasync function deleteRecord(id,setMyList,myList,setShow,setMsg)\n{\n    await API.delete('/subject/topic/'+id)\n    .then(function (res) \n    {\n        if(res.data.status==='success')\n        {\n            setShow(true);\n            setMsg(res.data.message);\n            setMyList(!myList);\n            setTimeout(()=>{setShow(false)}, 10000);\n        }\n    })\n    .catch(function (error) \n    {\n        setShow(true);\n        setMsg(error.response.data.message);\n        setTimeout(()=>{setShow(false)}, 10000);\n    });\n}\n\nexport default TopicList;","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/TestMasterForm.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/UploadTests.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/TestList.js",["445"],"import React,{useState,useEffect,useContext} from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport API from '../../../api';\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport filterFactory, { textFilter } from 'react-bootstrap-table2-filter';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport {ShowContext} from '../../../App';\nimport Moment from 'react-moment';\nimport { Link } from 'react-router-dom';\n\nconst TestList = (props) => \n{\n    const {setShow,setMsg}                          =   useContext(ShowContext);\n    let [loading, setLoading]                       =   useState(true);\n    let [testList, setTestList]                     =   useState([]);\n    const header                                    =   getHeader();\n    const data                                      =   getData(testList,props.setMyList,props.myList,setShow,setMsg);\n    \n\n    const options = {\n        sizePerPageList: [\n            {\n                text: '5', value: 5\n            }, \n            {\n                text: '10', value: 10\n            }, \n            {\n                text: '50', value: 50\n            },\n            {\n                text: '500', value: 500\n            }, \n            {\n                text: '1000', value: 1000\n            }, \n            {\n                text: '10000', value: 10000\n            }\n        ]\n    };\n\n    useEffect(() => \n    {\n        getSubjects(setTestList,setLoading);\n    },[props.myList]);\n\n    return (\n        testList.length > 0 && !loading ?\n        <div className=\"col-lg-12\" style={{overflow:\"auto\"}}>\n            <BootstrapTable keyField='srno' data={ data } columns={ header } filter={ filterFactory() } pagination={ paginationFactory(options) }/>\n        </div>\n        :   \n        <div className=\"col-lg-12\" style={{position:\"absolute\",top:\"40%\",left:\"50%\"}}>\n            <ClipLoader color={'#ff0000'} loading={loading} size={200} />\n        </div>\n    );\n};\n\nasync function getSubjects(setTestList,setLoading)\n{\n    await API.get('/subject',{params:{'type':'all'}})\n    .then(function (res) \n    {\n        setTestList(res.data.data);\n        console.log(res.data.data);\n        setLoading(false);\n    })\n    .catch(function (error) \n    {\n        setTestList(undefined);\n        setLoading(false);\n    });   \n}\n\nfunction getHeader()\n{\n    let myHeader = [\n        { text: 'Sr No', dataField: 'srno'},\n        { text: 'Paper Code/Name', dataField: 'paperCode',filter: textFilter()},\n        { text: 'Marks', dataField: 'marks'},\n        { text: 'Questions', dataField: 'questions'},\n        { text: 'Duration', dataField: 'duration'},\n        { text: 'Start Date', dataField: 'startdate'},\n        { text: 'End Date', dataField: 'enddate'},\n        { text: 'Clear', dataField: 'clear'},\n        { text: 'Configure', dataField: 'configure'},\n    ];\n    return myHeader;\n}\n\nfunction getData(testList,setMyList,myList,setShow,setMsg)\n{\n    let myData = [];\n    let i = 1;\n    testList.map((data, index) => \n    {\n        myData.push({\n            srno                    : i++,\n            paperCode               : '('+data.paper_code+') '+data.paper_name,\n            marks                   : data.marks,\n            questions               : data.questions,\n            duration                : data.durations,\n            startdate               : data.from_date!=='' ? <Moment format=\"MMMM Do YYYY, H:mm:ss A\">{data.from_date}</Moment> : '',\n            enddate                 : data.to_date!=='' ?<Moment format=\"MMMM Do YYYY, H:mm:ss A\">{data.to_date}</Moment> : '',\n            clear                   : <button className=\"btn btn-danger\" onClick={()=>{clearRecord(data.id,setMyList,myList,setShow,setMsg);}}>Clear</button>,\n            configure                  : data.from_date!=='' ? <Link className=\"nav-link\" to={{pathname: \"/configureTest\",state:{paperId: data.id,paperCode:data.paper_code,paperName:data.paper_name,data:data}}}>Configure Test</Link> : ''\n        });\n    })\n\n    return myData;\n}\n\nasync function clearRecord(id,setMyList,myList,setShow,setMsg)\n{\n    await API.put('/subject/test/'+id,{'type':'clearTest'})\n    .then(function (res) \n    {\n        if(res.data.status==='success')\n        {\n            setShow(true);\n            setMsg(res.data.message);\n            setMyList(!myList);\n            setTimeout(()=>{setShow(false)}, 10000);\n        }\n    })\n    .catch(function (error) \n    {\n        setShow(true);\n        setMsg(error.response.data.message);\n        setTimeout(()=>{setShow(false)}, 10000);\n    });\n}\n\nexport default TestList;","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/ConfigureTest.js",["446","447"],"import React, {useState,useEffect} from 'react';\nimport { Formik } from 'formik';\nimport API from '../../../api';\nimport {ShowContext} from '../../../App';\nimport { Link } from 'react-router-dom';\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport { useHistory } from 'react-router-dom';\n\nconst ConfigureTest = (props) => {\n    const paperId           =   props.location.state.paperId;\n    const paperCode         =   props.location.state.paperCode;\n    const paperName         =   props.location.state.paperName;\n    let history             =   useHistory();\n    let subjectData         =   {...props.location.state.data};    \n\n    const [myMsg, setMyMsg]         = useState('');\n    const [loading, setLoading]     = useState(false);\n\n    const myInitialValues           = {'score_view':subjectData.score_view,'review_question':subjectData.review_question,'proctoring':subjectData.proctoring,'photo_capture':subjectData.photo_capture,'capture_interval':subjectData.capture_interval,'negative_marking':subjectData.negative_marking,'negative_marks':subjectData.negative_marks,'time_remaining_reminder':subjectData.time_remaining_reminder,'exam_switch_alerts':subjectData.exam_switch_alerts,'option_shuffle':subjectData.option_shuffle,'question_marks':subjectData.question_marks,'ph_time':subjectData.ph_time};\n\n    return (\n        !loading && subjectData ? <Formik \n        initialValues= {myInitialValues}\n        onSubmit= {async (values,actions) => \n        {\n            console.log(values);\n            //-----------------Save Values to Database--------------------------------------------\n            setMyMsg('');\n            saveExamConfig(values,setLoading,setMyMsg,paperId,props,history);\n            actions.setSubmitting(false);\n            //------------------------------------------------------------------------------------\n        }}\n        >\n        {\n            props => {\n                const {\n                    values,\n                    isSubmitting,\n                    handleChange,\n                    handleBlur,\n                    handleSubmit,\n                    setFieldValue,\n                } = props;\n                return (\n                    <div>\n                    <div className=\"container-fluid\">\n                        <h1 className=\"mt-4\">Configure Test</h1>\n                        <div className=\"breadcrumb mb-4 row\">\n                            <div className=\"col-lg-4\">\n                                <b>Paper Code: {paperCode}</b>\n                            </div>\n                            <div className=\"col-lg-4\">\n                                <b>Paper Name: {paperName}</b>\n                            </div>\n                            <div className=\"col-lg-4\">\n                                <Link to=\"addTest\" className=\"btn btn-danger btn-sm\" style={{float:'right'}}>Go Back</Link>\n                            </div>\n                        </div>\n                        <form id=\"form-config\" method=\"post\" className=\"form-horizontal\" onSubmit={handleSubmit}>\n                        <div className=\"row col-lg-12\">\n                            <div className=\"col-lg-12\">\n                            <table className=\"table table-bordered\" style={{width:\"100%\"}}>\n                                <thead>\n                                    <tr bgcolor=\"aqua\">\n                                        <th>Description</th>\n                                        <th>Action</th>\n                                        <th>Description</th>\n                                        <th>Action</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    <tr>\n                                        <td>\n                                        Allow Instant Score View\n                                        </td>\n                                        <td><center>\n                                            <label className=\"switch\">\n                                                <input type=\"checkbox\" name=\"score_view\" id=\"score_view\" onChange={() => setFieldValue(\"score_view\", !values.score_view ?true:false)} onBlur={handleBlur} checked={values.score_view ? true:false}/>\n                                                <span className=\"slider round\"></span>\n                                            </label></center>\n                                        </td>\n                                        <td>\n                                        Enable Review Questions to Candiate\n                                        </td>\n                                        <td><center>\n                                            <label className=\"switch\">\n                                                <input type=\"checkbox\" name=\"review_question\" id=\"review_question\" onChange={() => setFieldValue(\"review_question\", !values.review_question ?true:false)} onBlur={handleBlur}checked={values.review_question ? true:false}/>\n                                                <span className=\"slider round\"></span>\n                                            </label></center>\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                    <td>\n                                        Enable Candidate Photo Capture\n                                        </td>\n                                        <td><center>\n                                            <label className=\"switch\">\n                                                <input type=\"checkbox\" name=\"photo_capture\" id=\"photo_capture\" onChange={() => {\n                                                    setFieldValue(\"photo_capture\", !values.photo_capture ?true:false);\n                                            }} onBlur={handleBlur} checked={values.photo_capture ? true:false}/>\n                                                <span className=\"slider round\"></span>\n                                            </label></center>\n                                        </td>\n                                        <td>\n                                        Enter Capture Interval in Seconds\n                                        </td>\n                                        <td> <input type=\"text\" className=\"form-control\" id=\"capture_interval\" name=\"capture_interval\" onChange={handleChange} onBlur={handleBlur} value={values.photo_capture ? values.capture_interval:values.capture_interval=0} disabled={!values.photo_capture? true:false}/></td>                                       \n                                    </tr>\n                                    <tr>\n                                        <td>\n                                        Enable Proctoring\n                                        </td>\n                                        <td><center>\n                                            <label className=\"switch\">\n                                                <input type=\"checkbox\" name=\"proctoring\" id=\"proctoring\" onChange={() => setFieldValue(\"proctoring\", !values.proctoring ?true:false)} onBlur={handleBlur} checked={values.photo_capture? values.proctoring ? true:false:values.proctoring=false} disabled={!values.photo_capture? true:false}/>\n                                                <span className=\"slider round\"></span>\n                                            </label></center>\n                                        </td>\n                                        <td>\n                                        Enable Negative Marking\n                                        </td>\n                                        <td><center>\n                                            <label className=\"switch\">\n                                            <input type=\"checkbox\" name=\"negative_marking\" id=\"negative_marking\" onChange={() => setFieldValue(\"negative_marking\", !values.negative_marking ?true:false)} onBlur={handleBlur} checked={values.negative_marking ? true:false}/>\n                                            <span className=\"slider round\"></span>\n                                            </label></center>\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td>\n                                        Enter Negative Marks\n                                        </td>\n                                        <td> <input type=\"text\" className=\"form-control\" id=\"negative_marks\" name=\"negative_marks\" onChange={handleChange} onBlur={handleBlur} value={values.negative_marking ? values.negative_marks : values.negative_marks=0} disabled={!values.negative_marking? true:false}/></td>\n                                        <td>\n                                        Time Remaining Reminder\n                                        </td>\n                                        <td> <input type=\"text\" className=\"form-control\" id=\"time_remaining_reminder\" name=\"time_remaining_reminder\" value={values.time_remaining_reminder} onChange={handleChange} onBlur={handleBlur}/></td>\n                                    </tr>\n                                    <tr>\n                                        <td>\n                                        Exam Switch Alerts\n                                        </td>\n                                        <td> <input type=\"text\" className=\"form-control\" id=\"exam_switch_alerts\" name=\"exam_switch_alerts\" value={values.exam_switch_alerts} onChange={handleChange} onBlur={handleBlur} /></td>\n                                        <td>\n                                        Option Shuffle\n                                        </td>\n                                        <td><center>\n                                            <label className=\"switch\">\n                                                <input type=\"checkbox\" name=\"option_shuffle\" id=\"option_shuffle\" onChange={() => setFieldValue(\"option_shuffle\", !values.option_shuffle ?true:false)} onBlur={handleBlur} checked={values.option_shuffle ? true:false}/>\n                                                <span className=\"slider round\"></span>\n                                            </label></center>\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td>\n                                        Show Marks for question in examination\n                                        </td>\n                                        <td><center>\n                                            <label className=\"switch\">\n                                                <input type=\"checkbox\" name=\"question_marks\" id=\"question_marks\" onChange={() => setFieldValue(\"question_marks\", !values.question_marks ?true:false)} onBlur={handleBlur} checked={values.question_marks ? true:false}/>\n                                                <span className=\"slider round\"></span>\n                                            </label></center>\n                                        </td>\n                                        <td>\n                                        Enter Extra Time for Physically Handicap Students\n                                        </td>\n                                        <td> <input type=\"text\" className=\"form-control\" id=\"ph_time\" name=\"ph_time\" value={values.ph_time} onChange={handleChange} onBlur={handleBlur} /></td>\n                                    </tr>\n                                    <tr>\n                                        <td colSpan={4} bgcolor=\"aqua\">\n                                            <center>\n                                            <button type=\"submit\" className=\"btn btn-primary\" disabled={isSubmitting}>Submit</button>\n                                            </center>\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n\n                            {myMsg !== '' &&(\n                                <div className=\"alert alert-dark animate__animated animate__tada animate_slower\">{myMsg}</div>)}\n\n                            {loading && (\n                            <div className=\"col-lg-12\" style={{position:\"absolute\",top:\"40%\",left:\"40%\"}}>\n                                <ClipLoader color={'#ff0000'} loading={loading} size={200} />\n                            </div>)}\n\n                            </div>\n                        </div>\n                        </form>\n                    </div>\n                  </div>\n                );\n            }\n        }\n        </Formik>\n        :null\n    );\n};\n\nasync function saveExamConfig(values,setLoading,setMyMsg,paperId,props,history)\n{\n    setLoading(true);\n    await API.put('/subject/config/'+paperId, {'score_view':values.score_view,'review_question':values.review_question,'proctoring':values.proctoring,'photo_capture':values.photo_capture,'capture_interval':values.capture_interval,'negative_marking':values.negative_marking,'negative_marks':values.negative_marks,'time_remaining_reminder':values.time_remaining_reminder,'exam_switch_alerts':values.exam_switch_alerts,'option_shuffle':values.option_shuffle,'question_marks':values.question_marks,'ph_time':values.ph_time})\n    .then(function (res) \n    {\n        setMyMsg(res.data.message);\n        if(res.data.status === 'success')\n        {\n            props.location.state.data.score_view              =   values.score_view;\n            props.location.state.data.review_question         =   values.review_question;\n            props.location.state.data.proctoring              =   values.proctoring;\n            props.location.state.data.photo_capture           =   values.photo_capture;\n            props.location.state.data.capture_interval        =   values.capture_interval;\n            props.location.state.data.negative_marking        =   values.negative_marking;\n            props.location.state.data.negative_marks          =   values.negative_marks;\n            props.location.state.data.time_remaining_reminder =   values.time_remaining_reminder;\n            props.location.state.data.exam_switch_alerts      =   values.exam_switch_alerts;\n            props.location.state.data.option_shuffle          =   values.option_shuffle;\n            props.location.state.data.question_marks          =   values.question_marks;\n            props.location.state.data.ph_time                 =   values.ph_time;\n\n            let obj = { paperId: props.location.state.paperId,\n                        paperCode:props.location.state.paperCode,\n                        paperName:props.location.state.paperName,data:props.location.state.data};\n            history.replace('/configureTest',{...obj});\n        }\n        else\n        {\n            let obj = { paperId: props.location.state.paperId,\n                paperCode:props.location.state.paperCode,\n                paperName:props.location.state.paperName,data:props.location.state.data};\n            history.replace('/configureTest',{...obj});\n        }\n        setLoading(false);\n        setTimeout(()=>{setMyMsg('')}, 10000);\n    })\n    .catch(function (error) \n    {\n        setLoading(false);\n        setMyMsg(error.response.data.message);\n        setTimeout(()=>{setMyMsg('')}, 10000);\n    });   \n}\n\nexport default ConfigureTest;",{"ruleId":"448","replacedBy":"449"},{"ruleId":"450","replacedBy":"451"},{"ruleId":"452","severity":1,"message":"453","line":11,"column":21,"nodeType":"454","messageId":"455","endLine":11,"endColumn":31},{"ruleId":"452","severity":1,"message":"456","line":18,"column":10,"nodeType":"454","messageId":"455","endLine":18,"endColumn":18},{"ruleId":"457","severity":1,"message":"458","line":66,"column":17,"nodeType":"459","endLine":66,"endColumn":60},{"ruleId":"460","severity":1,"message":"461","line":101,"column":7,"nodeType":"462","endLine":101,"endColumn":16,"suggestions":"463"},{"ruleId":"452","severity":1,"message":"464","line":7,"column":25,"nodeType":"454","messageId":"455","endLine":7,"endColumn":39},{"ruleId":"457","severity":1,"message":"458","line":41,"column":25,"nodeType":"459","endLine":41,"endColumn":174},{"ruleId":"457","severity":1,"message":"458","line":79,"column":25,"nodeType":"459","endLine":79,"endColumn":170},{"ruleId":"457","severity":1,"message":"458","line":170,"column":29,"nodeType":"459","endLine":170,"endColumn":178},{"ruleId":"452","severity":1,"message":"465","line":7,"column":23,"nodeType":"454","messageId":"455","endLine":7,"endColumn":35},{"ruleId":"452","severity":1,"message":"466","line":9,"column":10,"nodeType":"454","messageId":"455","endLine":9,"endColumn":21},{"ruleId":"452","severity":1,"message":"466","line":16,"column":10,"nodeType":"454","messageId":"455","endLine":16,"endColumn":21},{"ruleId":"460","severity":1,"message":"467","line":205,"column":38,"nodeType":"462","endLine":205,"endColumn":40,"suggestions":"468"},{"ruleId":"460","severity":1,"message":"469","line":47,"column":6,"nodeType":"462","endLine":47,"endColumn":22,"suggestions":"470"},{"ruleId":"460","severity":1,"message":"471","line":57,"column":6,"nodeType":"462","endLine":57,"endColumn":16,"suggestions":"472"},{"ruleId":"460","severity":1,"message":"473","line":70,"column":6,"nodeType":"462","endLine":70,"endColumn":22,"suggestions":"474"},{"ruleId":"475","severity":1,"message":"476","line":197,"column":34,"nodeType":"477","messageId":"478","endLine":197,"endColumn":36},{"ruleId":"475","severity":1,"message":"476","line":214,"column":34,"nodeType":"477","messageId":"478","endLine":214,"endColumn":36},{"ruleId":"452","severity":1,"message":"464","line":13,"column":23,"nodeType":"454","messageId":"455","endLine":13,"endColumn":37},{"ruleId":"460","severity":1,"message":"479","line":38,"column":6,"nodeType":"462","endLine":38,"endColumn":22,"suggestions":"480"},{"ruleId":"452","severity":1,"message":"464","line":51,"column":23,"nodeType":"454","messageId":"455","endLine":51,"endColumn":37},{"ruleId":"452","severity":1,"message":"481","line":1,"column":25,"nodeType":"454","messageId":"455","endLine":1,"endColumn":34},{"ruleId":"452","severity":1,"message":"482","line":12,"column":9,"nodeType":"454","messageId":"455","endLine":12,"endColumn":23},{"ruleId":"452","severity":1,"message":"464","line":10,"column":25,"nodeType":"454","messageId":"455","endLine":10,"endColumn":39},{"ruleId":"452","severity":1,"message":"483","line":18,"column":12,"nodeType":"454","messageId":"455","endLine":18,"endColumn":18},{"ruleId":"452","severity":1,"message":"484","line":23,"column":11,"nodeType":"454","messageId":"455","endLine":23,"endColumn":18},{"ruleId":"460","severity":1,"message":"485","line":50,"column":9,"nodeType":"462","endLine":50,"endColumn":35,"suggestions":"486"},{"ruleId":"460","severity":1,"message":"487","line":80,"column":7,"nodeType":"462","endLine":80,"endColumn":72,"suggestions":"488"},{"ruleId":"489","severity":1,"message":"490","line":94,"column":60,"nodeType":"491","endLine":94,"endColumn":79},{"ruleId":"492","severity":1,"message":"493","line":94,"column":67,"nodeType":"454","endLine":94,"endColumn":78},{"ruleId":"494","severity":1,"message":"495","line":130,"column":17,"nodeType":"496","messageId":"497","endLine":130,"endColumn":19},{"ruleId":"452","severity":1,"message":"498","line":168,"column":11,"nodeType":"454","messageId":"455","endLine":168,"endColumn":22},{"ruleId":"452","severity":1,"message":"499","line":169,"column":11,"nodeType":"454","messageId":"455","endLine":169,"endColumn":26},{"ruleId":"452","severity":1,"message":"500","line":170,"column":11,"nodeType":"454","messageId":"455","endLine":170,"endColumn":23},{"ruleId":"452","severity":1,"message":"501","line":15,"column":12,"nodeType":"454","messageId":"455","endLine":15,"endColumn":19},{"ruleId":"452","severity":1,"message":"502","line":15,"column":12,"nodeType":"454","messageId":"455","endLine":15,"endColumn":21},{"ruleId":"460","severity":1,"message":"503","line":47,"column":7,"nodeType":"462","endLine":47,"endColumn":36,"suggestions":"504"},{"ruleId":"475","severity":1,"message":"476","line":92,"column":33,"nodeType":"477","messageId":"478","endLine":92,"endColumn":35},{"ruleId":"505","severity":1,"message":"506","line":146,"column":27,"nodeType":"477","messageId":"507","endLine":181,"endColumn":22},{"ruleId":"489","severity":1,"message":"490","line":47,"column":87,"nodeType":"491","endLine":47,"endColumn":100},{"ruleId":"475","severity":1,"message":"476","line":93,"column":32,"nodeType":"477","messageId":"478","endLine":93,"endColumn":34},{"ruleId":"452","severity":1,"message":"481","line":1,"column":15,"nodeType":"454","messageId":"455","endLine":1,"endColumn":24},{"ruleId":"452","severity":1,"message":"508","line":6,"column":9,"nodeType":"454","messageId":"455","endLine":6,"endColumn":17},{"ruleId":"452","severity":1,"message":"509","line":7,"column":14,"nodeType":"454","messageId":"455","endLine":7,"endColumn":24},{"ruleId":"452","severity":1,"message":"509","line":7,"column":14,"nodeType":"454","messageId":"455","endLine":7,"endColumn":24},{"ruleId":"452","severity":1,"message":"510","line":15,"column":12,"nodeType":"454","messageId":"455","endLine":15,"endColumn":17},{"ruleId":"452","severity":1,"message":"511","line":15,"column":19,"nodeType":"454","messageId":"455","endLine":15,"endColumn":27},{"ruleId":"452","severity":1,"message":"512","line":54,"column":21,"nodeType":"454","messageId":"455","endLine":54,"endColumn":28},{"ruleId":"460","severity":1,"message":"467","line":168,"column":38,"nodeType":"462","endLine":168,"endColumn":40,"suggestions":"513"},{"ruleId":"475","severity":1,"message":"476","line":90,"column":35,"nodeType":"477","messageId":"478","endLine":90,"endColumn":37},{"ruleId":"460","severity":1,"message":"467","line":204,"column":38,"nodeType":"462","endLine":204,"endColumn":40,"suggestions":"514"},{"ruleId":"475","severity":1,"message":"476","line":91,"column":35,"nodeType":"477","messageId":"478","endLine":91,"endColumn":37},{"ruleId":"475","severity":1,"message":"476","line":93,"column":35,"nodeType":"477","messageId":"478","endLine":93,"endColumn":37},{"ruleId":"475","severity":1,"message":"476","line":92,"column":35,"nodeType":"477","messageId":"478","endLine":92,"endColumn":37},{"ruleId":"452","severity":1,"message":"515","line":8,"column":10,"nodeType":"454","messageId":"455","endLine":8,"endColumn":14},{"ruleId":"452","severity":1,"message":"516","line":18,"column":11,"nodeType":"454","messageId":"455","endLine":18,"endColumn":20},{"ruleId":"452","severity":1,"message":"517","line":19,"column":11,"nodeType":"454","messageId":"455","endLine":19,"endColumn":20},{"ruleId":"475","severity":1,"message":"476","line":97,"column":35,"nodeType":"477","messageId":"478","endLine":97,"endColumn":37},{"ruleId":"475","severity":1,"message":"476","line":96,"column":32,"nodeType":"477","messageId":"478","endLine":96,"endColumn":34},{"ruleId":"452","severity":1,"message":"481","line":1,"column":25,"nodeType":"454","messageId":"455","endLine":1,"endColumn":34},{"ruleId":"452","severity":1,"message":"518","line":4,"column":9,"nodeType":"454","messageId":"455","endLine":4,"endColumn":20},"no-native-reassign",["519"],"no-negated-in-lhs",["520"],"no-unused-vars","'setLogoVal' is assigned a value but never used.","Identifier","unusedVar","'isLoaded' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getHeaderData'. Either include it or remove the dependency array.","ArrayExpression",["521"],"'setCurrentUser' is assigned a value but never used.","'setFooterVal' is assigned a value but never used.","'currentUser' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'updateFlag'. Either include it or remove the dependency array.",["522"],"React Hook useEffect has missing dependencies: 'history', 'setMsg', and 'setShow'. Either include them or remove the dependency array.",["523"],"React Hook useEffect has a missing dependency: 'questionIndex'. Either include it or remove the dependency array.",["524"],"React Hook useEffect has missing dependencies: 'history', 'props', 'setPopupMsg', and 'setPopupShow'. Either include them or remove the dependency array.",["525"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'location.state'. Either include it or remove the dependency array.",["526"],"'useEffect' is defined but never used.","'shuffleOptions' is assigned a value but never used.","'imgSrc' is assigned a value but never used.","'CapTime' is assigned a value but never used.","React Hook React.useCallback has missing dependencies: 'capture1', 'props.isProctored', 'setPopupMsg', and 'setPopupShow'. Either include them or remove the dependency array.",["527"],"React Hook useEffect has missing dependencies: 'CaptureTime' and 'currentUser'. Either include them or remove the dependency array.",["528"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","react/style-prop-object","Style prop value must be an object","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'accessKeyId' is assigned a value but never used.","'secretAccessKey' is assigned a value but never used.","'sessionToken' is assigned a value but never used.","'logoVal' is assigned a value but never used.","'footerVal' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array.",["529"],"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'totalSubjects', 'totalSubjects', 'allPapers', 'totalSubjects', 'totalSubjects', 'totalSubjects', 'totalSubjects', 'totalSubjects', 'totalSubjects', 'totalSubjects'.","unsafeRefs","'instList' is assigned a value but never used.","'isDragging' is assigned a value but never used.","'value' is assigned a value but never used.","'setValue' is assigned a value but never used.","'touched' is assigned a value but never used.",["530"],["531"],"'Link' is defined but never used.","'paperCode' is assigned a value but never used.","'paperName' is assigned a value but never used.","'ShowContext' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"532","fix":"533"},{"desc":"534","fix":"535"},{"desc":"536","fix":"537"},{"desc":"538","fix":"539"},{"desc":"540","fix":"541"},{"desc":"542","fix":"543"},{"desc":"544","fix":"545"},{"desc":"546","fix":"547"},{"desc":"548","fix":"549"},{"desc":"534","fix":"550"},{"desc":"534","fix":"551"},"Update the dependencies array to be: [getHeaderData, logoVal]",{"range":"552","text":"553"},"Update the dependencies array to be: [updateFlag]",{"range":"554","text":"555"},"Update the dependencies array to be: [history, props.location, setMsg, setShow]",{"range":"556","text":"557"},"Update the dependencies array to be: [myOption, questionIndex]",{"range":"558","text":"559"},"Update the dependencies array to be: [history, props, props.location, setPopupMsg, setPopupShow]",{"range":"560","text":"561"},"Update the dependencies array to be: [myExam, history, location.state]",{"range":"562","text":"563"},"Update the dependencies array to be: [capture1, exam, props.isProctored, setPopupShow, setPopupMsg]",{"range":"564","text":"565"},"Update the dependencies array to be: [history.location, capture, history, props, setPopupMsg, setPopupShow, CaptureTime, currentUser]",{"range":"566","text":"567"},"Update the dependencies array to be: [props, props.instId, setMsg, setShow]",{"range":"568","text":"569"},{"range":"570","text":"555"},{"range":"571","text":"555"},[3428,3437],"[getHeaderData, logoVal]",[9689,9691],"[updateFlag]",[1907,1923],"[history, props.location, setMsg, setShow]",[2085,2095],"[myOption, questionIndex]",[2516,2532],"[history, props, props.location, setPopupMsg, setPopupShow]",[958,974],"[myExam, history, location.state]",[1897,1923],"[capture1, exam, props.isProctored, setPopupShow, setPopupMsg]",[2914,2979],"[history.location, capture, history, props, setPopupMsg, setPopupShow, CaptureTime, currentUser]",[1584,1613],"[props, props.instId, setMsg, setShow]",[7850,7852],[10959,10961]]