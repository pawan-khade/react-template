[{"/home/pawan/Desktop/react-template-hooks/src/index.js":"1","/home/pawan/Desktop/react-template-hooks/src/App.js":"2","/home/pawan/Desktop/react-template-hooks/src/AlertDismissible.js":"3","/home/pawan/Desktop/react-template-hooks/src/api.js":"4","/home/pawan/Desktop/react-template-hooks/src/Layout/Header.js":"5","/home/pawan/Desktop/react-template-hooks/src/Layout/Content.js":"6","/home/pawan/Desktop/react-template-hooks/src/Layout/Sidebar.js":"7","/home/pawan/Desktop/react-template-hooks/src/Layout/Footer.js":"8","/home/pawan/Desktop/react-template-hooks/src/Components/LoginButton.js":"9","/home/pawan/Desktop/react-template-hooks/src/Components/Login.js":"10","/home/pawan/Desktop/react-template-hooks/src/Components/Startexam.js":"11","/home/pawan/Desktop/react-template-hooks/src/Components/Student/StudHome.js":"12","/home/pawan/Desktop/react-template-hooks/src/Components/Student/Instructions.js":"13","/home/pawan/Desktop/react-template-hooks/src/Components/Exam/MyTimer.js":"14","/home/pawan/Desktop/react-template-hooks/src/Components/Student/CountCard.js":"15","/home/pawan/Desktop/react-template-hooks/src/Components/Student/ExamCard.js":"16","/home/pawan/Desktop/react-template-hooks/src/Components/Exam/QuestionAnswer.js":"17","/home/pawan/Desktop/react-template-hooks/src/Components/Exam/QuestionButtons.js":"18","/home/pawan/Desktop/react-template-hooks/src/Components/Exam/NextSaveButton.js":"19","/home/pawan/Desktop/react-template-hooks/src/Components/Exam/EndExamButton.js":"20","/home/pawan/Desktop/react-template-hooks/src/Components/Exam/PreviousButton.js":"21","/home/pawan/Desktop/react-template-hooks/src/Components/Exam/OverallSummery.js":"22","/home/pawan/Desktop/react-template-hooks/src/Components/Exam/ReviewLater.js":"23","/home/pawan/Desktop/react-template-hooks/src/Components/Exam/Options.js":"24","/home/pawan/Desktop/react-template-hooks/src/Components/Exam/WebCamCapture.js":"25","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Adminhome.js":"26","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/ClearSession.js":"27","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/ClearSessionUserInfo.js":"28","/home/pawan/Desktop/react-template-hooks/src/popup.js":"29","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/ConfigureHeader.js":"30","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/ConfigureFooter.js":"31","/home/pawan/Desktop/react-template-hooks/src/Components/Institute/InstHome.js":"32","/home/pawan/Desktop/react-template-hooks/src/Components/Institute/InstReports.js":"33","/home/pawan/Desktop/react-template-hooks/src/Components/Institute/Reports/InstExamReport.js":"34","/home/pawan/Desktop/react-template-hooks/src/Layout/MyContent.js":"35","/home/pawan/Desktop/react-template-hooks/src/Components/Institute/Reports/InstExamStudtReport.js":"36","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/AdminReports.js":"37","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Reports/AdminExamReport.js":"38","/home/pawan/Desktop/react-template-hooks/src/Components/Student/SearchBox.js":"39","/home/pawan/Desktop/react-template-hooks/src/Components/Exam/NextButton.js":"40","/home/pawan/Desktop/react-template-hooks/src/Components/Exam/EndPreviewButton.js":"41","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/GlobalController.js":"42","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/GlobalControllerForm.js":"43","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/UploadGlobalController.js":"44","/home/pawan/Desktop/react-template-hooks/src/Components/Gadmin/GadminHome.js":"45","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Lists/UserList.js":"46","/home/pawan/Desktop/react-template-hooks/src/Components/Student/CountDownButton.js":"47","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/ClusterController.js":"48","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/ClusterControllerForm.js":"49","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/UploadClusterController.js":"50","/home/pawan/Desktop/react-template-hooks/src/Components/Cadmin/CadminHome.js":"51","/home/pawan/Desktop/react-template-hooks/src/Components/Cadmin/AddInst.js":"52","/home/pawan/Desktop/react-template-hooks/src/Components/Cadmin/AddInstForm.js":"53","/home/pawan/Desktop/react-template-hooks/src/Components/Cadmin/UploadInst.js":"54","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/InstClusterAlloc.js":"55","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/InstList.js":"56","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/RbteList.js":"57","/home/pawan/Desktop/react-template-hooks/src/utils/Items.js":"58","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/Insts.js":"59","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/Rbtes.js":"60","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/GlobClusterAlloc.js":"61","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/ClusterList.js":"62","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/GlobList.js":"63","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/Cluster.js":"64","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/Glob.js":"65","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/ProgramMaster.js":"66","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/ProgramMasterForm.js":"67","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/UploadPrograms.js":"68","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/ProgramList.js":"69","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/SubjectMaster.js":"70","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/SubjectMasterForm.js":"71","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/UploadSubjects.js":"72","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/SubjectList.js":"73","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/StudentMaster.js":"74","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/StudentMasterForm.js":"75","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/UploadStudents.js":"76","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/StudentList.js":"77","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/StudSubjectAlloc.js":"78","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/UploadStudentSubjectAlloc.js":"79","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/StudentSubjectList.js":"80","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/TestMaster.js":"81","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/AddTopic.js":"82","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/AddTopicForm.js":"83","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/UploadTopics.js":"84","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/TopicList.js":"85","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/TestMasterForm.js":"86","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/UploadTests.js":"87","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/TestList.js":"88","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/ConfigureTest.js":"89","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/InstProgramAllocation.js":"90","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/UploadInstProgramAlloc.js":"91","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/InstProgramList.js":"92","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Reports/examQuestionSpecificationReport.js":"93","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Reports/examQuestionSpecificationMatchReport.js":"94"},{"size":199,"mtime":1610375291000,"results":"95","hashOfConfig":"96"},{"size":3915,"mtime":1613119658000,"results":"97","hashOfConfig":"96"},{"size":501,"mtime":1613543354000,"results":"98","hashOfConfig":"96"},{"size":143,"mtime":1615643331166,"results":"99","hashOfConfig":"96"},{"size":4362,"mtime":1615788208600,"results":"100","hashOfConfig":"96"},{"size":5882,"mtime":1615787632625,"results":"101","hashOfConfig":"96"},{"size":12032,"mtime":1614842363000,"results":"102","hashOfConfig":"96"},{"size":1328,"mtime":1613120102000,"results":"103","hashOfConfig":"96"},{"size":1068,"mtime":1611394431000,"results":"104","hashOfConfig":"96"},{"size":9892,"mtime":1615625883395,"results":"105","hashOfConfig":"96"},{"size":9220,"mtime":1615788766202,"results":"106","hashOfConfig":"96"},{"size":8163,"mtime":1615723822817,"results":"107","hashOfConfig":"96"},{"size":8618,"mtime":1615645388392,"results":"108","hashOfConfig":"96"},{"size":3410,"mtime":1615717726583,"results":"109","hashOfConfig":"96"},{"size":404,"mtime":1615724108384,"results":"110","hashOfConfig":"96"},{"size":7558,"mtime":1615178723000,"results":"111","hashOfConfig":"96"},{"size":3198,"mtime":1615785245605,"results":"112","hashOfConfig":"96"},{"size":2781,"mtime":1615627579124,"results":"113","hashOfConfig":"96"},{"size":9179,"mtime":1615717309312,"results":"114","hashOfConfig":"96"},{"size":3214,"mtime":1615717319436,"results":"115","hashOfConfig":"96"},{"size":2017,"mtime":1615788815322,"results":"116","hashOfConfig":"96"},{"size":3242,"mtime":1615725230466,"results":"117","hashOfConfig":"96"},{"size":4067,"mtime":1615717200794,"results":"118","hashOfConfig":"96"},{"size":2189,"mtime":1615729472734,"results":"119","hashOfConfig":"96"},{"size":8169,"mtime":1614669383000,"results":"120","hashOfConfig":"96"},{"size":454,"mtime":1611323235000,"results":"121","hashOfConfig":"96"},{"size":6452,"mtime":1615631371291,"results":"122","hashOfConfig":"96"},{"size":5090,"mtime":1615631466823,"results":"123","hashOfConfig":"96"},{"size":951,"mtime":1611738624000,"results":"124","hashOfConfig":"96"},{"size":7423,"mtime":1615631603651,"results":"125","hashOfConfig":"96"},{"size":5457,"mtime":1615442391032,"results":"126","hashOfConfig":"96"},{"size":459,"mtime":1611559269000,"results":"127","hashOfConfig":"96"},{"size":1248,"mtime":1613545940000,"results":"128","hashOfConfig":"96"},{"size":6174,"mtime":1615630390791,"results":"129","hashOfConfig":"96"},{"size":7927,"mtime":1610102374000,"results":"130","hashOfConfig":"96"},{"size":5831,"mtime":1615613405533,"results":"131","hashOfConfig":"96"},{"size":1849,"mtime":1615613545548,"results":"132","hashOfConfig":"96"},{"size":1883,"mtime":1615557198479,"results":"133","hashOfConfig":"96"},{"size":2392,"mtime":1612176576000,"results":"134","hashOfConfig":"96"},{"size":2113,"mtime":1615788895015,"results":"135","hashOfConfig":"96"},{"size":429,"mtime":1615718703816,"results":"136","hashOfConfig":"96"},{"size":979,"mtime":1615188855000,"results":"137","hashOfConfig":"96"},{"size":8866,"mtime":1615629776684,"results":"138","hashOfConfig":"96"},{"size":4189,"mtime":1615629793267,"results":"139","hashOfConfig":"96"},{"size":527,"mtime":1613646466000,"results":"140","hashOfConfig":"96"},{"size":3795,"mtime":1615719128639,"results":"141","hashOfConfig":"96"},{"size":996,"mtime":1613736409000,"results":"142","hashOfConfig":"96"},{"size":1034,"mtime":1615188815000,"results":"143","hashOfConfig":"96"},{"size":8873,"mtime":1615629771163,"results":"144","hashOfConfig":"96"},{"size":4111,"mtime":1615629786070,"results":"145","hashOfConfig":"96"},{"size":529,"mtime":1613797564000,"results":"146","hashOfConfig":"96"},{"size":944,"mtime":1615189018000,"results":"147","hashOfConfig":"96"},{"size":8736,"mtime":1615630298706,"results":"148","hashOfConfig":"96"},{"size":4134,"mtime":1615630322582,"results":"149","hashOfConfig":"96"},{"size":1951,"mtime":1615188877000,"results":"150","hashOfConfig":"96"},{"size":2395,"mtime":1613995224000,"results":"151","hashOfConfig":"96"},{"size":562,"mtime":1613994918000,"results":"152","hashOfConfig":"96"},{"size":49,"mtime":1613968228000,"results":"153","hashOfConfig":"96"},{"size":653,"mtime":1613994290000,"results":"154","hashOfConfig":"96"},{"size":2340,"mtime":1614060115000,"results":"155","hashOfConfig":"96"},{"size":2000,"mtime":1615188867000,"results":"156","hashOfConfig":"96"},{"size":2250,"mtime":1614059965000,"results":"157","hashOfConfig":"96"},{"size":513,"mtime":1614059139000,"results":"158","hashOfConfig":"96"},{"size":589,"mtime":1614846019000,"results":"159","hashOfConfig":"96"},{"size":2269,"mtime":1614059872000,"results":"160","hashOfConfig":"96"},{"size":979,"mtime":1615188742000,"results":"161","hashOfConfig":"96"},{"size":8283,"mtime":1615629968578,"results":"162","hashOfConfig":"96"},{"size":4030,"mtime":1615718942475,"results":"163","hashOfConfig":"96"},{"size":3498,"mtime":1615718981795,"results":"164","hashOfConfig":"96"},{"size":953,"mtime":1615188774000,"results":"165","hashOfConfig":"96"},{"size":13195,"mtime":1615629950434,"results":"166","hashOfConfig":"96"},{"size":4030,"mtime":1615630126253,"results":"167","hashOfConfig":"96"},{"size":3722,"mtime":1615719014331,"results":"168","hashOfConfig":"96"},{"size":978,"mtime":1615188754000,"results":"169","hashOfConfig":"96"},{"size":15169,"mtime":1615629960240,"results":"170","hashOfConfig":"96"},{"size":4061,"mtime":1615630087217,"results":"171","hashOfConfig":"96"},{"size":3927,"mtime":1615718991991,"results":"172","hashOfConfig":"96"},{"size":904,"mtime":1615188763000,"results":"173","hashOfConfig":"96"},{"size":4123,"mtime":1615630108225,"results":"174","hashOfConfig":"96"},{"size":3966,"mtime":1615719005223,"results":"175","hashOfConfig":"96"},{"size":916,"mtime":1615188786000,"results":"176","hashOfConfig":"96"},{"size":4086,"mtime":1615188654000,"results":"177","hashOfConfig":"96"},{"size":10148,"mtime":1615630009716,"results":"178","hashOfConfig":"96"},{"size":4031,"mtime":1615630163380,"results":"179","hashOfConfig":"96"},{"size":4139,"mtime":1615719052171,"results":"180","hashOfConfig":"96"},{"size":12251,"mtime":1615629925631,"results":"181","hashOfConfig":"96"},{"size":4115,"mtime":1615630142124,"results":"182","hashOfConfig":"96"},{"size":4365,"mtime":1615719033155,"results":"183","hashOfConfig":"96"},{"size":16784,"mtime":1615188716000,"results":"184","hashOfConfig":"96"},{"size":902,"mtime":1615188887000,"results":"185","hashOfConfig":"96"},{"size":4168,"mtime":1615629799228,"results":"186","hashOfConfig":"96"},{"size":4008,"mtime":1614848938000,"results":"187","hashOfConfig":"96"},{"size":3459,"mtime":1615613508800,"results":"188","hashOfConfig":"96"},{"size":3487,"mtime":1615613729853,"results":"189","hashOfConfig":"96"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},"1iupvn5",{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"203","messages":"204","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"192"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"192"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"192"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"192"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"217","messages":"218","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"192"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"192"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"192"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"192"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"192"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"192"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"192"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"192"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281","usedDeprecatedRules":"192"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"296","usedDeprecatedRules":"192"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"317","usedDeprecatedRules":"192"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"320","usedDeprecatedRules":"192"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"325","usedDeprecatedRules":"192"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"336","usedDeprecatedRules":"192"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"343","usedDeprecatedRules":"192"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"348","usedDeprecatedRules":"192"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"353","usedDeprecatedRules":"192"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"358","usedDeprecatedRules":"192"},{"filePath":"359","messages":"360","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"361","messages":"362","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"367","usedDeprecatedRules":"192"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"374","usedDeprecatedRules":"192"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"377","messages":"378","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"383","messages":"384","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"385","usedDeprecatedRules":"192"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"388","messages":"389","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"390","messages":"391","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"392","usedDeprecatedRules":"192"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"395","usedDeprecatedRules":"192"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"398","messages":"399","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"400","messages":"401","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"402","usedDeprecatedRules":"192"},{"filePath":"403","messages":"404","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"405","usedDeprecatedRules":"192"},{"filePath":"406","messages":"407","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"408","usedDeprecatedRules":"192"},"/home/pawan/Desktop/react-template-hooks/src/index.js",[],["409","410"],"/home/pawan/Desktop/react-template-hooks/src/App.js",[],"/home/pawan/Desktop/react-template-hooks/src/AlertDismissible.js",[],"/home/pawan/Desktop/react-template-hooks/src/api.js",[],"/home/pawan/Desktop/react-template-hooks/src/Layout/Header.js",["411","412","413","414","415"],"/home/pawan/Desktop/react-template-hooks/src/Layout/Content.js",[],"/home/pawan/Desktop/react-template-hooks/src/Layout/Sidebar.js",["416","417","418","419"],"import React, { useContext } from 'react';\nimport {UserContext} from '../App';\nimport { Link } from 'react-router-dom';\n\nfunction Sidebar() \n{\n    const {currentUser, setCurrentUser}   = useContext(UserContext);\n\n    if(currentUser && currentUser.role === 'STUDENT')\n    {\n        return (\n                <nav className=\"sb-sidenav accordion sb-sidenav-dark\" id=\"sidenavAccordion\" >\n                    <div className=\"sb-sidenav-menu\">\n                        <div className=\"nav\">\n                            <div className=\"sb-sidenav-menu-heading\">Main Menu</div>\n                            <Link className=\"nav-link\" to={{pathname: \"/studenthome\"}}>\n                                <div className=\"sb-nav-link-icon\"><i className=\"fas fa-tachometer-alt\"></i></div>\n                                Home\n                            </Link>\n                        </div>\n                    </div>\n                </nav>\n        );\n    }\n    else if(currentUser && currentUser.role === 'ADMIN')\n    {\n        return (\n            <nav className=\"sb-sidenav accordion sb-sidenav-dark\" id=\"sidenavAccordion\" >\n                <div className=\"sb-sidenav-menu\">\n                    <div className=\"nav\">\n                        <div className=\"sb-sidenav-menu-heading\">Main Menu</div>\n                        <Link  className=\"nav-link\" to={{pathname: \"/adminhome\"}}>\n                            <div className=\"sb-nav-link-icon\"><i className=\"fas fa-tachometer-alt\"></i></div>\n                            Home\n                        </Link>\n                        <Link  className=\"nav-link\" to={{pathname: \"/clearsession\"}}>\n                            <div className=\"sb-nav-link-icon\"><i className=\"fas fa-address-card\"></i></div>\n                            Clear Session\n                        </Link>\n\n                        <a className=\"nav-link collapsed\" data-toggle=\"collapse\" data-target=\"#collapseConfigurations\" aria-expanded=\"false\" aria-controls=\"collapseLayouts\">\n                            <div className=\"sb-nav-link-icon\"><i className=\"fas fa-cogs\"></i></div>\n                                General Configurations\n                            <div className=\"sb-sidenav-collapse-arrow\"><i className=\"fas fa-angle-down\"></i></div>\n                        </a>\n                        <div className=\"collapse\" id=\"collapseConfigurations\" aria-labelledby=\"headingOne\" data-parent=\"#sidenavAccordion\">\n                            <nav className=\"sb-sidenav-menu-nested nav\">\n                                <Link className=\"nav-link\" to={{pathname: \"/configHeader\"}}>\n                                    <div className=\"sb-nav-link-icon\"><i className=\"fas fa-tools\"></i></div>\n                                    Configure Header\n                                </Link>\n                                <Link className=\"nav-link\" to={{pathname: \"/configFooter\"}}>\n                                    <div className=\"sb-nav-link-icon\"><i className=\"fas fa-tools\"></i></div>\n                                    Configure Footer\n                                </Link>\n                                <Link className=\"nav-link\" to={{pathname: \"/addGlobController\"}}>\n                                    <div className=\"sb-nav-link-icon\"><i className=\"fas fa-tools\"></i></div>\n                                    Add Global Controller\n                                </Link>\n                                <Link className=\"nav-link\" to={{pathname: \"/addClusterController\"}}>\n                                    <div className=\"sb-nav-link-icon\"><i className=\"fas fa-tools\"></i></div>\n                                    Add Cluster Controller\n                                </Link>\n                                <Link className=\"nav-link\" to={{pathname: \"/addInstitutes\"}}>\n                                    <div className=\"sb-nav-link-icon\"><i className=\"fas fa-university\"></i></div>\n                                    Add/Upload Institutes\n                                </Link>\n                                <Link className=\"nav-link\" to={{pathname: \"/globalClusterAllocation\"}}>\n                                    <div className=\"sb-nav-link-icon\"><i className=\"fas fa-university\"></i></div>\n                                    Global-Cluster Alloc\n                                </Link>\n                                <Link className=\"nav-link\" to={{pathname: \"/instClusterAllocation\"}}>\n                                    <div className=\"sb-nav-link-icon\"><i className=\"fas fa-university\"></i></div>\n                                    Inst-Cluster Alloc\n                                </Link>\n                                <Link className=\"nav-link\" to={{pathname: \"/instProgramAllocation\"}}>\n                                    <div className=\"sb-nav-link-icon\"><i className=\"fas fa-university\"></i></div>\n                                    Inst-Program Alloc\n                                </Link>\n                            </nav>\n                        </div>\n\n                        <a className=\"nav-link collapsed\" data-toggle=\"collapse\" data-target=\"#examConfigurations\" aria-expanded=\"false\" aria-controls=\"collapseLayouts\">\n                            <div className=\"sb-nav-link-icon\"><i className=\"fas fa-cogs\"></i></div>\n                                Exam Configurations\n                            <div className=\"sb-sidenav-collapse-arrow\"><i className=\"fas fa-angle-down\"></i></div>\n                        </a>\n                        <div className=\"collapse\" id=\"examConfigurations\" aria-labelledby=\"headingOne\" data-parent=\"#sidenavAccordion\">\n                            <nav className=\"sb-sidenav-menu-nested nav\">\n                                <Link className=\"nav-link\" to={{pathname: \"/programMaster\"}}>\n                                    <div className=\"sb-nav-link-icon\"><i className=\"fas fa-list-alt\"></i></div>\n                                    Program Master\n                                </Link>\n                                <Link className=\"nav-link\" to={{pathname: \"/subjectMaster\"}}>\n                                    <div className=\"sb-nav-link-icon\"><i className=\"fas fa-list-alt\"></i></div>\n                                    Subject Master\n                                </Link>\n                                <Link className=\"nav-link\" to={{pathname: \"/addTest\"}}>\n                                    <div className=\"sb-nav-link-icon\"><i className=\"fas fa-list-alt\"></i></div>\n                                    Add Test\n                                </Link>\n                                <Link className=\"nav-link\" to={{pathname: \"/studentMaster\"}}>\n                                    <div className=\"sb-nav-link-icon\"><i className=\"fas fa-list-alt\"></i></div>\n                                    Student Master\n                                </Link>\n                                <Link className=\"nav-link\" to={{pathname: \"/studSubjectAlloc\"}}>\n                                    <div className=\"sb-nav-link-icon\"><i className=\"fas fa-list-alt\"></i></div>\n                                    Stud Subject Alloc\n                                </Link>\n                            </nav>\n                        </div>\n\n                        <Link  className=\"nav-link\" to={{pathname: \"/adminreports\"}}>\n                            <div className=\"sb-nav-link-icon\"><i className=\"fas fa-clipboard-list\"></i></div>\n                            Reports\n                        </Link>\n                    </div>\n                </div>\n            </nav>\n        );\n    }\n    else if(currentUser && currentUser.role === 'EADMIN')\n    {\n        return (\n            <nav className=\"sb-sidenav accordion sb-sidenav-dark\" id=\"sidenavAccordion\" >\n                <div className=\"sb-sidenav-menu\">\n                    <div className=\"nav\">\n                        <div className=\"sb-sidenav-menu-heading\">Main Menu</div>\n                        <Link  className=\"nav-link\" to={{pathname: \"/insthome\"}}>\n                            <div className=\"sb-nav-link-icon\"><i className=\"fas fa-tachometer-alt\"></i></div>\n                            Home\n                        </Link>\n                        <Link  className=\"nav-link\" to={{pathname: \"/clearsession\"}}>\n                            <div className=\"sb-nav-link-icon\"><i className=\"fas fa-address-card\"></i></div>\n                            Clear Session\n                        </Link>\n                        <Link  className=\"nav-link\" to={{pathname: \"/instreports\"}}>\n                            <div className=\"sb-nav-link-icon\"><i className=\"fas fa-clipboard-list\" aria-hidden=\"true\"></i></div>\n                            Reports\n                        </Link>\n                    </div>\n                </div>\n            </nav>\n        );\n    }\n    else if(currentUser && currentUser.role === 'GADMIN')\n    {\n        return (\n                <nav className=\"sb-sidenav accordion sb-sidenav-dark\" id=\"sidenavAccordion\" >\n                    <div className=\"sb-sidenav-menu\">\n                        <div className=\"nav\">\n                            <div className=\"sb-sidenav-menu-heading\">Main Menu</div>\n                            <Link className=\"nav-link\" to={{pathname: \"/gadminhome\"}}>\n                                <div className=\"sb-nav-link-icon\"><i className=\"fas fa-tachometer-alt\"></i></div>\n                                Home\n                            </Link>\n                        </div>\n                    </div>\n                </nav>\n        );\n    }\n    else if(currentUser && currentUser.role === 'CADMIN')\n    {\n        return (\n                <nav className=\"sb-sidenav accordion sb-sidenav-dark\" id=\"sidenavAccordion\" >\n                    <div className=\"sb-sidenav-menu\">\n                        <div className=\"nav\">\n                            <div className=\"sb-sidenav-menu-heading\">Main Menu</div>\n                            <Link className=\"nav-link\" to={{pathname: \"/cadminhome\"}}>\n                                <div className=\"sb-nav-link-icon\"><i className=\"fas fa-tachometer-alt\"></i></div>\n                                Home\n                            </Link>\n\n                            <a className=\"nav-link collapsed\" data-toggle=\"collapse\" data-target=\"#collapseConfigurations\" aria-expanded=\"false\" aria-controls=\"collapseLayouts\">\n                            <div className=\"sb-nav-link-icon\"><i className=\"fas fa-cogs\"></i></div>\n                                Configurations\n                            <div className=\"sb-sidenav-collapse-arrow\"><i className=\"fas fa-angle-down\"></i></div>\n                            </a>\n                            <div className=\"collapse\" id=\"collapseConfigurations\" aria-labelledby=\"headingOne\" data-parent=\"#sidenavAccordion\">\n                                <nav className=\"sb-sidenav-menu-nested nav\">\n                                    <Link className=\"nav-link\" to={{pathname: \"/addInstitutes\"}}>\n                                        <div className=\"sb-nav-link-icon\"><i className=\"fas fa-university\"></i></div>\n                                        Add/Upload Institutes\n                                    </Link>\n                                </nav>\n                            </div>\n                        </div>\n                    </div>\n                </nav>\n        );\n    }\n    else\n    {\n        return (\n            <nav className=\"sb-sidenav accordion sb-sidenav-dark\" id=\"sidenavAccordion\" >\n                <div className=\"sb-sidenav-menu\">\n                    <div className=\"nav\">\n                        <div className=\"sb-sidenav-menu-heading\">Main Menu</div>\n                        <Link  className=\"nav-link\" to={{pathname: \"/\"}}>\n                            <div className=\"sb-nav-link-icon\"><i className=\"fas fa-tachometer-alt\"></i></div>\n                            Home\n                        </Link>\n                    </div>\n                </div>\n            </nav>\n        );\n    }\n}\n\nexport default Sidebar;","/home/pawan/Desktop/react-template-hooks/src/Layout/Footer.js",["420"],"import React, { useState, useEffect, useContext } from 'react';\nimport API from '../api';\nimport {FooterContext} from '../App';\n\nfunction Footer() \n{\n    const {footerVal, setFooterVal} = useContext(FooterContext);\n    let footerData  = useFooterData(footerVal);\n    let d           = new Date();\n    let year        = d.getFullYear();\n    \n\n    return (\n        footerData !=='' ? \n        <div className=\"container-fluid\">\n            <div className=\"d-flex align-items-center justify-content-between small\">\n                <div className=\"text-muted\">Copyright &copy; {footerData} {year}</div>\n            </div>\n        </div>\n        : null\n    );\n}\n\n\n\n\nfunction useFooterData(footerVal)\n{\n    const [footerData,setFooterData] = useState('');\n    useEffect(() => {getFooterData();},[footerVal]);\n\n    async function getFooterData()\n    {\n        await API.get('/configurations',{params :{\"type\":\"footerconfig\"}})\n        .then(function (res) \n        {\n            if(res.data.status === 'success')\n            {\n                setFooterData(res.data.footer);\n            }\n            else\n            {\n                setFooterData('GudExams');\n            }\n        })\n        .catch(function (error) \n        {\n            setFooterData('GudExams');\n        })\n    }\n\n    return footerData\n}\n\nexport default Footer;\n","/home/pawan/Desktop/react-template-hooks/src/Components/LoginButton.js",["421"],"import React, { useContext } from 'react';\nimport API from '../api';\nimport { useHistory } from 'react-router-dom';\nimport {UserContext} from '../App';\n\nfunction LoginButton(props)\n{\n  let history                                     =   useHistory(props);\n  const {currentUser, setCurrentUser}             =   useContext(UserContext);\n\n  async function loginLogout()\n  {\n    if(props.label === 'Logout')\n    {\n      //-----------Call Logout API and on success redirect to Login Page-------\n\n      const res = await API.post('/logout');\n\n      if(res.data.status === 'Success')\n      {\n        setCurrentUser(undefined);\n        await localStorage.clear();\n        props.setIsLoggedIn(false);\n        history.replace('/login');\n      }\n      //-----------------------------------------------------------------------\n    }\n    else\n    {\n        history.replace('/login');\n    }\n  }\n\n    return (\n        <div>\n          <button onClick={() => {loginLogout(props)}} className=\"btn btn-primary\">{props.label}</button>\n        </div>\n    );\n}\n\nexport default LoginButton;\n","/home/pawan/Desktop/react-template-hooks/src/Components/Login.js",["422","423"],"import React, { useState , useEffect, useContext, createRef } from 'react';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport API from '../api';\nimport ReCAPTCHA   from \"react-google-recaptcha\";\nimport { useHistory } from 'react-router-dom';\nimport {UserContext} from '../App';\n\nwindow.recaptchaOptions = {\n    useRecaptchaNet: true,\n  };\n\nexport default function Login(props)\n{\n  const {currentUser, setCurrentUser}               =    useContext(UserContext);\n  let history                                       =    useHistory();\n  const [myRecaptcha, setMyRecaptcha]               =    useState();\n  const [myMsg, setMyMsg]                           =    useState();\n  let [loading, setLoading]                         =    useState(true);\n  const flag                                        =    useFlag(setLoading);\n  const siteKey                                     =    process.env.REACT_APP_CAPTCHA_SITE_KEY;\n  const recaptchaRef                                =    createRef();\n\n  return (\n    !loading ?\n        flag !== undefined && <Formik\n        initialValues={{ username: \"\", password: \"\", flag:flag ,instId:\"\" }}\n        onSubmit={async (values,actions) =>\n        {\n          if (myRecaptcha !== undefined)\n          {\n            await checkLogin(values.username,values.password,values.instId,flag,myRecaptcha,setMyMsg,history,setCurrentUser,recaptchaRef);\n            actions.setSubmitting(false);\n            actions.resetForm({\n                values: {\n                  username: '',\n                  password: '',\n                  flag: flag,\n                  instId:''\n                },\n            });\n          }\n          else\n          {\n              setMyMsg('Please Use Recaptcha For Login...');\n          }\n        }}\n        validationSchema={Yup.object().shape({\n            username:Yup.string()\n            .required(\"Username Required\"),\n            password: Yup.string()\n            .required(\"Password is Required\"),\n            flag: Yup.number(),\n            instId: Yup.string().when('flag', {\n              is:0,\n              then: Yup.string().required(\"Inst ID is Required\")\n            })\n        })}\n    >\n    {\n        props => {\n            const {\n                values,\n                touched,\n                errors,\n                isSubmitting,\n                handleChange,\n                handleBlur,\n                handleSubmit\n            } = props;\n            return (\n\n                <div style={{marginBottom:\"30px\",marginTop:\"30px\"}}>\n                    <div className=\"container\">\n                        <div className=\"row justify-content-center\">\n                            <div className=\"col-lg-6\">\n                                <div className=\"card shadow-lg border-0 rounded-lg mt-10 animate__animated animate__backInDown animate__slow\">\n                                    <div className=\"card-header\"><h3 className=\"text-center font-weight-light my-4\"><b>Login</b></h3></div>\n                                    <div className=\"card-body\" >\n                                        <form onSubmit={handleSubmit}>\n                                            <div className=\"form-group\">\n                                                <label><b>User Name</b></label>\n\n                                                <input className=\"form-control py-4\" id=\"username\" type=\"text\"\n                                                name=\"username\"\n                                                value ={values.username}\n                                                placeholder=\"Enter User Name\"\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                                class1name={errors.username && touched.username && \"error\"}\n                                                />\n\n                                                {errors.username && touched.username && (\n                                                    <div className=\"alert alert-info\">{errors.username}</div>\n                                                )}\n\n                                            </div>\n                                            <div className=\"form-group\">\n                                                <label className=\"form-group\"><b>Password</b></label>\n\n                                                <input className=\"form-control py-4\" id=\"password\" name=\"password\"\n                                                type=\"password\"\n                                                value ={values.password}\n                                                placeholder=\"Enter password\"\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                                class1name={errors.password && touched.password && \"error\"}\n                                                />\n\n                                                {errors.password && touched.password && (\n                                                    <div className=\"alert alert-info\">{errors.password}</div>\n                                                )}\n                                            </div>\n\n                                            {flag === 0 && (<div className=\"form-group\">\n                                                <label className=\"form-group\"><b>Inst ID</b></label>\n\n                                                <input className=\"form-control py-4\" id=\"instId\" name=\"instId\" type=\"instId\"\n                                                value ={values.instId}\n                                                placeholder=\"Enter Institute ID\"\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                                class1name={errors.instId && touched.instId && \"error\"}\n                                                />\n\n                                                {errors.instId && touched.instId && (\n                                                    <div className=\"alert alert-info\">{errors.instId}</div>\n                                                )}\n                                            </div>)}\n\n                                            <ReCAPTCHA name=\"myRecaptcha\" id=\"myRecaptcha\" sitekey={siteKey} badge=\"inline\" onChange={(value) => setMyRecaptcha(value)} ref={recaptchaRef}/>\n\n                                            <div className=\"form-group d-flex align-items-center justify-content-between mt-4 mb-0\">\n                                                <button className=\"btn btn-primary\" type=\"submit\" id=\"submit\" disabled={isSubmitting}>Login</button>\n                                            </div><br/>\n\n                                            {myMsg !== undefined && (\n                                                <div className=\"alert alert-success animate__animated animate__bounceIn animate_slow\">{myMsg}</div>\n                                            )}\n\n                                        </form>\n                                    </div>\n                                    <div className=\"card-footer text-center\">\n                                        <div className=\"small\"></div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                      </div>\n                </div>\n            );\n        }\n    }\n    </Formik>\n    :\n    <div className=\"custom-loader\"></div>\n  );\n}\n\nasync function checkLogin(username,password,instId,flag,myRecaptcha,setMyMsg,history,setCurrentUser,recaptchaRef)\n{\n    await API.post('/login',{\"username\":username,\"password\":password,\"inst_id\":instId,\"flag\":flag,\"myRecaptcha\":myRecaptcha}).then(res =>\n    {\n            if(res.data.status === 'success')\n            {\n                localStorage.setItem(\"token\",JSON.stringify(res.data.token));\n                if(res.data.data.role === 'STUDENT')\n                {\n                    setCurrentUser(res.data.data);\n                    history.replace({ pathname: '/studenthome',state:{currentUser: res.data.data}});\n                }\n                else if(res.data.data.role === 'ADMIN')\n                {\n                    setCurrentUser(res.data.data);\n                    history.replace({ pathname: '/adminhome',state:{currentUser: res.data.data}});\n                }\n                else if(res.data.data.role === 'EADMIN')\n                {\n                    setCurrentUser(res.data.data);\n                    history.replace({ pathname: '/insthome',state:{currentUser: res.data.data}});\n                }\n                else if(res.data.data.role === 'GADMIN')\n                {\n                    setCurrentUser(res.data.data);\n                    history.replace({ pathname: '/gadminhome',state:{currentUser: res.data.data}});\n                }\n                else if(res.data.data.role === 'CADMIN')\n                {\n                    setCurrentUser(res.data.data);\n                    history.replace({ pathname: '/cadminhome',state:{currentUser: res.data.data}});\n                }\n            }\n            else\n            {\n                recaptchaRef.current.reset();\n                setMyMsg(res.data.message);\n            }\n    })\n}\n\n\n\nfunction useFlag(setLoading)\n{\n    const [flag, setFlag]   =    useState();\n\n    useEffect(() => {updateFlag();}, []);\n\n    async function updateFlag()\n    {\n        setLoading(true);\n        const res = await API.get('/settings',{params: {\"type\":\"login\"}});\n        if(res.data.status==='success')\n        {\n            setFlag(res.data.flag);\n            setLoading(false);\n        }\n    }\n\n    return flag;\n}\n","/home/pawan/Desktop/react-template-hooks/src/Components/Startexam.js",["424","425","426","427","428"],"/home/pawan/Desktop/react-template-hooks/src/Components/Student/StudHome.js",["429"],"import React, { useState , useEffect, useContext } from 'react';\nimport API from '../../api';\nimport CountCard from './CountCard';\nimport ExamCard from './ExamCard';\nimport { useLocation } from 'react-router-dom';\nimport {UserContext} from '../../App';\nimport SearchBox from './SearchBox';\n\nfunction StudHome()\n{\n  const location                                  =   useLocation();\n  const {currentUser, setCurrentUser}             =   useContext(UserContext);\n  let [loading, setLoading]                       =   useState(true);\n\n  const [userRequest, setUserRequest] = useState({\n    loading: true,\n    myExams: null,\n    numExams:0,\n    compExams:0,\n    yetToStartExam:0,\n    resumeExam:0,\n    expiredExam:0\n  });\n\n  //------------------------Restraining back button of browser--------------------\n  useEffect(() => \n  {\n    window.history.pushState(location.state, '', '/studenthome');\n  }, [location]);\n  //------------------------------------------------------------------------------\n\n  useEffect(() =>\n  {\n    getExamData(setUserRequest,setLoading);\n  },[]);\n\n  return (\n      !userRequest.loading && currentUser && !loading?\n      <div>\n        <div className=\"container-fluid\">\n            <br/>\n            <div className=\"breadcrumb col-lg-12 row\">\n              <div className=\"col-lg-6\">\n                <b>Student Name:</b> {currentUser.name} \n              </div>\n              <div className=\"col-lg-6\">\n                <b>Enrollment No:</b> ({currentUser.username})\n              </div>\n            </div>\n            \n            <div className=\"row col-lg-12 animate__animated animate__pulse animate_slower row\">\n              <CountCard count={userRequest.numExams} label={\"All\"} color={\"danger\"} onClick={() => {getExamData(setUserRequest,setLoading);}}/>\n              <CountCard count={userRequest.compExams} label={\"Completed\"} color={\"success\"} onClick={() => {getExamData(setUserRequest,setLoading,'over');}}/>\n              <CountCard count={userRequest.yetToStartExam} label={\"Yet To Start\"} color={\"warning\"} onClick={() => {getExamData(setUserRequest,setLoading,'yettostart');}}/>\n              <CountCard count={userRequest.resumeExam} label={\"Resume\"} color={\"primary\"} onClick={() => {getExamData(setUserRequest,setLoading,'inprogress');}}/>\n              <CountCard count={userRequest.expiredExam} label={\"Expired\"} color={\"info\"} onClick={() => {getExamData(setUserRequest,setLoading,'expired');}}/>\n              <SearchBox getExamData={getExamData} setUserRequest={setUserRequest} setLoading={setLoading}/>\n            </div>\n            <br/><br/>\n            <div className=\"row col-lg-12 animate__animated animate__pulse animate_slower\">\n            {\n              userRequest.numExams ?\n              userRequest.myExams ? userRequest.myExams.data.map((exam) =>\n              (\n                  <ExamCard exam={exam} key={exam.id}/>\n              )) : null\n              : null\n            }\n            </div><br/>\n        </div>\n      </div> \n      : \n      <div className=\"custom-loader\"></div>\n  );\n}\n\n\nasync function getExamData(setUserRequest,setLoading,filter1='All')\n{\n        setLoading(true);\n        const res = await API.get('/exam');\n        let exams = await res.data;\n        //-------------------Sort data according to exam date for cards---------\n        let unsortedData= exams.data;\n        let sorted = {};\n        sorted = unsortedData.sort(function(a,b)\n        {\n          return a.paper.from_date - b.paper.from_date;\n        });\n        //----------------------------------------------------------------------\n        let i               = 0;\n        let compleated      = 0;\n        let yetToStart      = 0;\n        let resume          = 0;\n        let expired         = 0;\n        let numExams        = exams.data.length;\n        let EndTime         = '';\n        let Now             = '';\n        let overIndex          = [];\n        let inprogressIndex    = [];\n        let yetToStartIndex    = [];\n        let expiredIndex       = [];\n        \n        Object.keys(sorted).forEach(function(key)\n        {\n          EndTime           = sorted[key].paper.to_date;\n          Now               = sorted[key].now;\n          \n          if(sorted[key].examstatus === 'over')\n          {\n            compleated = compleated+1;\n            overIndex.push(key);\n          }\n          else if(sorted[key].examstatus === '' || sorted[key].examstatus === null)\n          {\n            if(EndTime < Now)\n            {\n              expired = expired+1;\n              expiredIndex.push(key);\n            }\n            else\n            {\n              yetToStart = yetToStart+1;\n              yetToStartIndex.push(key);\n            }\n          }\n          else if(sorted[key].examstatus === 'inprogress')\n          {\n            if(EndTime < Now)\n            {\n              expired = expired+1;\n              expiredIndex.push(key);\n            }\n            else\n            {\n              resume = resume+1;\n              inprogressIndex.push(key);\n            }\n          }\n          else if(sorted[key].examstatus === 'expired')\n          {\n            expired = expired+1;\n            expiredIndex.push(key);\n          }\n        });\n        \n        //---------------------------Filtering array based on examStatus-------\n        if(filter1 === 'over')\n        {\n          for(i=0;i< inprogressIndex.length;i++)\n          {\n            delete sorted[inprogressIndex[i]];\n          }\n          \n          for(i=0;i< yetToStartIndex.length;i++)\n          {\n            delete sorted[yetToStartIndex[i]];\n          }\n          \n          for(i=0;i< expiredIndex.length;i++)\n          {\n            delete sorted[expiredIndex[i]];\n          }\n        }\n        else if(filter1 === 'inprogress')\n        {\n          for(i=0;i< overIndex.length;i++)\n          {\n            delete sorted[overIndex[i]];\n          }\n          \n          for(i=0;i< expiredIndex.length;i++)\n          {\n            delete sorted[expiredIndex[i]];\n          }\n\n          for(i=0;i< yetToStartIndex.length;i++)\n          {\n            delete sorted[yetToStartIndex[i]];\n          }\n        }\n        else if(filter1 === 'expired')\n        {\n          for(i=0;i< overIndex.length;i++)\n          {\n            delete sorted[overIndex[i]];\n          }\n          \n          for(i=0;i< yetToStartIndex.length;i++)\n          {\n            delete sorted[yetToStartIndex[i]];\n          }\n\n          for(i=0;i< inprogressIndex.length;i++)\n          {\n            delete sorted[inprogressIndex[i]];\n          }\n        }\n        else if(filter1 === 'yettostart')\n        {\n          for(i=0;i< overIndex.length;i++)\n          {\n            delete sorted[overIndex[i]];\n          }\n          \n          for(i=0;i< expiredIndex.length;i++)\n          {\n            delete sorted[expiredIndex[i]];\n          }\n\n          for(i=0;i< inprogressIndex.length;i++)\n          {\n            delete sorted[inprogressIndex[i]];\n          }\n        }\n        else if(filter1==='All')\n        {\n\n        }\n        else\n        {\n          let searched = [];\n          //-------------------------Search Paper Name-------------------------------------\n            for(let i=0;i<sorted.length;i++)\n            {\n              let paper_name = sorted[i].paper.paper_name.toLowerCase();\n              let myFilter = filter1.toLowerCase();\n\n              if(paper_name.includes(myFilter))\n              {\n                searched.push(sorted[i]);\n              }\n            }\n            exams.data = searched;\n          //-------------------------------------------------------------------------------\n        }\n        //---------------------------------------------------------------------\n        if(exams.data)\n        {\n          setUserRequest({ loading:false, myExams:exams, numExams:numExams,  compExams:compleated, yetToStartExam:yetToStart, resumeExam:resume, expiredExam:expired });\n        }\n        else\n        {\n          setUserRequest({ loading:false, myExams:exams, numExams:0,  compExams:compleated, yetToStartExam:yetToStart, resumeExam:resume, expiredExam:expired });\n        }\n        setLoading(false);\n}\n\nexport default StudHome;\n","/home/pawan/Desktop/react-template-hooks/src/Components/Student/Instructions.js",["430","431"],"import React ,{ useState, useEffect, useContext }  from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { Link } from 'react-router-dom';\nimport API from '../../api';\nimport WebCamCapture from '../Exam/WebCamCapture';\nimport {UserContext} from '../../App';\n\nfunction useOptions()\n{\n  let history                           =   useHistory();\n  let location                          =   useLocation();\n  let [exam, setExam]                   =   useState();\n  let myExam                            =   undefined;\n  \n\n  if(location.state && location.state.exam)\n  {\n    myExam = location.state.exam;\n  }\n  useEffect(() =>\n  {\n    if (myExam!== undefined)\n    {\n      setExam(myExam);\n    }\n    else\n    {\n      if(location.state && location.state.role === 'STUDENT')\n      {\n        history.replace(\"/studenthome\");\n      }\n      else\n      {\n        history.replace(\"/adminexamreport\");\n      }\n    }\n  }, [myExam,history]);\n\n  return exam;\n}\n\nfunction Instructions(props)\n{\n  const [checked, setChecked]         =   useState(false);\n  const [startexam, setStartexam]     =   useState(true);\n  let history                         =   useHistory();\n  let exam                            =   useOptions();\n  let location                        =   useLocation();\n  let [myCameraPerm, setMyCameraPerm] =   useState(false);\n  const {currentUser, setCurrentUser} =   useContext(UserContext);\n  let shuffleOptions                  =   [];\n\n  let button = '';\n  let BtnLabel = '';\n  let  negativeMarks='';\n  if(exam)\n  {\n        if(exam.examstatus==='inprogress')\n        {\n          BtnLabel = 'Continue Exam';\n        }\n        else\n        {\n          BtnLabel = 'Start Exam';\n        }\n\n        if(location.state.role === 'ADMIN')\n        {\n          BtnLabel = 'Preview Exam';\n        }\n\n        exam.paper.negative_marks===0 ?negativeMarks = 'No' : negativeMarks = 'Yes';\n\n        for(let i=0;i<exam.paper.questions;i++)\n        {\n          shuffleOptions.push(shuffleArray(['optiona','optionb','optionc','optiond']));\n        }\n  }\n\n  return (\n      exam ?\n      <div className=\"animate__animated animate__flash animate_slower\">\n        <div className=\"container-fluid\">\n            <h1 className=\"mt-4\">Exam Instructions</h1>\n            <div className=\"breadcrumb col-lg-12 row\">\n                <div className=\"breadcrumb-item active col-lg-10\">Read Instructions Carefully...</div>\n                <div className=\"col-lg-2\">{currentUser && currentUser.role==='STUDENT' ? <Link to=\"studenthome\" className=\"btn btn-danger btn-sm\">Go Back</Link>: <Link to=\"adminexamreport\" className=\"btn btn-danger btn-sm\">Go Back</Link>}</div>\n            </div>\n            <div className=\"col-lg-12\">\n                  <div className='card'>\n                      <div className=\"card-header bg-primary\" style={{color:\"white\"}}>\n                        <h5><b>{exam.paper.paper_name}({exam.paper.paper_code}) Instructions</b></h5>\n                      </div>\n                      <div className=\"card-body\">\n                        <div className=\"col-lg-8\">\n                          <ul>\n                            <li> Welcome to Online Exam for {exam.paper.paper_name}</li>\n                            <li> Exam has total {exam.paper.questions} Questions</li>\n                            <li> Total time for Exam is {exam.paper.duration} Mins</li>\n                            <li> Negative Marking Exam: <b>{negativeMarks}</b></li>\n                            <li> Close all other windows/apps</li>\n                            <li> Do not close browser/app before logging out</li>\n                          </ul>\n\n                          <h1><i>Best of Luck for your Exam</i></h1>\n                        </div>\n                        <div className=\"col-lg-4\">\n                          <WebCamCapture exam={location.state.exam.id} setMyCameraPerm={setMyCameraPerm} show={'no'} CaptureTime={location.state.exam.paper.capture_interval} isProctored={location.state.exam.paper.proctoring} capture=\"no\"/>\n                        </div>\n                      </div>\n                      <div className=\"card-footer\">\n                        <center>\n                            <input type=\"checkbox\" id=\"read\" name=\"read\" defaultChecked={checked} onChange={() => setChecked(!checked)}/> &nbsp;&nbsp;I have read and understood instructions.<br/><br/>\n                            {BtnLabel!=='Preview Exam' ?\n                            <button disabled={(!checked || !myCameraPerm)} \n                            onClick={() => ExamStart(history,exam,setStartexam,location)} \n                            className=\"btn btn-success\">{BtnLabel}</button>\n                            :\n                            <button disabled={(!checked || !myCameraPerm)} \n                            onClick={() => {ExamPreview(history,exam,setStartexam,location);}} \n                            className=\"btn btn-success\">{BtnLabel}</button>\n                            }\n                        </center>\n                      </div>\n                  </div>\n            </div>\n            <br/>\n            <div>{!startexam && (\n                <div className=\"alert alert-info\">Problem Starting Examination</div>\n            )}</div>\n        </div>\n      </div> : ''\n    );\n}\n\nasync function ExamPreview(history,exam,setStartexam,location)\n{\n\n  let examDetails = {}\n  //------------------Start Exam------------------------------------------------\n  if(location.state.role !== 'STUDENT')\n  {\n        const myQuestions = await getPreviewQuestions(exam);\n        if(myQuestions)\n        {\n          examDetails = {\n          preview                             : true,\n          exam                                : exam,\n          questions                           : myQuestions,\n          currentQuestionIndex                : 0,\n          solvedQuestionIndexes               : [], \n          unsolvedQuestionIndexes             : [],\n          markedSolvedIndexes                 : [],\n          markedUnsolvedIndexes               : [],\n        }\n        setStartexam(true);\n        history.replace(\"/startexam\", examDetails) ;\n      }\n  }\n  else\n  {\n    setStartexam(false);\n  }\n}\n\n\nasync function ExamStart(history,exam,setStartexam,location)\n{\n  let examDetails = {}\n  //------------------Start Exam------------------------------------------------\n  if(location.state.role === 'STUDENT')\n  {\n    if(await startMyExam(exam))\n    {\n        const myQuestions = await getQuestions(exam);\n        if(myQuestions)\n        {\n          //console.log(myQuestions);\n          examDetails = {\n          preview                             :   false,\n          exam                                :   exam,\n          questions                           :   myQuestions,\n          currentQuestionIndex                :   0,\n          solvedQuestionIndexes               :   getIndexes(myQuestions,'answered'), unsolvedQuestionIndexes             :   getIndexes(myQuestions,'unanswered'),\n          markedSolvedIndexes                 :   getIndexes(myQuestions,'answeredandreview'),\n          markedUnsolvedIndexes               :   getIndexes(myQuestions,'unansweredandreview'),\n        }\n        setStartexam(true);\n        \n        history.replace(\"/startexam\", examDetails) ;\n      }\n    }\n    else\n    {\n      setStartexam(false);\n    }\n  }\n  //----------------------------------------------------------------------------\n}\n\nasync function startMyExam(exam)\n{\n  const ExamId = exam.id;\n\n  const res = await API.put('/exam/'+ExamId,{\"status\": \"start\"});\n\n  if(res.data.status === 'success')\n  {\n    return 1;\n  }\n  else\n  {\n    return 0;\n  }\n}\n\n\nasync function getQuestions(exam)\n{\n  const ExamId = exam.id;\n\n  const res = await API.get('/answer',{params: {\"exam_id\": ExamId}});\n  if(res.data.status === 'success')\n  {\n    return res.data.data;\n  }\n  else\n  {\n    return null;\n  }\n}\n\nasync function getPreviewQuestions(exam)\n{\n  const PaperId = exam.paper.paper_code;\n\n  const res = await API.get('/questions/'+PaperId,{params: {\"type\" : \"preview\"}});\n  if(res.data.status === 'success')\n  {\n    return res.data.data;\n  }\n  else\n  {\n    return null;\n  }\n}\n\nfunction getIndexes(myQuestions,searchString)\n{\n  let arr     = [];\n\n  myQuestions.forEach(function(question,index){\n    if(question.answered === searchString)\n    {\n      arr.push(index);\n    }\n  });\n  return arr;\n}\n\nfunction shuffleArray(array) \n{\n  for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n\nexport default Instructions;\n","/home/pawan/Desktop/react-template-hooks/src/Components/Exam/MyTimer.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Student/CountCard.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Student/ExamCard.js",["432"],"import React,{useEffect,useContext} from 'react';\nimport { Link,useHistory } from 'react-router-dom';\nimport Moment from 'react-moment';\nimport CountDownButton from './CountDownButton';\nimport API from '../../api';\nimport Axios from 'axios';\nimport {PopupContext} from '../../App';\n\nfunction ExamCard(props)\n{   \n    const {setPopupShow,setPopupMsg}  =   useContext(PopupContext);\n    let history         = useHistory();\n    let BtnCaption      = '';\n    let StartTime       = '';\n    let EndTime         = '';\n    let TotalQuestions  = 0;\n    let ExamDuration    = 0;\n    let Theme           = '';\n    let BtnTheme        = '';\n    let myLink          = '';\n    let Now             = '';\n    let status          = '';\n\n    StartTime         = props.exam.paper.from_date;\n    EndTime           = props.exam.paper.to_date;\n    Now               = props.exam.now;\n    //----------------------Dynamic status------------------------------------------\n      if(EndTime < Now)\n      {\n        status='expired';\n      }\n      else if(props.exam.examstatus==='inprogress')\n      {\n        status = 'inprogress';\n      }\n    //------------------------------------------------------------------------------\n    if(props.exam.examstatus==='over')\n    {\n      status        = props.exam.examstatus;\n    }\n    const PaperName   = props.exam.paper.paper_name;\n    TotalQuestions    = props.exam.paper.questions;\n    ExamDuration      = props.exam.paper.duration;\n\n\n    //---------------------Status according to database-------------------------\n\n    if(status === 'over' || status  === 'expired')\n    {\n      if(status ==='over')\n      {\n        BtnCaption='Completed';\n        Theme = 'text-white bg-success'\n        BtnTheme = 'btn btn-success';\n      }\n      else\n      {\n        BtnCaption='Expired';\n        Theme = 'bg-info';\n        BtnTheme = 'btn btn-info';\n      }\n      myLink = <Link to={void(0)} className={BtnTheme} onClick={e => e.preventDefault()}>{BtnCaption}</Link>\n    }\n    else if(status==='' || status ==='inprogress')\n    {\n      if(status ==='')\n      {\n        BtnCaption='Start Exam';\n        Theme = 'text-white bg-warning';\n        BtnTheme = 'btn btn-warning';\n        if(StartTime > Now)\n        {\n          BtnCaption='Coming Soon';\n          Theme = 'bg-warning';\n          BtnTheme = 'btn btn-warning';\n\n          myLink = <CountDownButton  StartTime ={StartTime} Now={Now} exam={props.exam} role='STUDENT'/>\n        }\n        else\n        {\n          myLink = <Link onClick={() => {\n            getParallelData(props.exam.paper.id,setPopupShow,setPopupMsg,history,props);\n          }} className={BtnTheme}>{BtnCaption}</Link>;\n        }\n      }\n      else\n      {\n        console.log(props.exam);\n        BtnCaption='Continue Exam';\n        Theme = 'text-white bg-primary';\n        BtnTheme = 'btn btn-primary';\n        myLink = <Link to={{pathname: '/instructions',state: {exam:props.exam,role:'STUDENT'}}} className={BtnTheme}>{BtnCaption}</Link>;\n      }\n    }\n//------------------------------------------------------------------------------\n    const userRequest = { btnCaption:BtnCaption, paperName:PaperName, startTime:StartTime,  endTime:EndTime, totQuestions:TotalQuestions, examDuration:ExamDuration, theme:Theme, btnTheme:BtnTheme }\n    return (\n            <div className=\"col-lg-4\">\n              <div className='card' style={{minHeight:\"400px\",margin:\"10px\"}}>\n                  <div className={\"card-header \"+userRequest.theme}>\n                    <b>{userRequest.paperName}</b>\n                  </div>\n                  <div className=\"card-body\">\n                    <h6 className=\"card-title\"><b>Exam Details</b></h6>\n                    <ul>\n                        <li><b>Start Time      :</b> <Moment format=\"MMMM Do YYYY, H:mm:ss A\">{userRequest.startTime}</Moment></li>\n                        <li><b>End Time        :</b> <Moment format=\"MMMM Do YYYY, H:mm:ss A\">{userRequest.endTime}</Moment></li>\n                        <li><b>Time Zone:</b> {getTimezoneName()} {Intl.DateTimeFormat().resolvedOptions().timeZone}</li>\n                        <li><b>No of Questions :</b> {userRequest.totQuestions}</li>\n                        <li><b>Exam Duration   :</b> {userRequest.examDuration}</li>\n                    </ul>\n                  </div>\n                  <div className=\"card-footer\">\n                    <center>\n                      {myLink}\n                    </center>\n                  </div>\n              </div>\n            </div>\n    );\n}\nasync function getParallelData(paperId,setPopupShow,setPopupMsg,history,props)\n{\n  let subjectData = null;\n    let topicData   = null;\n    let TotalMarks  =   0;\n    let TotalQuest  =   0;\n    let TopicSumMarks=  0;\n    let TopicSumQuest=  0;\n\n    //--------------Get Topic Data---------------------------------------------------\n    await Axios.all([\n        API.get('/paper/'+paperId),\n        API.get('/subject/topic',{params:{'type':'single','paperId':paperId}})\n    ])\n    .then(responseArr => \n    {\n        if(responseArr[0].data.status==='success')\n        {\n            subjectData = responseArr[0].data.data;\n            \n            if(subjectData)\n            {\n                TotalMarks = subjectData.marks;\n                TotalQuest = subjectData.questions;\n            }\n        }\n        \n        if(responseArr[1].data.status==='success')\n        {\n            topicData = responseArr[1].data.data;\n            if(topicData)\n            {\n                topicData.forEach(record => {\n                    TopicSumMarks = TopicSumMarks + record.questions*record.marks;\n                    TopicSumQuest = TopicSumQuest + record.questions;\n                });\n            }\n        }\n\n        if((TotalMarks !==  TopicSumMarks))\n        {\n          setPopupShow(true);\n          setPopupMsg('Total Marks for Subject not matching with Topic wise Total Marks. Can not start Examination.');\n        }\n        if(TotalMarks === 0)\n        {\n          setPopupShow(true);\n          setPopupMsg('Total Marks for this Subject not yet set. Can not start Examination.');\n        }\n        if(TopicSumMarks === 0)\n        {\n          setPopupShow(true);\n          setPopupMsg('Topic Entry for this subject not yet done. Can not start Examination.');\n        }\n\n        if((TotalQuest !==  TopicSumQuest))\n        {\n          setPopupShow(true);\n          setPopupMsg('Total Questions for Subject not matching with Topic wise Total Questions. Can not start Examination.');\n        }\n        if(TotalQuest === 0)\n        {\n          setPopupShow(true);\n          setPopupMsg('Total Questions for this Subject not yet set. Can not start Examination.');\n        }\n        if(TopicSumQuest === 0)\n        {\n          setPopupShow(true);\n          setPopupMsg('Topic Entry for this subject not yet done. Can not start Examination.');\n        }\n\n        if((TotalMarks ===  TopicSumMarks) && (TotalQuest ===  TopicSumQuest))\n        {\n          history.push({pathname: '/instructions',state: {exam:props.exam,role:'STUDENT'}});\n        }\n    });\n}\nfunction getTimezoneName()\n{\n  const today         = new Date();\n  const short         = today.toLocaleDateString(undefined);\n  const full          = today.toLocaleDateString(undefined, { timeZoneName: 'long' });\n  const shortIndex    = full.indexOf(short);\n  if (shortIndex >= 0)\n  {\n    const trimmed     = full.substring(0, shortIndex) + full.substring(shortIndex + short.length);\n    return trimmed.replace(/^[\\s,.\\-:;]+|[\\s,.\\-:;]+$/g, '');\n  }\n  else\n  {\n    return full;\n  }\n}\n\nexport default ExamCard;\n","/home/pawan/Desktop/react-template-hooks/src/Components/Exam/QuestionAnswer.js",["433","434"],"/home/pawan/Desktop/react-template-hooks/src/Components/Exam/QuestionButtons.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Exam/NextSaveButton.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Exam/EndExamButton.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Exam/PreviousButton.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Exam/OverallSummery.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Exam/ReviewLater.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Exam/Options.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Exam/WebCamCapture.js",["435","436","437","438","439","440","441","442","443","444","445"],"import React, { useState,useEffect, useContext } from 'react';\nimport Webcam from \"react-webcam\";\nimport { useHistory } from 'react-router-dom';\nimport {PopupContext} from '../../App';\nimport API from '../../api';\nimport {UserContext} from '../../App';\n\n\nconst WebCamCapture = (props) => {\n    const {currentUser, setCurrentUser}     = useContext(UserContext);\n    let CaptureTime                         = parseInt(props.CaptureTime) * 1000;\n    \n    if(CaptureTime === 0 || CaptureTime === '0')\n    {\n      CaptureTime = 9999999;\n    }\n    const webcamRef                         = React.useRef(null);\n    const [imgSrc, setimgSrc]               = useState(null);\n    const videoConstraints                  = {facingMode: \"user\"};\n    let history                             = useHistory();\n    const {setPopupShow,setPopupMsg}        = useContext(PopupContext);\n    const exam                              = props.exam;\n    const CapTime                           = props;\n    const capture1                          = props.capture;\n    \n\n    const capture                = React.useCallback(\n    () => \n        { \n          if(webcamRef)\n          {\n              const imageSrc            = webcamRef.current.getScreenshot();\n              setimgSrc(imageSrc); \n              if(capture1 !== 'no')\n              {\n                //-----------------Specifically for getting value instead of Promise-----\n                (async () => \n                {\n                  let res = await storeSnap(exam,imageSrc);\n                  let snapid = res.data.snapid;\n                  if(snapid && props.isProctored)\n                  {\n                    ProcessImage(imageSrc,exam,snapid,setPopupShow,setPopupMsg);\n                  }\n                })();\n                //-----------------------------------------------------------------------\n              }\n          }\n        },\n        [webcamRef,setimgSrc,exam]\n    );\n\n    useEffect(() => {    \n        navigator.mediaDevices.getUserMedia({ video: true, voice: true })\n        .then(function(stream) \n        {\n            props.setMyCameraPerm(true);\n        })\n        .catch(function(err) \n        {\n            props.setMyCameraPerm(false);\n            setPopupShow(true);\n            setPopupMsg('Without Camera Premission Examination can not be started.');\n            if(currentUser && currentUser.role === 'STUDENT')\n            {\n                history.replace('/studenthome');\n            }\n            else if(currentUser && currentUser.role === 'ADMIN')\n            {\n                history.replace('/adminexamreport');\n            }\n        });\n        let myCapture = setInterval(capture, CaptureTime);\n\n        //------------------Cleanup-----------------------------------------\n        return () => {\n            clearInterval(myCapture);\n        }\n        //------------------------------------------------------------------\n    },[history.location,capture,history,props,setPopupMsg,setPopupShow]);   \n\n    let webCamStyle = '';\n\n    if(props.show==='no')\n    {\n        webCamStyle = {display:'none'};\n    }\n    else\n    {\n        webCamStyle = {display:'block'};\n    }\n  \n    return (\n        <div className=\"col-lg-12\" style={{margin:\"20px\"}} style={webCamStyle}>\n            <center>\n                <Webcam\n                audio={false}\n                height={400}\n                ref={webcamRef}\n                screenshotFormat=\"image/jpeg\"\n                width={300}\n                videoConstraints={videoConstraints}\n                screenshotQuality={\"1\"}\n                />\n            </center>\n        </div>\n    );\n  };    \n\n  async function storeSnap(exam,image)\n  {\n    return await API.post('/proctor/',{\"type\": \"snapshot\",\"exam\":exam,\"image\":image});\n  }\n\n\n  function ProcessImage(file,exam,snapid,setPopupShow,setPopupMsg) \n  {\n        AnonLog();\n        var image = null;\n        \n        var jpg = true;\n        try\n        {\n            image = atob(file.split(\"data:image/jpeg;base64,\")[1]);\n        }\n        catch (e)\n        {\n          jpg = false;\n        }\n        if (jpg == false)\n        {\n          try\n          {\n            image = atob(file.split(\"data:image/png;base64,\")[1]);\n          }\n          catch (e)\n          {\n            console.log(\"Not an image file Rekognition can process\");\n            return;\n          }\n        }\n        //unencode image bytes for Rekognition DetectFaces API\n        var length = image.length;\n        var imageBytes = new ArrayBuffer(length);\n        var ua = new Uint8Array(imageBytes);\n        for (var i = 0; i < length; i++)\n        {\n          ua[i] = image.charCodeAt(i);\n        }\n        //Call Rekognition\n        DetectFaces(imageBytes,exam,snapid,setPopupShow,setPopupMsg);\n  }\n  //----------------------------------------------------------------------------\n\n  //--------------------Provides anonymous log on to AWS services---------------\n  function AnonLog()\n  {\n    // Configure the credentials provider to use your identity pool\n    window.AWS.config.region = 'ap-south-1'; // Region\n    window.AWS.config.credentials = new window.AWS.CognitoIdentityCredentials(\n    {\n        IdentityPoolId: 'ap-south-1:948e3fb3-7805-4620-8c28-aafcfdebfbd5',\n    });\n    // Make the call to obtain credentials\n    window.AWS.config.credentials.get(function ()\n    {\n      // Credentials will be available when this function is called.\n      var accessKeyId = window.AWS.config.credentials.accessKeyId;\n      var secretAccessKey = window.AWS.config.credentials.secretAccessKey;\n      var sessionToken = window.AWS.config.credentials.sessionToken;\n    });\n  }\n  //----------------------------------------------------------------------------\n\n  //------------------Face Detection Logic--------------------------------------\n\n  function DetectFaces(imageData,exam,snapid,setPopupShow,setPopupMsg)\n  {\n    window.AWS.region = \"ap-south-1\";\n    var rekognition = new window.AWS.Rekognition();\n    var params = {\n      Image: {\n        Bytes: imageData\n      },\n      Attributes: [\n        'ALL',\n      ]\n    };\n\n    rekognition.detectFaces(params, function (err, data)\n    {\n      if (err) console.log(err, err.stack); // an error occurred\n      else\n      {\n        if(data.FaceDetails.length > 0)\n        {\n          data.FaceDetails.map( async (element) => \n          {\n            const agerange        = element.AgeRange.Low+'-'+element.AgeRange.High;\n            const beard           = element.Beard.Value;\n            const eyeglasses      = element.Eyeglasses.Value;\n            const eyesopen        = element.EyesOpen.Value;\n            const gender          = element.Gender.Value;\n            const mustache        = element.Mustache.Value;\n            const smile           = element.Smile.Value;\n            const sunglasses      = element.Sunglasses.Value;\n            const examid          = exam;\n\n            let res = await API.post('/proctorDetails/',{\"examid\":examid,\"snapid\":snapid,\"agerange\":agerange,\"beard\":beard,\"eyeglasses\":eyeglasses,\"eyesopen\":eyesopen,\"gender\":gender,\"mustache\":mustache,\"smile\":smile,\"sunglasses\":sunglasses});\n\n            console.log(res);\n          });\n\n          if(data.FaceDetails.length > 1)\n          {\n            //----------------------message for more than one person detection-------------\n            setPopupShow(true);\n            setPopupMsg('There are more than one persons sitting with you while taking examination. This  event will be recorded...');\n            //-----------------------------------------------------------------------------\n          }\n        }\n        else\n        {\n          //----------------------message for no person detection--------------------------\n          setPopupShow(true);\n          setPopupMsg('Either no person is taking examination or Camera of your device is not working or it might be intentionally blocked while taking examination. This event will be recorded...');\n          //-------------------------------------------------------------------------------\n        }\n      }\n    });\n  }\n\n  //----------------------------------------------------------------------------\n\n  export default WebCamCapture;","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Adminhome.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/ClearSession.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/ClearSessionUserInfo.js",[],"/home/pawan/Desktop/react-template-hooks/src/popup.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/ConfigureHeader.js",["446"],"import React, { useState, useContext, useEffect } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport API from '../../../api';\nimport {LogoContext} from '../../../App';\nimport ClipLoader from \"react-spinners/ClipLoader\";\n\nfunction ConfigureHeader(props) \n{\n    const [headerData ,setHeaderData]   =   useState(false);\n    const [msg ,setMsg]                 =   useState('');\n    let [loading, setLoading]           =   useState(false);\n    const {logoVal, setLogoVal}         =   useContext(LogoContext);\n    const [databaseHeader,setDatabaseHeader] = useState('');\n\n    useEffect(() => {\n        getHeaderData(setDatabaseHeader);\n    },[]);\n    \n    return(\n        databaseHeader!== '' ?\n        <>\n            <Formik\n            initialValues={{ orgName: databaseHeader,file:\"\"}}\n            onSubmit={async (values,actions) =>\n            {\n                await configHeader(values.orgName,values.file,setHeaderData,setMsg,setLoading,setLogoVal);\n                actions.setSubmitting(false);\n                actions.resetForm({\n                        values: {\n                        orgName: values.orgName,\n                        file: ''\n                        },\n                });\n            }}\n            validationSchema={Yup.object().shape({\n                orgName:Yup.string()\n                .required(\"Organization Name is Required for Configuring Header Text.\"),\n                file:Yup.string()\n                .required(\"Uploading Organization Logo is Mandatory.\")\n            })}\n            >\n            {\n                props => \n                {\n                    const {\n                        values,\n                        touched,\n                        errors,\n                        handleChange,\n                        isSubmitting,\n                        handleBlur,\n                        handleSubmit,\n                        setFieldValue\n                    } = props;\n\n                    return (\n                        <div>\n                            <div className=\"container-fluid\">\n                                <h1 className=\"mt-4\">Configure Header</h1>\n                                <ol className=\"breadcrumb mb-4\">\n                                    <li className=\"breadcrumb-item active\">Configure Header</li>\n                                </ol>\n                                <div className=\"col-lg-12 animate__animated animate__pulse animate_slower\">\n                                    \n                                    <Form className=\"col-lg-12 row\" onSubmit={handleSubmit}>\n                                        <Form.Group className=\"col-lg-6 row\">\n                                            <Form.Control \n                                                type=\"text\" \n                                                id=\"orgName\" \n                                                placeholder=\"Enter Organization Name\" \n                                                className=\"col-lg-12\"\n                                                value ={values.orgName}\n                                                onBlur={handleBlur}\n                                                onChange={handleChange}\n                                            />\n                                            {errors.orgName && touched.orgName && (\n                                                <div className=\"alert alert-info col-lg-12\">{errors.orgName}</div>\n                                            )}\n                                        </Form.Group>\n                                        <div className=\"col-lg-1\"></div>\n                                        \n                                        <Form.Group className=\"col-lg-5 row\">\n                                            <center>\n                                            <input \n                                                id=\"file\" \n                                                name=\"file\" \n                                                type=\"file\" \n                                                onChange={(event) => {\n                                                    setFieldValue(\"file\", event.currentTarget.files[0]);\n                                                }} \n                                                onBlur={handleBlur}\n                                                className=\"form-control\" \n                                            />\n                                            {errors.file && touched.file && (\n                                                <div className=\"alert alert-info col-lg-12\">{errors.file}</div>\n                                            )}\n                                            </center>\n                                        </Form.Group>\n                                        \n                                        <div className=\"col-lg-12\">\n                                            <center><Button variant=\"primary\" type=\"submit\" disabled={isSubmitting}>Submit</Button></center>\n                                        </div>\n                                    </Form>\n                                </div>\n                            </div>\n                        </div>\n                    );\n                }\n            }\n            </Formik>\n            <div className=\"col-lg-12\" style={{marginTop:\"20px\"}}>\n                {headerData && !loading ? \n                    <div className=\"alert alert-danger animate__animated animate__tada animate_slower\" role=\"alert\">\n                        {msg}\n                    </div>\n                : \n                    <div className=\"col-lg-12\" style={{position:\"absolute\",top:\"40%\",left:\"40%\"}}>\n                        <ClipLoader color={'#ff0000'} loading={loading} size={200} />\n                    </div>\n                }\n            </div>\n        </>\n        :null\n    );\n}\n\nasync function getHeaderData(setDatabaseHeader)\n{\n    await API.get('/configurations/1')\n    .then(function (res) \n    {\n        if(res.data.status === 'success')\n        {\n            setDatabaseHeader(res.data.header);\n        }\n        else\n        {\n            setDatabaseHeader('GudExams');\n        }\n        \n    })\n    .catch(function (error) \n    {\n        setDatabaseHeader('GudExams');\n    });\n}\n\nasync function configHeader(orgName,file,setHeaderData,setMsg,setLoading,setLogoVal)\n{\n    setLoading(true);\n    let fd = new FormData();\n    fd.append(\"type\", 'headerconfig');\n    fd.append(\"orgName\", orgName);\n    fd.append(\"file\", file);\n\n    const config = {\n        headers: {\n            'content-type': 'multipart/form-data'\n        }\n    }\n\n    await API.post('/configurations',fd,config)\n    .then(function (res) \n    {\n        if(res.data.status === 'success')\n        {\n            setHeaderData(true);\n            setMsg(res.data.message);\n            setLogoVal(Math.random());\n            setTimeout(() => {\n                setHeaderData(false);\n            }, 10000);\n        }\n        else\n        {\n            setMsg(res.data.message);\n            setHeaderData(true);\n        }\n        setLoading(false);\n    })\n    .catch(function (error) \n    {\n        setHeaderData(true);\n        setLoading(false);\n        setMsg(error.response.data.message);\n    });\n}\n\nexport default ConfigureHeader;","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/ConfigureFooter.js",["447"],"import React, { useState, useContext, useEffect } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport API from '../../../api';\nimport {FooterContext} from '../../../App';\nimport ClipLoader from \"react-spinners/ClipLoader\";\n\nfunction ConfigureFooter(props) \n{\n    const [footerData ,setFooterData]   =   useState(false);\n    const [msg ,setMsg]                 =   useState('');\n    let [loading, setLoading]           =   useState(false);\n    const {footerVal, setFooterVal}     = useContext(FooterContext);\n    const [databaseFooter,setDatabaseFooter] = useState('');\n\n    useEffect(() => {\n        getFooterData(setDatabaseFooter);\n    },[]);\n    \n    return(\n        databaseFooter !== '' ?\n        <>\n            <Formik\n            initialValues={{ orgName: databaseFooter}}\n            onSubmit={async (values,actions) =>\n            {\n                await updateFooterData(values.orgName,setFooterData,setMsg,setLoading,setFooterVal);\n                actions.setSubmitting(false);\n                actions.resetForm({\n                        values: {\n                        orgName: values.orgName\n                        },\n                });\n            }}\n            validationSchema={Yup.object().shape({\n                orgName:Yup.string()\n                .required(\"Organization Name is Required for Configuring Footer Text.\")\n            })}\n            >\n            {\n                props => \n                {\n                    const {\n                        values,\n                        touched,\n                        errors,\n                        isSubmitting,\n                        handleChange,\n                        handleBlur,\n                        handleSubmit\n                    } = props;\n\n                    return (\n                        <div>\n                            <div className=\"container-fluid\">\n                                <h1 className=\"mt-4\">Configure Footer</h1>\n                                <ol className=\"breadcrumb mb-4\">\n                                    <li className=\"breadcrumb-item active\">Configure Footer</li>\n                                </ol>\n                                <div className=\"col-lg-12 animate__animated animate__pulse animate_slower\">\n                                    <Form className=\"col-lg-12 row\" onSubmit={handleSubmit}>\n                                        <Form.Group className=\"col-lg-10 row\">\n                                            <Form.Control \n                                                type=\"text\" \n                                                id=\"orgName\" \n                                                placeholder=\"Enter Organization Name\" \n                                                className=\"col-lg-12\"\n                                                value ={values.orgName}\n                                                onBlur={handleBlur}\n                                                onChange={handleChange}\n                                            />\n                                            {errors.orgName && touched.orgName && (\n                                                <div className=\"alert alert-info col-lg-12\">{errors.orgName}</div>\n                                            )}\n                                        </Form.Group>\n                                        <div className=\"col-lg-2\">\n                                            <center><Button variant=\"primary\" type=\"submit\" disabled={isSubmitting}>Submit</Button></center>\n                                        </div>\n                                    </Form>\n                                </div>\n                            </div>\n                        </div>\n                    );\n                }\n            }\n            </Formik>\n            <div className=\"col-lg-12\" style={{marginTop:\"20px\"}}>\n                {footerData && !loading ? \n                <div className=\"alert alert-danger animate__animated animate__tada animate_slower\" role=\"alert\">\n                    {msg}\n                </div>\n                : \n                <div className=\"col-lg-12\" style={{position:\"absolute\",top:\"40%\",left:\"40%\"}}>\n                    <ClipLoader color={'#ff0000'} loading={loading} size={200} />\n                </div>\n                }\n            </div>\n        </>\n        :null\n    );\n}\n\nasync function getFooterData(setDatabaseFooter)\n{\n    await API.get('/configurations/1')\n    .then(function (res) \n    {\n        if(res.data.status === 'success')\n        {\n            setDatabaseFooter(res.data.footer);\n        }\n        else\n        {\n            setDatabaseFooter('GudExams');\n        }\n        \n    })\n    .catch(function (error) \n    {\n        setDatabaseFooter('GudExams');\n    });\n}\n\nasync function updateFooterData(orgName,setFooterData,setMsg,setLoading,setFooterVal)\n{\n    setLoading(true);\n    const res = await API.put('/configurations',{\"orgName\" : orgName,\"type\":\"footerconfig\"});\n    if(res.data.status === 'success')\n    {\n        setFooterData(true);\n        setFooterVal(Math.random());\n        setTimeout(() => {\n            setFooterData(false);\n        }, 10000);\n    }\n    else\n    {\n        setFooterData(false);\n        setFooterVal(Math.random());\n    }\n    setLoading(false);\n    setMsg(res.data.message);\n}\n\nexport default ConfigureFooter;","/home/pawan/Desktop/react-template-hooks/src/Components/Institute/InstHome.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Institute/InstReports.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Institute/Reports/InstExamReport.js",["448","449"],"import React, { useState, useEffect, useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport API from '../../../api';\nimport Moment from 'react-moment';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport filterFactory, { textFilter } from 'react-bootstrap-table2-filter';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport {ShowContext} from '../../../App';\n\n\nfunction InstExamReport(props)\n{\n    const {setShow,setMsg}                          =   useContext(ShowContext);\n    const [allData, setAllData]                     =   useState([]);\n    let [loading, setLoading]                       =   useState(true);\n    const header                                    =   getHeader();\n    const data                                      =   getData(allData,props);\n\n    const options = {\n        sizePerPageList: [\n            {\n                text: '5', value: 5\n            }, \n            {\n                text: '10', value: 10\n            }, \n            {\n                text: '50', value: 50\n            },\n            {\n                text: '500', value: 500\n            }, \n            {\n                text: '1000', value: 1000\n            }, \n            {\n                text: '10000', value: 10000\n            }\n        ]\n    };\n   \n    useEffect(() => \n    {\n        getExamData(setAllData,setLoading,setShow,setMsg,props);\n    },[]);\n\n    return (\n        allData && allData.length > 0 && !loading ?\n      <div>\n        <div className=\"container-fluid\">\n            {(props.role==='' || props.role===undefined) &&(<h1 className=\"mt-4\">Institute Examination Report</h1>)}\n            {(props.role==='' || props.role===undefined) &&(<ol className=\"breadcrumb mb-4\">\n                <li className=\"breadcrumb-item active\">Institute Examination Report</li>\n            </ol>)}<br/>\n            <div className=\"row col-lg-12 animate__animated animate__fadeInDown animate_slower\" style={{overflow:\"auto\"}}>\n                \n                <BootstrapTable keyField='srno' data={ data } columns={ header } filter={ filterFactory() } pagination={ paginationFactory(options) }/>\n            </div>\n        </div>\n      </div>\n      : <div className=\"custom-loader\"></div>\n    );\n}\n\nfunction getHeader()\n{\n    let myHeader = [\n        { text: 'Sr No', dataField: 'srno'},\n        { text: 'Date & Start Time', dataField: 'datenstarttime',filter: textFilter()},\n        { text: 'Code', dataField: 'code',filter: textFilter()},\n        { text: 'Subject Name', dataField: 'subjectname',filter: textFilter()},\n        { text: 'Marks', dataField: 'marks'},\n        { text: 'Total Q\\'s', dataField: 'totquestions'},\n        { text: 'Duration', dataField: 'duration'},\n        { text: 'Total Students', dataField: 'totstud',filter: textFilter()},\n        { text: 'Total End', dataField: 'totend',filter: textFilter()},\n        { text: 'Total Inprogress', dataField: 'totinprogress',filter: textFilter()},\n        { text: 'Total Not Attend', dataField: 'totnotattend',filter: textFilter()},\n    ];\n    return myHeader;\n}\n\nfunction getData(allData,props)\n{\n    let myData      = [];\n    let i           = 1;\n    let paper_name  = '';\n\n        allData.map((data, index) => \n        {\n            if(allData[index] && Object.keys(allData[index]).length === 0 && allData[index].constructor === Object)\n            {\n                paper_name = data.paper_name;\n            }\n            else\n            {\n                paper_name= (props.role==='ADMIN') ?  <Link to={{pathname: '/instructions',state: {exam:data.exam,role:'ADMIN'}}}>{data.paper_name}</Link> :  data.paper_name ;\n            }\n            myData.push({\n                srno                    : i++,\n                datenstarttime          : <Moment format=\"YYYY-MM-DD H:mm:ss\">{data.from_date}</Moment>,\n                code                    : data.paper_code,\n                subjectname             : paper_name,\n                marks                   : data.marks,\n                totquestions            : data.questions,\n                duration                : data.duration,\n                totstud                 : data.allStudents,\n                totend                  : <Link to={{pathname: \"/instexamstudentreport\", state:{data:allData,paper_id:data.id,type:'over',paper_code:data.paper_code}}}>{data.overStudents}</Link>,\n                totinprogress           : <Link to={{pathname: \"/instexamstudentreport\", state:{data:allData,paper_id:data.id,type:'inprogress',paper_code:data.paper_code}}}> {data.inprogressStudents}</Link>,\n                totnotattend            : <Link to={{pathname: \"/instexamstudentreport\", state:{data:allData,paper_id:data.id,type:'notattend',paper_code:data.paper_code}}}>{data.unattendStudents}</Link>\n            })   \n        });\n    return myData;\n}\n\nasync function getExamData(setAllData,setLoading,setShow,setMsg,props)\n{\n    let res         = [];\n    if(props.role==='ADMIN')\n    {\n        if(props.instId === '')\n        {\n            setMsg('Please Select Institute to get its report...');\n            setShow(true);\n            setAllData([]);\n        }\n        //----------fetch exam report from institute id----------------------------------------\n        res = await API.get('exam/report/count',{params:{\"type\":\"instwise\",instId:props.instId}});\n        //----------------------------------------------------------------------------------\n    }\n    else\n    {\n        res = await API.get('exam/report/count');\n    }\n        if(res.data.status==='success')\n        {\n            if(res.data.data !== undefined)\n            {\n                setAllData(res.data.data);\n            }\n            else\n            {\n                setAllData([]);\n                setShow(true);\n                setMsg('No Program Data found for this Institute.Please Add data or Configure it Properly...');\n                setLoading(false);\n            }\n        }\n        else\n        {\n            setAllData([]);\n            setShow(true);\n            setMsg('Problem fetching data from Server...');\n            setLoading(false);\n        }\n        setLoading(false);\n}\n\n\nexport default InstExamReport;\n","/home/pawan/Desktop/react-template-hooks/src/Layout/MyContent.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Institute/Reports/InstExamStudtReport.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/AdminReports.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Reports/AdminExamReport.js",["450"],"import React,{useState,useEffect,useContext} from 'react';\nimport {ShowContext} from '../../../App';\nimport API from '../../../api';\nimport InstExamReport from '../../Institute/Reports/InstExamReport';\n\nfunction AdminExamReport()\n{\n    const [insts,setInsts]      =   useState([]);\n    const {setShow,setMsg}      =   useContext(ShowContext);\n    const [value, setValue]     =   useState();\n\n    useEffect(() => {\n        getInsts(setInsts,setShow,setMsg);\n    },[]);\n\n    return (\n      <>\n      {insts.length > 0 ?\n      <div>\n        <div className=\"container-fluid\">\n            <h1 className=\"mt-4\">Admin Exam Report</h1>\n            <ol className=\"breadcrumb mb-4\">\n                <li className=\"breadcrumb-item active\">Admin Exam Report</li>\n            </ol>\n            <div className=\"row col-lg-12 animate__animated animate__pulse animate_slower\">\n              <select id=\"inst_id\" name=\"inst_id\" className=\"form-control\" onChange={e => {setValue(e.currentTarget.value);}}>\n                <option value=\"\">Select Institute</option>\n                {\n                  insts.map(inst => \n                  (\n                    <option key={inst.uid} value={inst.username}>\n                      {inst.name}\n                    </option>\n                  ))\n                }\n              </select>\n            </div>\n        </div>\n      </div>\n      : null}\n      {value !== undefined ?\n      <div className=\"col-lg-12\">\n            <InstExamReport instId={value} role={'ADMIN'}/>\n      </div>\n      : null}\n      </>\n    );\n}\n\nasync function getInsts(setInsts,setShow,setMsg)\n{\n  await API.get('/user',{params: {\"role\":\"EADMIN\"}})\n  .then((res) => {\n    if(res.data.status === 'success')\n    {\n      setInsts(res.data.data);\n    }\n    else\n    {\n      setShow(true);\n      setMsg('Problem Fetching Data from Server');\n    }\n  });\n}\n\nexport default AdminExamReport;\n","/home/pawan/Desktop/react-template-hooks/src/Components/Student/SearchBox.js",["451"],"import React from 'react';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\n\nfunction SearchBox(props)\n{\n    return (\n    <>  \n        <Formik\n            initialValues={{ searchSubject:\"\"}}\n            onSubmit={(values,{ setSubmitting }) =>\n            {\n                props.getExamData(props.setUserRequest,props.setLoading,values.searchSubject);\n            }}\n            validationSchema={Yup.object().shape({\n                searchSubject:Yup.string()\n                .required(\"Subject Name is Required...\")\n            })}\n            >\n            {\n                props => \n                {\n                    const {\n                        values,\n                        touched,\n                        errors,\n                        handleChange,\n                        handleBlur,\n                        handleSubmit\n                    } = props;\n\n                    return (\n                        <div className=\"col-lg-2\">\n                            <form onSubmit={handleSubmit}>\n                                <div className=\"input-group\">\n                                    <input \n                                        className=\"form-control\" \n                                        type=\"text\" \n                                        name=\"searchSubject\" \n                                        id=\"searchSubject\" \n                                        placeholder=\"Subjects...\"\n                                        value ={values.searchSubject}\n                                        onBlur={handleBlur}\n                                        onChange={handleChange}\n                                    />\n                                    <div className=\"input-group-append\">\n                                    <button type=\"button\" className=\"btn btn-primary\" type=\"submit\"><i className=\"fas fa-search\"></i></button>\n                                    </div>\n                                    {errors.searchSubject && touched.searchSubject && (\n                                        <div className=\"alert alert-info col-lg-12\">{errors.searchSubject}</div>\n                                    )}\n                                </div>\n                            </form>\n                        </div>\n                    );\n                }\n            }\n        </Formik>\n    </>\n    );\n}\n\nexport default SearchBox;","/home/pawan/Desktop/react-template-hooks/src/Components/Exam/NextButton.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Exam/EndPreviewButton.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/GlobalController.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/GlobalControllerForm.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/UploadGlobalController.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Gadmin/GadminHome.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Lists/UserList.js",["452"],"import React,{useState,useEffect,useContext} from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport API from '../../../api';\nimport filterFactory, { textFilter } from 'react-bootstrap-table2-filter';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport {ShowContext} from '../../../App';\n\nconst UserList = (props) => \n{\n    const {setShow,setMsg}                          =   useContext(ShowContext);\n    let role                                        =   props.role;\n    let [loading, setLoading]                       =   useState(true);\n    let [userList, setUserList]                     =   useState([]);\n    const header                                    =   getHeader(userList);\n    const data                                      =   getData(userList,props.setMyList,props.myList,setShow,setMsg);\n    \n\n    const options = {\n        sizePerPageList: [\n            {\n                text: '5', value: 5\n            }, \n            {\n                text: '10', value: 10\n            }, \n            {\n                text: '50', value: 50\n            },\n            {\n                text: '500', value: 500\n            }, \n            {\n                text: '1000', value: 1000\n            }, \n            {\n                text: '10000', value: 10000\n            }\n        ]\n    };\n\n    useEffect(() => \n    {\n        getUsers(role,setUserList,setLoading);\n    },[props.myList,role]);\n\n    return (\n        userList.length > 0 && !loading ?\n        <div className=\"col-lg-12\" style={{overflow:\"auto\"}}>\n            <BootstrapTable keyField='srno' data={ data } columns={ header } filter={ filterFactory() } pagination={ paginationFactory(options) }/>\n        </div>\n        :   \n        null\n    );\n};\n\nasync function getUsers(role,setUserList,setLoading)\n{\n    await API.get('/user', {params: {'role': role}})\n    .then(function (res) \n    {\n        setUserList(res.data.data);\n        setLoading(false);\n    })\n    .catch(function (error) \n    {\n        setUserList(undefined);\n        setLoading(false);\n    });   \n}\n\nfunction getHeader(userList)\n{\n    let myHeader = [\n        { text: 'Sr No', dataField: 'srno'},\n        { text: 'User Name', dataField: 'username',filter: textFilter()},\n        { text: 'Org', dataField: 'org',filter: textFilter()},\n        { text: 'Role', dataField: 'role',filter: textFilter()},\n        { text: 'Mobile', dataField: 'mobile',filter: textFilter()},\n        { text: 'Email', dataField: 'email',filter: textFilter()},\n        { text: 'Delete', dataField: 'delete'},\n    ];\n    return myHeader;\n}\n\nfunction getData(userList,setMyList,myList,setShow,setMsg)\n{\n    let myData = [];\n    let i = 1;\n\n    userList.map((data, index) => \n    {\n        myData.push({\n            srno                    : i++,\n            username                : data.username,\n            org                     : data.college_name,\n            role                    : data.role,\n            mobile                  : data.mobile,\n            email                   : data.email,\n            delete                  : <button className=\"btn btn-danger\" onClick={()=>{deleteRecord(data.uid,setMyList,myList,setShow,setMsg);}}>Delete</button>\n        });\n    })\n\n    return myData;\n}\n\nasync function deleteRecord(uid,setMyList,myList,setShow,setMsg)\n{\n    await API.delete('/user/'+uid)\n    .then(function (res) \n    {\n        if(res.data.status==='success')\n        {\n            setShow(true);\n            setMsg(res.data.message);\n            setMyList(!myList);\n            setTimeout(()=>{setShow(false)}, 10000);\n        }\n    })\n    .catch(function (error) \n    {\n        setShow(true);\n        setMsg(error.response.data.message);\n        setTimeout(()=>{setShow(false)}, 10000);\n    });\n}\n\nexport default UserList;","/home/pawan/Desktop/react-template-hooks/src/Components/Student/CountDownButton.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/ClusterController.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/ClusterControllerForm.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/UploadClusterController.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Cadmin/CadminHome.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Cadmin/AddInst.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Cadmin/AddInstForm.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Cadmin/UploadInst.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/InstClusterAlloc.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/InstList.js",["453"],"import React,{useEffect} from 'react';\nimport Insts from './Insts';\nimport API from '../../../api';\nimport {ItemTypes} from '../../../utils/Items';\nimport {useDrop} from 'react-dnd';\n\nconst InstList = (props) => {\n    let style                                   = {};\n\n    const [{isOver}, drop]                      = useDrop({\n        accept: ItemTypes.CARD,\n        drop(item, monitor) {\n            const didDrop = monitor.didDrop();\n            if (!didDrop)\n            {\n                let targetId = props.uid;\n                let sourceId = item.uid;\n                searchAndUpdate(sourceId,targetId,props.instList,props.setInstList);\n            } \n            else\n            {\n                return;\n            }\n        },\n        collect: monitor => ({\n            isOver: !! monitor.isOver(),\n        })\n    });\n\n    let instList                                = props.instList;\n    \n\n    if(isOver)\n    {\n        style = {backgroundColor:\"aqua\"};\n    }\n\n    return (\n        <div className=\"col-lg-12\" style={{overflow:\"auto\"}}>\n            <div className=\"card mb-4\">\n                <div className=\"card-header bg-warning\">\n                    <i className=\"fas fa-university mr-1\"></i>\n                    Institute List\n                </div>\n                <div className=\"card-body\" style={{height:\"350px\", ...style}} ref={drop}>\n                    {instList.map((institute,index) => {\n                        return institute.region === null ?\n                        <Insts key={institute.uid} id={institute.uid} username={institute.username} instName={institute.college_name} instList={props.instList} setInstList={props.setInstList}/>\n                        :null\n                    })}\n                </div>\n                <div className=\"card-footer\">\n                </div>\n            </div>\n        </div>\n    );\n};\n\nasync function searchAndUpdate(sourceId,targetId,instList,setInstList)\n{\n    let dummyInstList = [...instList];\n    for(let i = 0;i < dummyInstList.length;i++)\n    {\n        if(sourceId === dummyInstList[i].uid)\n        {\n            dummyInstList[i].region = targetId;\n        }\n    }\n    setInstList(dummyInstList);\n\n    await API.put('/user/'+sourceId, {'region':targetId})\n    .then(function (res) \n    {\n        console.log(res.data.data);\n    })\n    .catch(function (error) \n    {\n            \n    });\n}\n\n\nexport default InstList;","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/RbteList.js",["454"],"import React from 'react';\nimport Rbte from './Rbtes';\n\nconst RbteList = (props) => {\n    let clusterList                             = props.clusterList;\n    let instList                                = props.instList;\n    \n    return (\n        <>\n        {clusterList.map((rbte,index) => (\n        <div className=\"col-lg-3\" style={{overflow:\"auto\"}} key={rbte.uid}>\n            <Rbte username={rbte.username} uid={rbte.uid}  instList={props.instList} setInstList={props.setInstList}/>\n        </div>\n        ))}\n        </>\n    );\n};\n\nexport default RbteList;","/home/pawan/Desktop/react-template-hooks/src/utils/Items.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/Insts.js",["455"],"import React from 'react';\nimport {useDrag} from 'react-dnd';\nimport {ItemTypes} from '../../../utils/Items';\n\nconst Insts = (props) => {\n\n    const [{ isDragging }, drag] = useDrag({\n        item: {\n            type:ItemTypes.CARD,\n            uid:props.id,\n            instId:props.username,\n            instName:props.instName,\n        },\n        collect: monitor => ({\n            isDragging : !!monitor.isDragging()\n        }),\n    });\n\n    return (\n        <div className=\"alert alert-danger\" role=\"alert\"  ref={drag} style={{fontSize:\"10px\"}}>\n            ({props.username}) <b>{props.instName}</b>\n        </div>\n    );\n};\n\nexport default Insts;","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/Rbtes.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/GlobClusterAlloc.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/ClusterList.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/GlobList.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/Cluster.js",["456"],"import React from 'react';\nimport {useDrag} from 'react-dnd';\nimport {ItemTypes} from '../../../utils/Items';\n\nconst Cluster = (props) => {\n\n    const [{ isDragging }, drag] = useDrag({\n        item: {\n            type:ItemTypes.CARD,\n            uid:props.uid,\n            instId:props.username,\n        },\n        collect: monitor => ({\n            isDragging : !!monitor.isDragging()\n        }),\n    });\n    return (\n        <div className=\"alert alert-danger\" role=\"alert\"  ref={drag}>\n            {props.username} <b>({props.uid})</b>\n        </div>\n    );\n};\n\nexport default Cluster;","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/Glob.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/ProgramMaster.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/ProgramMasterForm.js",["457","458","459","460"],"import React, {useState,useEffect,useContext} from 'react';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport API from '../../../api';\nimport {ShowContext} from '../../../App';\n\nconst ProgramMasterForm = (props) => {\n    const [myMsg, setMyMsg]         = useState('');\n    const [loading, setLoading]     = useState(false);\n    const myFlag                    = useFlag(setLoading);\n    const myInitialValues           = { progCode: '', progName: '', flag:myFlag , instId:''};\n    const {setShow,setMsg}          = useContext(ShowContext);\n    const [insts,setInsts]          = useState([]);\n    const [value, setValue]         = useState();\n\n    useEffect(() => {\n        if(myFlag !== undefined && myFlag !== 1)\n        {\n            getInsts(setInsts,setShow,setMsg);\n        }\n    },[myFlag,setShow,setMsg]);\n\n    return (\n        !loading && myFlag !== undefined ? <Formik \n        initialValues= {myInitialValues}\n        onSubmit= {async (values,actions) => \n        {\n            setMyMsg('');\n            registerProgram(values.progCode, values.progName,setLoading,setMyMsg,props.setMyList,props.myList,values.flag,values.instId);\n            actions.setSubmitting(false);\n            actions.resetForm({\n            values: {\n                        progCode: '', progName: '', flag:myFlag, instId:''\n                    },\n            });\n        }}\n        validationSchema = {Yup.object({\n            progCode: Yup.string()\n            .required(\"Program Code is Required\"),\n            progName: Yup.string()\n            .required(\"Program Name is Required.\"),\n            flag: Yup.number(),\n            instId: Yup.string().when('flag', {\n                is:0,\n                then: Yup.string().required(\"Inst ID is Required\")\n            })\n        })}\n        >\n        {\n            props => {\n                const {\n                    values,\n                    touched,\n                    errors,\n                    isSubmitting,\n                    handleChange,\n                    handleBlur,\n                    handleSubmit\n                } = props;\n                return (\n                <div className=\"col-xl-8\">\n                    <form id=\"form-Prog\" method=\"post\" className=\"form-horizontal\" onSubmit={handleSubmit}>\n                        <div className=\"card mb-4\">\n                            <div className=\"card-header\">\n                                <i className=\"fas fa-address-card mr-1\"/>\n                                Add Program Form\n                            </div>\n                            <div className=\"card-body\">\n                                    <div className=\"form-group\">\n                                        <div className=\"col-lg-12 row\">\n                                            <div className=\"col-lg-4\">\n                                                Enter Program Code\n                                            </div>\n                                            <div className=\"col-lg-8\">\n                                                <input type=\"text\" id=\"progCode\" name=\"progCode\" onChange={handleChange} value={values.progCode} onBlur={handleBlur} className=\"form-control\" placeholder=\"Enter Program Code...\" />\n\n                                                {errors.progCode ? <div className=\"alert alert-info\">{errors.progCode}</div> : null}\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div className=\"form-group\">\n                                        <div className=\"col-lg-12 row\">\n                                            <div className=\"col-lg-4\">\n                                                Enter Program Name\n                                            </div>\n                                            <div className=\"col-lg-8\">\n                                                <input type=\"text\" id=\"progName\" name=\"progName\" onChange={handleChange} value={values.progName} onBlur={handleBlur} className=\"form-control\" placeholder=\"Enter Program Name...\" />\n\n                                                {errors.progName ? <div className=\"alert alert-info\">{errors.progName}</div> : null}\n                                            </div>\n                                        </div>\n                                    </div>\n\n                                    {myFlag === 0 && insts.length > 0 && (\n                                    <div className=\"form-group\">\n                                        <div className=\"col-lg-12 row\">\n                                            <div className=\"col-lg-4\">\n                                                Enter Inst Id\n                                            </div>\n                                            <div className=\"col-lg-8\">\n                                            <select id=\"instId\" name=\"instId\" className=\"form-control\" onChange={handleChange} onBlur={handleBlur} value={values.instId}>\n                                                <option value=\"\">Select Institute</option>\n                                                {\n                                                insts.map(inst => \n                                                (\n                                                    <option key={inst.uid} value={inst.uid}>\n                                                    ({inst.username}) {inst.college_name}\n                                                    </option>\n                                                ))\n                                                }\n                                            </select>\n\n                                            {errors.instId ? <div className=\"alert alert-info\">{errors.instId}</div> : null}\n                                            </div>\n                                        </div>\n                                    </div>)}\n                            </div>\n                            <div className=\"card-footer\">\n                                <div className=\"form-group\">\n                                    <center>\n                                        <button type=\"submit\" className=\"btn btn-primary\" disabled={isSubmitting}>Submit</button>\n                                    </center>\n                                </div>\n                                \n                                {myMsg !== '' &&(\n                                    <div className=\"alert alert-dark animate__animated animate__tada animate_slower\">{myMsg}</div>)}\n\n                                {loading && (\n                                    <div className=\"custom-loader\"></div>\n                                )}\n                            </div>\n                        </div>\n                    </form>\n                </div>\n                );\n            }\n        }\n        </Formik>\n        :null\n    );\n};\n\nasync function registerProgram(progCode,progName,setLoading,setMyMsg,setMyList,myList,flag,instId)\n{\n    setLoading(true);\n    await API.post('/program', {'progCode': progCode,'progName': progName,'flag':flag,'instId':instId})\n    .then(function (res) \n    {\n        setLoading(false);\n        setMyMsg(res.data.message);\n        setMyList(!myList);\n        setTimeout(()=>{setMyMsg('')}, 10000);\n    })\n    .catch(function (error) \n    {\n        setLoading(false);\n        setMyMsg(error.response.data.message);\n        setTimeout(()=>{setMyMsg('')}, 10000);\n    });   \n}\n\nfunction useFlag(setLoading)\n{\n    const [flag, setFlag]   =    useState();\n\n    useEffect(() => {updateFlag();}, []);\n\n    async function updateFlag()\n    {\n        setLoading(true);\n        const res = await API.get('/settings',{params: {\"type\":\"login\"}});\n        if(res.data.status==='success')\n        {\n            setFlag(res.data.flag);\n            setLoading(false);\n        }\n    }\n\n    return flag;\n}\n\nasync function getInsts(setInsts,setShow,setMsg)\n{\n  await API.get('/user',{params: {\"role\":\"EADMIN\"}})\n  .then((res) => {\n    if(res.data.status === 'success')\n    {\n      setInsts(res.data.data);\n    }\n    else\n    {\n      setShow(true);\n      setMsg('Problem Fetching Data from Server');\n    }\n  });\n}\n\nexport default ProgramMasterForm;","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/UploadPrograms.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/ProgramList.js",["461"],"import React,{useState,useEffect,useContext} from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport API from '../../../api';\nimport filterFactory, { textFilter } from 'react-bootstrap-table2-filter';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport {ShowContext} from '../../../App';\n\nconst ProgramList = (props) => \n{\n    const {setShow,setMsg}                          =   useContext(ShowContext);\n    let role                                        =   props.role;\n    let [loading, setLoading]                       =   useState(true);\n    let [programList, setProgramList]               =   useState([]);\n    const header                                    =   getHeader(programList);\n    const data                                      =   getData(programList,props.setMyList,props.myList,setShow,setMsg);\n    \n\n    const options = {\n        sizePerPageList: [\n            {\n                text: '5', value: 5\n            }, \n            {\n                text: '10', value: 10\n            }, \n            {\n                text: '50', value: 50\n            },\n            {\n                text: '500', value: 500\n            }, \n            {\n                text: '1000', value: 1000\n            }, \n            {\n                text: '10000', value: 10000\n            }\n        ]\n    };\n\n    useEffect(() => \n    {\n        getUsers(setProgramList,setLoading);\n    },[props.myList,role]);\n\n    return (\n        programList.length > 0 && !loading ?\n        <div className=\"col-lg-12\" style={{overflow:\"auto\"}}>\n            <BootstrapTable keyField='srno' data={ data } columns={ header } filter={ filterFactory() } pagination={ paginationFactory(options) }/>\n        </div>\n        :   \n        null\n    );\n};\n\nasync function getUsers(setProgramList,setLoading)\n{\n    await API.get('/program',{params:{'type':'all'}})\n    .then(function (res) \n    {\n        setProgramList(res.data.data);\n        setLoading(false);\n    })\n    .catch(function (error) \n    {\n        setProgramList(undefined);\n        setLoading(false);\n    });   \n}\n\nfunction getHeader(programList)\n{\n    let myHeader = [\n        { text: 'Sr No', dataField: 'srno'},\n        { text: 'Program Code', dataField: 'programCode',filter: textFilter()},\n        { text: 'Program Name', dataField: 'programName',filter: textFilter()},\n        { text: 'Delete', dataField: 'delete'},\n    ];\n    return myHeader;\n}\n\nfunction getData(programList,setMyList,myList,setShow,setMsg)\n{\n    let myData = [];\n    let i = 1;\n\n    programList.map((data, index) => \n    {\n        myData.push({\n            srno                    : i++,\n            programCode             : data.program_code,\n            programName             : data.program_name,\n            delete                  : <button className=\"btn btn-danger\" onClick={()=>{deleteRecord(data.id,setMyList,myList,setShow,setMsg);}}>Delete</button>\n        });\n    })\n\n    return myData;\n}\n\nasync function deleteRecord(id,setMyList,myList,setShow,setMsg)\n{\n    await API.delete('/program/'+id)\n    .then(function (res) \n    {\n        if(res.data.status==='success')\n        {\n            setShow(true);\n            setMsg(res.data.message);\n            setMyList(!myList);\n            setTimeout(()=>{setShow(false)}, 10000);\n        }\n    })\n    .catch(function (error) \n    {\n        setShow(true);\n        setMsg(error.response.data.message);\n        setTimeout(()=>{setShow(false)}, 10000);\n    });\n}\n\nexport default ProgramList;","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/SubjectMaster.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/SubjectMasterForm.js",["462"],"import React, {useState,useEffect,useContext} from 'react';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport API from '../../../api';\nimport {ShowContext} from '../../../App';\n\nconst SubjectMasterForm = (props) => {\n    const [myMsg, setMyMsg]         = useState('');\n    const [loading, setLoading]     = useState(false);\n    const myFlag                    = useFlag(setLoading);\n    const myInitialValues           = { paperCode: '', paperName: '', flag:myFlag , programId:'', instId:'',semester:''};\n    const {setShow,setMsg}          = useContext(ShowContext);\n    const [insts,setInsts]          = useState([]);\n    const [programs,setPrograms]    = useState([]);\n\n    useEffect(() => {\n        if(myFlag !== undefined && myFlag !== 1)\n        {\n            getInsts(setInsts,setShow,setMsg);\n        }\n        getPrograms(setPrograms,myFlag,setShow,setMsg);\n    },[myFlag,setShow,setMsg]);\n\n    return (\n        !loading && myFlag !== undefined ? <Formik \n        initialValues= {myInitialValues}\n        onSubmit= {async (values,actions) => \n        {\n            setMyMsg('');\n            saveSubject(values,setLoading,setShow,setMsg,setMyMsg,props.setMyList,props.myList);\n            actions.setSubmitting(false);\n            actions.resetForm({\n            values: {\n                        paperCode: '', paperName: '', flag:myFlag , programId:'', instId:'',semester:''\n                    },\n            });\n        }}\n        validationSchema = {Yup.object({\n            paperCode: Yup.string()\n            .required(\"Paper Code is Required\"),\n            paperName: Yup.string()\n            .required(\"Paper Name is Required.\"),\n            flag: Yup.number(),\n            programId: Yup.number()\n            .required(\"Program is Required\"),\n            instId: Yup.string().when('flag', {\n                is:0,\n                then: Yup.string().required(\"Inst ID is Required\")\n            }),\n            semester: Yup.number()\n            .required('Semester is Required'),\n        })}\n        >\n        {\n            props => {\n                const {\n                    values,\n                    errors,\n                    isSubmitting,\n                    handleChange,\n                    handleBlur,\n                    handleSubmit\n                } = props;\n                return (\n                <div className=\"col-xl-8\">\n                    <form id=\"form-Prog\" method=\"post\" className=\"form-horizontal\" onSubmit={handleSubmit}>\n                        <div className=\"card mb-4\">\n                            <div className=\"card-header\">\n                                <i className=\"fas fa-address-card mr-1\"/>\n                                Add Subject Form\n                            </div>\n                            <div className=\"card-body\">\n                                    <div className=\"form-group\">\n                                        <div className=\"col-lg-12 row\">\n                                            <div className=\"col-lg-4\">\n                                                Enter Paper Code\n                                            </div>\n                                            <div className=\"col-lg-8\">\n                                                <input type=\"text\" id=\"paperCode\" name=\"paperCode\" onChange={handleChange} value={values.paperCode} onBlur={handleBlur} className=\"form-control\" placeholder=\"Enter Paper Code...\" />\n\n                                                {errors.paperCode ? <div className=\"alert alert-info\">{errors.paperCode}</div> : null}\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div className=\"form-group\">\n                                        <div className=\"col-lg-12 row\">\n                                            <div className=\"col-lg-4\">\n                                                Enter Program Name\n                                            </div>\n                                            <div className=\"col-lg-8\">\n                                                <input type=\"text\" id=\"paperName\" name=\"paperName\" onChange={handleChange} value={values.paperName} onBlur={handleBlur} className=\"form-control\" placeholder=\"Enter Program Name...\" />\n\n                                                {errors.paperName ? <div className=\"alert alert-info\">{errors.paperName}</div> : null}\n                                            </div>\n                                        </div>\n                                    </div>\n\n                                    {myFlag === 0 && insts.length > 0 && (\n                                    <div className=\"form-group\">\n                                        <div className=\"col-lg-12 row\">\n                                            <div className=\"col-lg-4\">\n                                                Enter Inst Id\n                                            </div>\n                                            <div className=\"col-lg-8\">\n                                            <select id=\"instId\" name=\"instId\" className=\"form-control\" onChange={(e) => {\n                                                setLoading(true);\n                                                handleChange(e);\n                                                getPrograms1(setPrograms,e.target.value,setShow,setMsg);\n                                                setLoading(false);\n                                            }} onBlur={handleBlur} value={values.instId}>\n                                                <option value=\"\">Select Institute</option>\n                                                {\n                                                insts.map(inst => \n                                                (\n                                                    <option key={inst.uid} value={inst.uid}>\n                                                    ({inst.username}) {inst.college_name}\n                                                    </option>\n                                                ))\n                                                }\n                                            </select>\n\n                                            {errors.instId ? <div className=\"alert alert-info\">{errors.instId}</div> : null}\n                                            </div>\n                                        </div>\n                                    </div>)}\n\n                                    <div className=\"form-group\">\n                                        <div className=\"col-lg-12 row\">\n                                            <div className=\"col-lg-4\">\n                                                Select Program\n                                            </div>\n                                            <div className=\"col-lg-8\">\n                                            <select id=\"programId\" name=\"programId\" className=\"form-control\" onChange={handleChange} onBlur={handleBlur} value={values.programId}>\n                                                <option value=\"\">Select Program</option>\n                                                {\n                                                programs.map(program => \n                                                (\n                                                    <option key={program.id} value={program.id}>\n                                                    ({program.program_code}) {program.program_name}\n                                                    </option>\n                                                ))\n                                                }\n                                            </select>\n\n                                            {errors.programId ? <div className=\"alert alert-info\">{errors.programId}</div> : null}\n                                            </div>\n                                        </div>\n                                    </div>\n\n                                    <div className=\"form-group\">\n                                        <div className=\"col-lg-12 row\">\n                                            <div className=\"col-lg-4\">\n                                                Select Semester\n                                            </div>\n                                            <div className=\"col-lg-8\">\n                                            <select id=\"semester\" name=\"semester\" className=\"form-control\" onChange={handleChange} onBlur={handleBlur} value={values.semester}>\n                                                <option value=\"\">Select Semester</option>\n                                                <option value=\"1\">1</option>\n                                                <option value=\"2\">2</option>\n                                                <option value=\"3\">3</option>\n                                                <option value=\"4\">4</option>\n                                                <option value=\"5\">5</option>\n                                                <option value=\"6\">6</option>\n                                                <option value=\"7\">7</option>\n                                                <option value=\"8\">8</option>\n                                            </select>\n\n                                            {errors.semester ? <div className=\"alert alert-info\">{errors.semester}</div> : null}\n                                            </div>\n                                        </div>\n                                    </div>\n                            </div>\n                            <div className=\"card-footer\">\n                                <div className=\"form-group\">\n                                    <center>\n                                        <button type=\"submit\" className=\"btn btn-primary\" disabled={isSubmitting}>Submit</button>\n                                    </center>\n                                </div>\n                                \n                                {myMsg !== '' &&(\n                                    <div className=\"alert alert-dark animate__animated animate__tada animate_slower\">{myMsg}</div>)}\n\n                                {loading && (\n                                    <div className=\"custom-loader\"></div>\n                                )}\n                            </div>\n                        </div>\n                    </form>\n                </div>\n                );\n            }\n        }\n        </Formik>\n        :null\n    );\n};\n\nfunction useFlag(setLoading)\n{\n    const [flag, setFlag]   =    useState();\n\n    useEffect(() => {updateFlag();}, []);\n\n    async function updateFlag()\n    {\n        setLoading(true);\n        const res = await API.get('/settings',{params: {\"type\":\"login\"}});\n        if(res.data.status==='success')\n        {\n            setFlag(res.data.flag);\n            setLoading(false);\n        }\n    }\n\n    return flag;\n}\n\nasync function getInsts(setInsts,setShow,setMsg)\n{\n  await API.get('/user',{params: {\"role\":\"EADMIN\"}})\n  .then((res) => {\n    if(res.data.status === 'success')\n    {\n      setInsts(res.data.data);\n    }\n    else\n    {\n      setShow(true);\n      setMsg('Problem Fetching Data from Server');\n    }\n  });\n}\n\nasync function getPrograms(setPrograms,myFlag,setShow,setMsg)\n{\n    await API.get('/program',{params: {\"type\":\"all\"}})\n        .then((res) => \n        {\n            if(res.data.status === 'success')\n            {\n                setPrograms(res.data.data);\n            }\n            else\n            {\n                setShow(true);\n                setMsg('Problem Fetching Data from Server');\n            }\n        });\n}\n\nasync function getPrograms1(setPrograms,instUid,setShow,setMsg)\n{\n    await API.get('/program',{params: {\"type\":\"instUid\",\"instUid\":instUid}})\n        .then((res) => \n        {\n            if(res.data.status === 'success')\n            {\n                setPrograms(res.data.data);\n            }\n            else\n            {\n                setShow(true);\n                setMsg('Problem Fetching Data from Server');\n            }\n        });\n}\n\nasync function saveSubject(values,setLoading,setShow,setMsg,setMyMsg,setMyList,myList)\n{\n    setLoading(true);\n    let paperCode   = values.paperCode;\n    let paperName   = values.paperName;\n    let programId   = values.programId;\n    let instId      = values.instId;\n    let semester    = values.semester;\n\n    await API.post('/subject',{'paperCode':paperCode,'paperName':paperName,'programId':programId,'instId':instId,'semester':semester})\n        .then((res) => \n        {\n            if(res.data.status === 'success')\n            {\n                setMyMsg(res.data.message);\n                setLoading(false);\n                setMyList(!myList);\n            }\n            else\n            {\n                setMyMsg(res.data.message);\n                setLoading(false);\n            }\n        })\n        .catch(function (error) {\n            setMyMsg(error.response.data.message);\n            setLoading(false);\n        });\n\n}\n\nexport default SubjectMasterForm;","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/UploadSubjects.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/SubjectList.js",["463"],"import React,{useState,useEffect,useContext} from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport API from '../../../api';\nimport filterFactory, { textFilter } from 'react-bootstrap-table2-filter';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport {ShowContext} from '../../../App';\nimport { Link } from 'react-router-dom';\n\nconst SubjectList = (props) => \n{\n    const {setShow,setMsg}                          =   useContext(ShowContext);\n    let [loading, setLoading]                       =   useState(true);\n    let [subjectList, setSubjectList]               =   useState([]);\n    const header                                    =   getHeader();\n    const data                                      =   getData(subjectList,props.setMyList,props.myList,setShow,setMsg);\n    \n\n    const options = {\n        sizePerPageList: [\n            {\n                text: '5', value: 5\n            }, \n            {\n                text: '10', value: 10\n            }, \n            {\n                text: '50', value: 50\n            },\n            {\n                text: '500', value: 500\n            }, \n            {\n                text: '1000', value: 1000\n            }, \n            {\n                text: '10000', value: 10000\n            }\n        ]\n    };\n\n    useEffect(() => \n    {\n        getSubjects(setSubjectList,setLoading);\n    },[props.myList]);\n\n    return (\n        subjectList.length > 0 && !loading ?\n        <div className=\"col-lg-12\" style={{overflow:\"auto\"}}>\n            <BootstrapTable keyField='srno' data={ data } columns={ header } filter={ filterFactory() } pagination={ paginationFactory(options) }/>\n        </div>\n        :   \n        null\n    );\n};\n\nasync function getSubjects(setSubjectList,setLoading)\n{\n    await API.get('/subject',{params:{'type':'all'}})\n    .then(function (res) \n    {\n        setSubjectList(res.data.data);\n        console.log(res.data.data);\n        setLoading(false);\n    })\n    .catch(function (error) \n    {\n        setSubjectList(undefined);\n        setLoading(false);\n    });   \n}\n\nfunction getHeader()\n{\n    let myHeader = [\n        { text: 'Sr No', dataField: 'srno'},\n        { text: 'Paper Code', dataField: 'paperCode',filter: textFilter()},\n        { text: 'Paper Name', dataField: 'paperName',filter: textFilter()},\n        { text: 'Add Topic Data', dataField: 'topicData'},\n        { text: 'Delete', dataField: 'delete'},\n    ];\n    return myHeader;\n}\n\nfunction getData(subjectList,setMyList,myList,setShow,setMsg)\n{\n    let myData = [];\n    let i = 1;\n    subjectList.map((data, index) => \n    {\n        myData.push({\n            srno                    : i++,\n            paperCode               : data.paper_code,\n            paperName               : data.paper_name,\n            topicData               : <Link className=\"nav-link\" to={{pathname: \"/addTopic\",state:{paperId: data.id,paperCode:data.paper_code,paperName:data.paper_name}}}>Add Topics</Link>,\n            delete                  : <button className=\"btn btn-danger\" onClick={()=>{deleteRecord(data.id,setMyList,myList,setShow,setMsg);}}>Delete</button>\n        });\n    })\n\n    return myData;\n}\n\nasync function deleteRecord(id,setMyList,myList,setShow,setMsg)\n{\n    await API.delete('/subject/'+id)\n    .then(function (res) \n    {\n        if(res.data.status==='success')\n        {\n            setShow(true);\n            setMsg(res.data.message);\n            setMyList(!myList);\n            setTimeout(()=>{setShow(false)}, 10000);\n        }\n    })\n    .catch(function (error) \n    {\n        setShow(true);\n        setMsg(error.response.data.message);\n        setTimeout(()=>{setShow(false)}, 10000);\n    });\n}\n\nexport default SubjectList;","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/StudentMaster.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/StudentMasterForm.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/UploadStudents.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/StudentList.js",["464"],"import React,{useState,useEffect,useContext} from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport API from '../../../api';\nimport filterFactory, { textFilter } from 'react-bootstrap-table2-filter';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport {ShowContext} from '../../../App';\n\nconst StudentList = (props) => \n{\n    const {setShow,setMsg}                          =   useContext(ShowContext);\n    let [loading, setLoading]                       =   useState(true);\n    let [studentList, setStudentList]               =   useState([]);\n    const header                                    =   getHeader();\n    const data                                      =   getData(studentList,props.setMyList,props.myList,setShow,setMsg);\n    \n\n    const options = {\n        sizePerPageList: [\n            {\n                text: '5', value: 5\n            }, \n            {\n                text: '10', value: 10\n            }, \n            {\n                text: '50', value: 50\n            },\n            {\n                text: '500', value: 500\n            }, \n            {\n                text: '1000', value: 1000\n            }, \n            {\n                text: '10000', value: 10000\n            }\n        ]\n    };\n\n    useEffect(() => \n    {\n        getStudents(setStudentList,setLoading);\n    },[props.myList]);\n\n    return (\n        studentList.length > 0 && !loading ?\n        <div className=\"col-lg-12\" style={{overflow:\"auto\"}}>\n            <BootstrapTable keyField='srno' data={ data } columns={ header } filter={ filterFactory() } pagination={ paginationFactory(options) }/>\n        </div>\n        :   \n        null\n    );\n};\n\nasync function getStudents(setStudentList,setLoading)\n{\n    await API.get('/user', {params: {'role': 'STUDENT'}})\n    .then(function (res) \n    {\n        setStudentList(res.data.data);\n        console.log(res.data.data);\n        setLoading(false);\n    })\n    .catch(function (error) \n    {\n        setStudentList(undefined);\n        setLoading(false);\n    });   \n}\n\nfunction getHeader()\n{\n    let myHeader = [\n        { text: 'Sr No', dataField: 'srno'},\n        { text: 'Enrollment No', dataField: 'enrollno',filter: textFilter()},\n        { text: 'Student Name', dataField: 'studname',filter: textFilter()},\n        { text: 'Inst Id', dataField: 'instid',filter: textFilter()},\n        { text: 'Semester', dataField: 'semester',filter: textFilter()},\n        { text: 'Mobile No', dataField: 'mobile',filter: textFilter()},\n        { text: 'Email Address', dataField: 'email',filter: textFilter()},\n        { text: 'Delete', dataField: 'delete'},\n    ];\n    return myHeader;\n}\n\nfunction getData(studentList,setMyList,myList,setShow,setMsg)\n{\n    let myData = [];\n    let i = 1;\n    studentList.map((data, index) => \n    {\n        myData.push({\n            srno                    : i++,\n            enrollno                : data.username,\n            studname                : data.name,\n            instid                  : data.inst_id,\n            semester                : data.semester,\n            mobile                  : data.mobile,\n            email                   : data.email,\n            delete                  : <button className=\"btn btn-danger\" onClick={()=>{deleteRecord(data.uid,setMyList,myList,setShow,setMsg);}}>Delete</button>\n        });\n    })\n\n    return myData;\n}\n\nasync function deleteRecord(uid,setMyList,myList,setShow,setMsg)\n{\n    await API.delete('/user/'+uid)\n    .then(function (res) \n    {\n        if(res.data.status==='success')\n        {\n            setShow(true);\n            setMsg(res.data.message);\n            setMyList(!myList);\n            setTimeout(()=>{setShow(false)}, 10000);\n        }\n    })\n    .catch(function (error) \n    {\n        setShow(true);\n        setMsg(error.response.data.message);\n        setTimeout(()=>{setShow(false)}, 10000);\n    });\n}\n\nexport default StudentList;","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/StudSubjectAlloc.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/UploadStudentSubjectAlloc.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/StudentSubjectList.js",["465"],"import React,{useState,useEffect,useContext} from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport API from '../../../api';\nimport filterFactory, { textFilter } from 'react-bootstrap-table2-filter';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport {ShowContext} from '../../../App';\n\nconst StudentSubjectList = (props) => \n{\n    const {setShow,setMsg}                          =   useContext(ShowContext);\n    let [loading, setLoading]                       =   useState(true);\n    let [studentList, setStudentList]               =   useState([]);\n    const header                                    =   getHeader();\n    const data                                      =   getData(studentList,props.setMyList,props.myList,setShow,setMsg);\n    \n\n    const options = {\n        sizePerPageList: [\n            {\n                text: '5', value: 5\n            }, \n            {\n                text: '10', value: 10\n            }, \n            {\n                text: '50', value: 50\n            },\n            {\n                text: '500', value: 500\n            }, \n            {\n                text: '1000', value: 1000\n            }, \n            {\n                text: '10000', value: 10000\n            }\n        ]\n    };\n\n    useEffect(() => \n    {\n        getStudentSubjects(setStudentList,setLoading);\n    },[props.myList]);\n\n    return (\n        studentList.length > 0 && !loading ?\n        <div className=\"col-lg-12\" style={{overflow:\"auto\"}}>\n            <BootstrapTable keyField='srno' data={ data } columns={ header } filter={ filterFactory() } pagination={ paginationFactory(options) }/>\n        </div>\n        :   \n        null\n    );\n};\n\nasync function getStudentSubjects(setStudentList,setLoading)\n{\n    await API.get('/exam')\n    .then(function (res) \n    {\n        setStudentList(res.data.data);\n        setLoading(false);\n    })\n    .catch(function (error) \n    {\n        setStudentList(undefined);\n        setLoading(false);\n    });   \n}\n\nfunction getHeader()\n{\n    let myHeader = [\n        { text: 'Sr No', dataField: 'srno'},\n        { text: 'Enrollment No', dataField: 'enrollno',filter: textFilter()},\n        { text: 'Student Name', dataField: 'studname',filter: textFilter()},\n        { text: 'Inst Id', dataField: 'instid',filter: textFilter()},\n        { text: 'Semester', dataField: 'semester',filter: textFilter()},\n        { text: 'Program', dataField: 'program',filter: textFilter()},\n        { text: 'Subject', dataField: 'subject',filter: textFilter()},\n        { text: 'Delete', dataField: 'delete'},\n    ];\n    return myHeader;\n}\n\nfunction getData(studentList,setMyList,myList,setShow,setMsg)\n{\n    let myData = [];\n    let i = 1;\n    studentList.map((data, index) => \n    {\n        myData.push({\n            srno                    : i++,\n            enrollno                : data.stdid.username,\n            studname                : data.stdid.name,\n            instid                  : data.stdid.inst_id,\n            semester                : data.stdid.semester,\n            program                 : data.paper.program.program_code,\n            subject                 : '('+data.paper.paper_code+') '+data.paper.paper_name,\n            delete                  : <button className=\"btn btn-danger\" onClick={()=>{deleteRecord(data.id,setMyList,myList,setShow,setMsg);}}>Delete</button>\n        });\n    })\n\n    return myData;\n}\n\nasync function deleteRecord(id,setMyList,myList,setShow,setMsg)\n{\n    await API.delete('/exam/'+id)\n    .then(function (res) \n    {\n        if(res.data.status==='success')\n        {\n            setShow(true);\n            setMsg(res.data.message);\n            setMyList(!myList);\n            setTimeout(()=>{setShow(false)}, 10000);\n        }\n    })\n    .catch(function (error) \n    {\n        setShow(true);\n        setMsg(error.response.data.message);\n        setTimeout(()=>{setShow(false)}, 10000);\n    });\n}\n\nexport default StudentSubjectList;","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/TestMaster.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/AddTopic.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/AddTopicForm.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/UploadTopics.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/TopicList.js",["466","467","468","469"],"import React,{useState,useEffect,useContext} from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport API from '../../../api';\nimport filterFactory, { textFilter } from 'react-bootstrap-table2-filter';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport {ShowContext} from '../../../App';\nimport { Link } from 'react-router-dom';\n\nconst TopicList = (props) => \n{\n    const {setShow,setMsg}                          =   useContext(ShowContext);\n    let [loading, setLoading]                       =   useState(true);\n    let [topicList, setTopicList]                   =   useState([]);\n    const header                                    =   getHeader();\n    const data                                      =   getData(topicList,props.setMyList,props.myList,setShow,setMsg);\n    const paperId                                   = props.paperId;\n    const paperCode                                 = props.paperCode;\n    const paperName                                 = props.paperName;\n    \n\n    const options = {\n        sizePerPageList: [\n            {\n                text: '5', value: 5\n            }, \n            {\n                text: '10', value: 10\n            }, \n            {\n                text: '50', value: 50\n            },\n            {\n                text: '500', value: 500\n            }, \n            {\n                text: '1000', value: 1000\n            }, \n            {\n                text: '10000', value: 10000\n            }\n        ]\n    };\n\n    useEffect(() => \n    {\n        getTopics(setTopicList,setLoading,paperId);\n    },[props.myList,paperId]);\n\n    return (\n        topicList.length > 0 && !loading ?\n        <div className=\"col-lg-12\" style={{overflow:\"auto\"}}>\n            <BootstrapTable keyField='srno' data={ data } columns={ header } filter={ filterFactory() } pagination={ paginationFactory(options) }/>\n        </div>\n        :   \n        null\n    );\n};\n\nasync function getTopics(setTopicList,setLoading,paperId)\n{\n    await API.get('/subject/topic',{params:{'type':'single','paperId':paperId}})\n    .then(function (res) \n    {\n        setTopicList(res.data.data);\n        console.log(res.data.data);\n        setLoading(false);\n    })\n    .catch(function (error) \n    {\n        setTopicList(undefined);\n        setLoading(false);\n    });   \n}\n\nfunction getHeader()\n{\n    let myHeader = [\n        { text: 'Sr No', dataField: 'srno'},\n        { text: 'Paper Code', dataField: 'paperCode',filter: textFilter()},\n        { text: 'Paper Name', dataField: 'paperName',filter: textFilter()},\n        { text: 'Topic', dataField: 'topic'},\n        { text: 'Sub Topic', dataField: 'subTopic'},\n        { text: 'Questions', dataField: 'questions'},\n        { text: 'Marks', dataField: 'marks'},\n        { text: 'Delete', dataField: 'delete'},\n    ];\n    return myHeader;\n}\n\nfunction getData(subjectList,setMyList,myList,setShow,setMsg)\n{\n    let myData = [];\n    let i = 1;\n    subjectList.map((data, index) => \n    {\n        myData.push({\n            srno                    : i++,\n            paperCode               : data.paper.paper_code,\n            paperName               : data.paper.paper_name,\n            topic                   : data.topic,\n            subTopic                : data.subtopic,\n            questions               : data.questions,\n            marks                   : data.marks,\n            delete                  : <button className=\"btn btn-danger\" onClick={()=>{deleteRecord(data.id,setMyList,myList,setShow,setMsg);}}>Delete</button>\n        });\n    })\n\n    return myData;\n}\n\nasync function deleteRecord(id,setMyList,myList,setShow,setMsg)\n{\n    await API.delete('/subject/topic/'+id)\n    .then(function (res) \n    {\n        if(res.data.status==='success')\n        {\n            setShow(true);\n            setMsg(res.data.message);\n            setMyList(!myList);\n            setTimeout(()=>{setShow(false)}, 10000);\n        }\n    })\n    .catch(function (error) \n    {\n        setShow(true);\n        setMsg(error.response.data.message);\n        setTimeout(()=>{setShow(false)}, 10000);\n    });\n}\n\nexport default TopicList;","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/TestMasterForm.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/UploadTests.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/TestList.js",["470"],"import React,{useState,useEffect,useContext} from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport API from '../../../api';\nimport filterFactory, { textFilter } from 'react-bootstrap-table2-filter';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport {ShowContext} from '../../../App';\nimport Moment from 'react-moment';\nimport { Link } from 'react-router-dom';\n\nconst TestList = (props) => \n{\n    const {setShow,setMsg}                          =   useContext(ShowContext);\n    let [loading, setLoading]                       =   useState(true);\n    let [testList, setTestList]                     =   useState([]);\n    const header                                    =   getHeader();\n    const data                                      =   getData(testList,props.setMyList,props.myList,setShow,setMsg);\n    \n\n    const options = {\n        sizePerPageList: [\n            {\n                text: '5', value: 5\n            }, \n            {\n                text: '10', value: 10\n            }, \n            {\n                text: '50', value: 50\n            },\n            {\n                text: '500', value: 500\n            }, \n            {\n                text: '1000', value: 1000\n            }, \n            {\n                text: '10000', value: 10000\n            }\n        ]\n    };\n\n    useEffect(() => \n    {\n        getSubjects(setTestList,setLoading);\n    },[props.myList]);\n\n    return (\n        testList.length > 0 && !loading ?\n        <div className=\"col-lg-12\" style={{overflow:\"auto\"}}>\n            <BootstrapTable keyField='srno' data={ data } columns={ header } filter={ filterFactory() } pagination={ paginationFactory(options) }/>\n        </div>\n        :   \n        null\n    );\n};\n\nasync function getSubjects(setTestList,setLoading)\n{\n    await API.get('/subject',{params:{'type':'all'}})\n    .then(function (res) \n    {\n        setTestList(res.data.data);\n        console.log(res.data.data);\n        setLoading(false);\n    })\n    .catch(function (error) \n    {\n        setTestList(undefined);\n        setLoading(false);\n    });   \n}\n\nfunction getHeader()\n{\n    let myHeader = [\n        { text: 'Sr No', dataField: 'srno'},\n        { text: 'Paper Code/Name', dataField: 'paperCode',filter: textFilter()},\n        { text: 'Marks', dataField: 'marks'},\n        { text: 'Questions', dataField: 'questions'},\n        { text: 'Duration', dataField: 'duration'},\n        { text: 'Start Date', dataField: 'startdate'},\n        { text: 'End Date', dataField: 'enddate'},\n        { text: 'Clear', dataField: 'clear'},\n        { text: 'Configure', dataField: 'configure'},\n    ];\n    return myHeader;\n}\n\nfunction getData(testList,setMyList,myList,setShow,setMsg)\n{\n    let myData = [];\n    let i = 1;\n    testList.map((data, index) => \n    {\n        myData.push({\n            srno                    : i++,\n            paperCode               : '('+data.paper_code+') '+data.paper_name,\n            marks                   : data.marks,\n            questions               : data.questions,\n            duration                : data.durations,\n            startdate               : data.from_date!=='' ? <Moment format=\"MMMM Do YYYY, H:mm:ss A\">{data.from_date}</Moment> : '',\n            enddate                 : data.to_date!=='' ?<Moment format=\"MMMM Do YYYY, H:mm:ss A\">{data.to_date}</Moment> : '',\n            clear                   : <button className=\"btn btn-danger\" onClick={()=>{clearRecord(data.id,setMyList,myList,setShow,setMsg);}}>Clear</button>,\n            configure                  : data.from_date!=='' ? <Link className=\"nav-link\" to={{pathname: \"/configureTest\",state:{paperId: data.id,paperCode:data.paper_code,paperName:data.paper_name,data:data}}}>Configure Test</Link> : ''\n        });\n    })\n\n    return myData;\n}\n\nasync function clearRecord(id,setMyList,myList,setShow,setMsg)\n{\n    await API.put('/subject/test/'+id,{'type':'clearTest'})\n    .then(function (res) \n    {\n        if(res.data.status==='success')\n        {\n            setShow(true);\n            setMsg(res.data.message);\n            setMyList(!myList);\n            setTimeout(()=>{setShow(false)}, 10000);\n        }\n    })\n    .catch(function (error) \n    {\n        setShow(true);\n        setMsg(error.response.data.message);\n        setTimeout(()=>{setShow(false)}, 10000);\n    });\n}\n\nexport default TestList;","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Masters/ConfigureTest.js",["471","472"],"import React, {useState,useEffect} from 'react';\nimport { Formik } from 'formik';\nimport API from '../../../api';\nimport {ShowContext} from '../../../App';\nimport { Link } from 'react-router-dom';\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport { useHistory } from 'react-router-dom';\n\nconst ConfigureTest = (props) => {\n    const paperId           =   props.location.state.paperId;\n    const paperCode         =   props.location.state.paperCode;\n    const paperName         =   props.location.state.paperName;\n    let history             =   useHistory();\n    let subjectData         =   {...props.location.state.data};    \n\n    const [myMsg, setMyMsg]         = useState('');\n    const [loading, setLoading]     = useState(false);\n\n    const myInitialValues           = {'score_view':subjectData.score_view,'review_question':subjectData.review_question,'proctoring':subjectData.proctoring,'photo_capture':subjectData.photo_capture,'capture_interval':subjectData.capture_interval,'negative_marking':subjectData.negative_marking,'negative_marks':subjectData.negative_marks,'time_remaining_reminder':subjectData.time_remaining_reminder,'exam_switch_alerts':subjectData.exam_switch_alerts,'option_shuffle':subjectData.option_shuffle,'question_marks':subjectData.question_marks,'ph_time':subjectData.ph_time,'static_assign':subjectData.static_assign};\n\n    return (\n        !loading && subjectData ? <Formik \n        initialValues= {myInitialValues}\n        onSubmit= {async (values,actions) => \n        {\n            console.log(values);\n            //-----------------Save Values to Database--------------------------------------------\n            setMyMsg('');\n            saveExamConfig(values,setLoading,setMyMsg,paperId,props,history);\n            actions.setSubmitting(false);\n            //------------------------------------------------------------------------------------\n        }}\n        >\n        {\n            props => {\n                const {\n                    values,\n                    isSubmitting,\n                    handleChange,\n                    handleBlur,\n                    handleSubmit,\n                    setFieldValue,\n                } = props;\n                return (\n                    <div>\n                    <div className=\"container-fluid\">\n                        <h1 className=\"mt-4\">Configure Test</h1>\n                        <div className=\"breadcrumb mb-4 row\">\n                            <div className=\"col-lg-4\">\n                                <b>Paper Code: {paperCode}</b>\n                            </div>\n                            <div className=\"col-lg-4\">\n                                <b>Paper Name: {paperName}</b>\n                            </div>\n                            <div className=\"col-lg-4\">\n                                <Link to=\"addTest\" className=\"btn btn-danger btn-sm\" style={{float:'right'}}>Go Back</Link>\n                            </div>\n                        </div>\n                        <form id=\"form-config\" method=\"post\" className=\"form-horizontal\" onSubmit={handleSubmit}>\n                        <div className=\"row col-lg-12 animate__animated animate__pulse animate_slower\">\n                            <div className=\"col-lg-12\">\n                            <table className=\"table table-bordered\" style={{width:\"100%\"}}>\n                                <thead>\n                                    <tr bgcolor=\"aqua\">\n                                        <th>Description</th>\n                                        <th>Action</th>\n                                        <th>Description</th>\n                                        <th>Action</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    <tr>\n                                        <td>\n                                        Allow Instant Score View\n                                        </td>\n                                        <td><center>\n                                            <label className=\"switch\">\n                                                <input type=\"checkbox\" name=\"score_view\" id=\"score_view\" onChange={() => setFieldValue(\"score_view\", !values.score_view ?true:false)} onBlur={handleBlur} checked={values.score_view ? true:false}/>\n                                                <span className=\"slider round\"></span>\n                                            </label></center>\n                                        </td>\n                                        <td>\n                                        Enable Review Questions to Candiate\n                                        </td>\n                                        <td><center>\n                                            <label className=\"switch\">\n                                                <input type=\"checkbox\" name=\"review_question\" id=\"review_question\" onChange={() => setFieldValue(\"review_question\", !values.review_question ?true:false)} onBlur={handleBlur}checked={values.review_question ? true:false}/>\n                                                <span className=\"slider round\"></span>\n                                            </label></center>\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                    <td>\n                                        Enable Candidate Photo Capture\n                                        </td>\n                                        <td><center>\n                                            <label className=\"switch\">\n                                                <input type=\"checkbox\" name=\"photo_capture\" id=\"photo_capture\" onChange={() => {\n                                                    setFieldValue(\"photo_capture\", !values.photo_capture ?true:false);\n                                            }} onBlur={handleBlur} checked={values.photo_capture ? true:false}/>\n                                                <span className=\"slider round\"></span>\n                                            </label></center>\n                                        </td>\n                                        <td>\n                                        Enter Capture Interval in Seconds\n                                        </td>\n                                        <td> <input type=\"text\" className=\"form-control\" id=\"capture_interval\" name=\"capture_interval\" onChange={handleChange} onBlur={handleBlur} value={values.photo_capture ? values.capture_interval:values.capture_interval=0} disabled={!values.photo_capture? true:false}/></td>                                       \n                                    </tr>\n                                    <tr>\n                                        <td>\n                                        Enable Proctoring\n                                        </td>\n                                        <td><center>\n                                            <label className=\"switch\">\n                                                <input type=\"checkbox\" name=\"proctoring\" id=\"proctoring\" onChange={() => setFieldValue(\"proctoring\", !values.proctoring ?true:false)} onBlur={handleBlur} checked={values.photo_capture? values.proctoring ? true:false:values.proctoring=false} disabled={!values.photo_capture? true:false}/>\n                                                <span className=\"slider round\"></span>\n                                            </label></center>\n                                        </td>\n                                        <td>\n                                        Enable Negative Marking\n                                        </td>\n                                        <td><center>\n                                            <label className=\"switch\">\n                                            <input type=\"checkbox\" name=\"negative_marking\" id=\"negative_marking\" onChange={() => setFieldValue(\"negative_marking\", !values.negative_marking ?true:false)} onBlur={handleBlur} checked={values.negative_marking ? true:false}/>\n                                            <span className=\"slider round\"></span>\n                                            </label></center>\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td>\n                                        Enter Negative Marks\n                                        </td>\n                                        <td> <input type=\"text\" className=\"form-control\" id=\"negative_marks\" name=\"negative_marks\" onChange={handleChange} onBlur={handleBlur} value={values.negative_marking ? values.negative_marks : values.negative_marks=0} disabled={!values.negative_marking? true:false}/></td>\n                                        <td>\n                                        Time Remaining Reminder\n                                        </td>\n                                        <td> <input type=\"text\" className=\"form-control\" id=\"time_remaining_reminder\" name=\"time_remaining_reminder\" value={values.time_remaining_reminder} onChange={handleChange} onBlur={handleBlur}/></td>\n                                    </tr>\n                                    <tr>\n                                        <td>\n                                        Exam Switch Alerts\n                                        </td>\n                                        <td> <input type=\"text\" className=\"form-control\" id=\"exam_switch_alerts\" name=\"exam_switch_alerts\" value={values.exam_switch_alerts} onChange={handleChange} onBlur={handleBlur} /></td>\n                                        <td>\n                                        Option Shuffle\n                                        </td>\n                                        <td><center>\n                                            <label className=\"switch\">\n                                                <input type=\"checkbox\" name=\"option_shuffle\" id=\"option_shuffle\" onChange={() => setFieldValue(\"option_shuffle\", !values.option_shuffle ?true:false)} onBlur={handleBlur} checked={values.option_shuffle ? true:false}/>\n                                                <span className=\"slider round\"></span>\n                                            </label></center>\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td>\n                                        Show Marks for question in examination\n                                        </td>\n                                        <td><center>\n                                            <label className=\"switch\">\n                                                <input type=\"checkbox\" name=\"question_marks\" id=\"question_marks\" onChange={() => setFieldValue(\"question_marks\", !values.question_marks ?true:false)} onBlur={handleBlur} checked={values.question_marks ? true:false}/>\n                                                <span className=\"slider round\"></span>\n                                            </label></center>\n                                        </td>\n                                        <td>\n                                        Enter Extra Time for Physically Handicap Students\n                                        </td>\n                                        <td> <input type=\"text\" className=\"form-control\" id=\"ph_time\" name=\"ph_time\" value={values.ph_time} onChange={handleChange} onBlur={handleBlur} /></td>\n                                    </tr>\n                                    <tr>\n                                        <td>\n                                        Static Exam Assignment\n                                        </td>\n                                        <td><center>\n                                            <label className=\"switch\">\n                                                <input type=\"checkbox\" name=\"static_assign\" id=\"static_assign\" onChange={() => setFieldValue(\"static_assign\", !values.static_assign ?true:false)} onBlur={handleBlur} checked={values.static_assign ? true:false}/>\n                                                <span className=\"slider round\"></span>\n                                            </label></center>\n                                        </td>\n                                        <td>\n                                        \n                                        </td>\n                                        <td> </td>\n                                    </tr>\n                                    <tr>\n                                        <td colSpan={4} bgcolor=\"aqua\">\n                                            <center>\n                                            <button type=\"submit\" className=\"btn btn-primary\" disabled={isSubmitting}>Submit</button>\n                                            </center>\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n\n                            {myMsg !== '' &&(\n                                <div className=\"alert alert-dark animate__animated animate__tada animate_slower\">{myMsg}</div>)}\n\n                            {loading && (\n                            <div className=\"col-lg-12\" style={{position:\"absolute\",top:\"40%\",left:\"40%\"}}>\n                                <ClipLoader color={'#ff0000'} loading={loading} size={200} />\n                            </div>)}\n\n                            </div>\n                        </div>\n                        </form>\n                    </div>\n                  </div>\n                );\n            }\n        }\n        </Formik>\n        :null\n    );\n};\n\nasync function saveExamConfig(values,setLoading,setMyMsg,paperId,props,history)\n{\n    setLoading(true);\n    await API.put('/subject/config/'+paperId, {'score_view':values.score_view,'review_question':values.review_question,'proctoring':values.proctoring,'photo_capture':values.photo_capture,'capture_interval':values.capture_interval,'negative_marking':values.negative_marking,'negative_marks':values.negative_marks,'time_remaining_reminder':values.time_remaining_reminder,'exam_switch_alerts':values.exam_switch_alerts,'option_shuffle':values.option_shuffle,'question_marks':values.question_marks,'ph_time':values.ph_time,'static_assign':values.static_assign})\n    .then(function (res) \n    {\n        setMyMsg(res.data.message);\n        if(res.data.status === 'success')\n        {\n            props.location.state.data.score_view              =   values.score_view;\n            props.location.state.data.review_question         =   values.review_question;\n            props.location.state.data.proctoring              =   values.proctoring;\n            props.location.state.data.photo_capture           =   values.photo_capture;\n            props.location.state.data.capture_interval        =   values.capture_interval;\n            props.location.state.data.negative_marking        =   values.negative_marking;\n            props.location.state.data.negative_marks          =   values.negative_marks;\n            props.location.state.data.time_remaining_reminder =   values.time_remaining_reminder;\n            props.location.state.data.exam_switch_alerts      =   values.exam_switch_alerts;\n            props.location.state.data.option_shuffle          =   values.option_shuffle;\n            props.location.state.data.question_marks          =   values.question_marks;\n            props.location.state.data.ph_time                 =   values.ph_time;\n            props.location.state.data.static_assign           =   values.static_assign;\n\n            let obj = { paperId: props.location.state.paperId,\n                        paperCode:props.location.state.paperCode,\n                        paperName:props.location.state.paperName,data:props.location.state.data};\n            history.replace('/configureTest',{...obj});\n        }\n        else\n        {\n            let obj = { paperId: props.location.state.paperId,\n                paperCode:props.location.state.paperCode,\n                paperName:props.location.state.paperName,data:props.location.state.data};\n            history.replace('/configureTest',{...obj});\n        }\n        setLoading(false);\n        setTimeout(()=>{setMyMsg('')}, 10000);\n    })\n    .catch(function (error) \n    {\n        setLoading(false);\n        setMyMsg(error.response.data.message);\n        setTimeout(()=>{setMyMsg('')}, 10000);\n    });   \n}\n\nexport default ConfigureTest;","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/InstProgramAllocation.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/UploadInstProgramAlloc.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/InstProgramList.js",["473","474","475"],"import React,{useState,useEffect,useContext} from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport API from '../../../api';\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport filterFactory, { textFilter } from 'react-bootstrap-table2-filter';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport {ShowContext} from '../../../App';\nimport Moment from 'react-moment';\nimport { Link } from 'react-router-dom';\n\nconst InstProgramList = (props) => \n{\n    const {setShow,setMsg}                          =   useContext(ShowContext);\n    let [loading, setLoading]                       =   useState(true);\n    let [instProgramList, setInstProgramList]       =   useState([]);\n    const header                                    =   getHeader();\n    const data                                      =   getData(instProgramList,props.setMyList,props.myList,setShow,setMsg);\n    \n\n    const options = {\n        sizePerPageList: [\n            {\n                text: '5', value: 5\n            }, \n            {\n                text: '10', value: 10\n            }, \n            {\n                text: '50', value: 50\n            },\n            {\n                text: '500', value: 500\n            }, \n            {\n                text: '1000', value: 1000\n            }, \n            {\n                text: '10000', value: 10000\n            }\n        ]\n    };\n\n    useEffect(() => \n    {\n        getInstProgramAlloc(setInstProgramList,setLoading);\n    },[props.myList]);\n\n    return (\n        instProgramList.length > 0 && !loading ?\n        <div className=\"col-lg-12\" style={{overflow:\"auto\"}}>\n            <BootstrapTable keyField='srno' data={ data } columns={ header } filter={ filterFactory() } pagination={ paginationFactory(options) }/>\n        </div>\n        :   \n        <div className=\"col-lg-12\" style={{position:\"absolute\",top:\"40%\",left:\"50%\"}}>\n            <ClipLoader color={'#ff0000'} loading={loading} size={200} />\n        </div>\n    );\n};\n\nasync function getInstProgramAlloc(setTestList,setLoading)\n{\n    await API.get('/program/inst',{params:{'type':'all'}})\n    .then(function (res) \n    {\n        setTestList(res.data.data);\n        console.log(res.data.data);\n        setLoading(false);\n    })\n    .catch(function (error) \n    {\n        setTestList(undefined);\n        setLoading(false);\n    });   \n}\n\nfunction getHeader()\n{\n    let myHeader = [\n        { text: 'Sr No', dataField: 'srno'},\n        { text: 'Inst ID', dataField: 'instid',filter: textFilter()},\n        { text: 'Inst Name', dataField: 'instname',filter: textFilter()},\n        { text: 'Program Code', dataField: 'programcode'},\n        { text: 'Program Name', dataField: 'programname'},\n        { text: 'Delete', dataField: 'del'},\n    ];\n    return myHeader;\n}\n\nfunction getData(instProgramList,setMyList,myList,setShow,setMsg)\n{\n    let myData = [];\n    let i = 1;\n    instProgramList.map((data, index) => \n    {\n        myData.push({\n            srno                    : i++,\n            instid                  : data.inst.username,\n            instname                : data.inst.college_name,\n            programcode             : data.program.program_code,\n            programname             : data.program.program_name,\n            del                   : <button className=\"btn btn-danger\" onClick={()=>{delRecord(data.id,setMyList,myList,setShow,setMsg);}}>Delete</button>,\n        });\n    })\n\n    return myData;\n}\n\nasync function delRecord(id,setMyList,myList,setShow,setMsg)\n{\n    await API.delete('/program/inst/'+id)\n    .then(function (res) \n    {\n        if(res.data.status==='success')\n        {\n            setShow(true);\n            setMsg(res.data.message);\n            setMyList(!myList);\n            setTimeout(()=>{setShow(false)}, 10000);\n        }\n    })\n    .catch(function (error) \n    {\n        setShow(true);\n        setMsg(error.response.data.message);\n        setTimeout(()=>{setShow(false)}, 10000);\n    });\n}\n\nexport default InstProgramList;","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Reports/examQuestionSpecificationReport.js",["476","477"],"import { getDefaultNormalizer } from '@testing-library/react';\nimport React,{useState, useEffect} from 'react';\nimport API from '../../../api';\nimport filterFactory, { textFilter } from 'react-bootstrap-table2-filter';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport BootstrapTable from 'react-bootstrap-table-next';\n\nconst ExamQuestionSpecificationReport = () => \n{\n    const [data, setData]                   =   useState([]);\n    let header                            =   [];\n    let data1                             =   [];\n\n\n    const options = {\n        sizePerPageList: [\n            {\n                text: '5', value: 5\n            }, \n            {\n                text: '10', value: 10\n            }, \n            {\n                text: '50', value: 50\n            },\n            {\n                text: '500', value: 500\n            }, \n            {\n                text: '1000', value: 1000\n            }, \n            {\n                text: '10000', value: 10000\n            }\n        ]\n    };\n\n    useEffect(()=>{\n        getQuestSpecificationComparison(setData);\n    },[]);\n\n    if(data.length > 0)\n    {\n        header = getHeader();\n        data1 = getData(data);\n    }\n\n    return (\n        <div>\n        <div className=\"container-fluid\">\n            <h1 className=\"mt-4\">Exam Question Specification Report</h1>\n            <ol className=\"breadcrumb mb-4\">\n                <li className=\"breadcrumb-item active\">Exam Question Specification Mis-Match Report</li>\n            </ol>\n            {data.length > 0 ?\n            <div className=\"row col-lg-12\">\n                <BootstrapTable keyField='srno' data={ data1 } columns={ header } filter={ filterFactory() } pagination={ paginationFactory(options) }/>\n            </div>\n            :   <div class=\"alert alert-danger\">\n                    No Discripancy in Exam Question Data Found\n                </div>}\n        </div>\n      </div>\n    );\n};\n\nasync function getQuestSpecificationComparison(setData)\n{\n    await API.get('/questions/specification/compare')\n    .then((res) => {\n        if(res.data.status === 'success')\n        {\n            setData(res.data.data);\n        }\n        else\n        {\n            \n        }\n    });\n}\n\nfunction getHeader()\n{\n    let myHeader = [\n        { text: 'Sr No', dataField: 'srno'},\n        { text: 'Paper Code', dataField: 'paperCode',filter: textFilter()},\n        { text: 'Topic',dataField: 'topic',filter: textFilter()},\n        { text: 'Question Type', dataField: 'questType',filter: textFilter()},\n        { text: 'Marks/Question', dataField: 'marks',filter: textFilter()},\n        { text: 'Expected Question Count', dataField: 'expected'},\n        { text: 'Actual Question Count', dataField: 'actual'},\n    ];\n    return myHeader;\n}\n\nfunction getData(myData1)   \n{\n    let myData = [];\n    let i = 1;\n    myData1.map((data, index) => \n    {\n        myData.push({\n            srno                    : i++,\n            paperCode               : data.paper_code,\n            topic                   : <center>{data.topic}</center>,\n            questType               : <center>{data.questType}</center>,\n            marks                   : <center>{data.marks}</center>,\n            expected                : <center>{data.expected}</center>,\n            actual                  : <center>{data.actual}</center>      \n        });\n    })\n\n    return myData;\n}\n\nexport default ExamQuestionSpecificationReport;","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Reports/examQuestionSpecificationMatchReport.js",["478","479"],"import { getDefaultNormalizer } from '@testing-library/react';\nimport React,{useState, useEffect} from 'react';\nimport API from '../../../api';\nimport filterFactory, { textFilter } from 'react-bootstrap-table2-filter';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport BootstrapTable from 'react-bootstrap-table-next';\n\nconst ExamQuestionSpecificationReport = () => \n{\n    const [data, setData]                   =   useState([]);\n    let header                            =   [];\n    let data1                             =   [];\n\n\n    const options = {\n        sizePerPageList: [\n            {\n                text: '5', value: 5\n            }, \n            {\n                text: '10', value: 10\n            }, \n            {\n                text: '50', value: 50\n            },\n            {\n                text: '500', value: 500\n            }, \n            {\n                text: '1000', value: 1000\n            }, \n            {\n                text: '10000', value: 10000\n            }\n        ]\n    };\n\n    useEffect(()=>{\n        getQuestSpecificationComparison(setData);\n    },[]);\n\n    if(data.length > 0)\n    {\n        header = getHeader();\n        data1 = getData(data);\n    }\n\n    return (\n        <div>\n        <div className=\"container-fluid\">\n            <h1 className=\"mt-4\">Exam Question Specification Match Report</h1>\n            <ol className=\"breadcrumb mb-4\">\n                <li className=\"breadcrumb-item active\">Exam Question Specification Match Report</li>\n            </ol>\n            {data.length > 0 ?\n            <div className=\"row col-lg-12\">\n                <BootstrapTable keyField='srno' data={ data1 } columns={ header } filter={ filterFactory() } pagination={ paginationFactory(options) }/>\n            </div>\n            :   <div class=\"alert alert-danger\">\n                    No Discripancy in Exam Question Data Found\n                </div>}\n        </div>\n      </div>\n    );\n};\n\nasync function getQuestSpecificationComparison(setData)\n{\n    await API.get('/questions/specification/compare',{params:{\"type\":\"match\"}})\n    .then((res) => {\n        if(res.data.status === 'success')\n        {\n            setData(res.data.data);\n        }\n        else\n        {\n            \n        }\n    });\n}\n\nfunction getHeader()\n{\n    let myHeader = [\n        { text: 'Sr No', dataField: 'srno'},\n        { text: 'Paper Code', dataField: 'paperCode',filter: textFilter()},\n        { text: 'Topic',dataField: 'topic',filter: textFilter()},\n        { text: 'Question Type', dataField: 'questType',filter: textFilter()},\n        { text: 'Marks/Question', dataField: 'marks',filter: textFilter()},\n        { text: 'Expected Question Count', dataField: 'expected'},\n        { text: 'Actual Question Count', dataField: 'actual'},\n    ];\n    return myHeader;\n}\n\nfunction getData(myData1)   \n{\n    let myData = [];\n    let i = 1;\n    myData1.map((data, index) => \n    {\n        myData.push({\n            srno                    : i++,\n            paperCode               : data.paper_code,\n            topic                   : <center>{data.topic}</center>,\n            questType               : <center>{data.questType}</center>,\n            marks                   : <center>{data.marks}</center>,\n            expected                : <center>{data.expected}</center>,\n            actual                  : <center>{data.actual}</center>      \n        });\n    })\n\n    return myData;\n}\n\nexport default ExamQuestionSpecificationReport;",{"ruleId":"480","replacedBy":"481"},{"ruleId":"482","replacedBy":"483"},{"ruleId":"484","severity":1,"message":"485","line":12,"column":21,"nodeType":"486","messageId":"487","endLine":12,"endColumn":31},{"ruleId":"484","severity":1,"message":"488","line":13,"column":12,"nodeType":"486","messageId":"487","endLine":13,"endColumn":23},{"ruleId":"484","severity":1,"message":"489","line":19,"column":10,"nodeType":"486","messageId":"487","endLine":19,"endColumn":18},{"ruleId":"490","severity":1,"message":"491","line":67,"column":17,"nodeType":"492","endLine":67,"endColumn":60},{"ruleId":"493","severity":1,"message":"494","line":105,"column":7,"nodeType":"495","endLine":105,"endColumn":16,"suggestions":"496"},{"ruleId":"484","severity":1,"message":"497","line":7,"column":25,"nodeType":"486","messageId":"487","endLine":7,"endColumn":39},{"ruleId":"490","severity":1,"message":"491","line":41,"column":25,"nodeType":"492","endLine":41,"endColumn":174},{"ruleId":"490","severity":1,"message":"491","line":83,"column":25,"nodeType":"492","endLine":83,"endColumn":170},{"ruleId":"490","severity":1,"message":"491","line":174,"column":29,"nodeType":"492","endLine":174,"endColumn":178},{"ruleId":"484","severity":1,"message":"498","line":7,"column":23,"nodeType":"486","messageId":"487","endLine":7,"endColumn":35},{"ruleId":"484","severity":1,"message":"488","line":9,"column":10,"nodeType":"486","messageId":"487","endLine":9,"endColumn":21},{"ruleId":"484","severity":1,"message":"488","line":15,"column":10,"nodeType":"486","messageId":"487","endLine":15,"endColumn":21},{"ruleId":"493","severity":1,"message":"499","line":207,"column":38,"nodeType":"495","endLine":207,"endColumn":40,"suggestions":"500"},{"ruleId":"493","severity":1,"message":"501","line":46,"column":6,"nodeType":"495","endLine":46,"endColumn":22,"suggestions":"502"},{"ruleId":"493","severity":1,"message":"503","line":56,"column":6,"nodeType":"495","endLine":56,"endColumn":16,"suggestions":"504"},{"ruleId":"493","severity":1,"message":"505","line":69,"column":6,"nodeType":"495","endLine":69,"endColumn":22,"suggestions":"506"},{"ruleId":"507","severity":1,"message":"508","line":212,"column":34,"nodeType":"509","messageId":"510","endLine":212,"endColumn":36},{"ruleId":"507","severity":1,"message":"508","line":229,"column":34,"nodeType":"509","messageId":"510","endLine":229,"endColumn":36},{"ruleId":"484","severity":1,"message":"497","line":12,"column":23,"nodeType":"486","messageId":"487","endLine":12,"endColumn":37},{"ruleId":"493","severity":1,"message":"511","line":37,"column":6,"nodeType":"495","endLine":37,"endColumn":22,"suggestions":"512"},{"ruleId":"484","severity":1,"message":"497","line":50,"column":23,"nodeType":"486","messageId":"487","endLine":50,"endColumn":37},{"ruleId":"484","severity":1,"message":"513","line":1,"column":15,"nodeType":"486","messageId":"487","endLine":1,"endColumn":24},{"ruleId":"484","severity":1,"message":"513","line":1,"column":25,"nodeType":"486","messageId":"487","endLine":1,"endColumn":34},{"ruleId":"484","severity":1,"message":"514","line":12,"column":9,"nodeType":"486","messageId":"487","endLine":12,"endColumn":23},{"ruleId":"484","severity":1,"message":"497","line":10,"column":25,"nodeType":"486","messageId":"487","endLine":10,"endColumn":39},{"ruleId":"484","severity":1,"message":"515","line":18,"column":12,"nodeType":"486","messageId":"487","endLine":18,"endColumn":18},{"ruleId":"484","severity":1,"message":"516","line":23,"column":11,"nodeType":"486","messageId":"487","endLine":23,"endColumn":18},{"ruleId":"493","severity":1,"message":"517","line":50,"column":9,"nodeType":"495","endLine":50,"endColumn":35,"suggestions":"518"},{"ruleId":"493","severity":1,"message":"519","line":80,"column":7,"nodeType":"495","endLine":80,"endColumn":72,"suggestions":"520"},{"ruleId":"521","severity":1,"message":"522","line":94,"column":60,"nodeType":"523","endLine":94,"endColumn":79},{"ruleId":"524","severity":1,"message":"525","line":94,"column":67,"nodeType":"486","endLine":94,"endColumn":78},{"ruleId":"526","severity":1,"message":"527","line":130,"column":17,"nodeType":"528","messageId":"529","endLine":130,"endColumn":19},{"ruleId":"484","severity":1,"message":"530","line":168,"column":11,"nodeType":"486","messageId":"487","endLine":168,"endColumn":22},{"ruleId":"484","severity":1,"message":"531","line":169,"column":11,"nodeType":"486","messageId":"487","endLine":169,"endColumn":26},{"ruleId":"484","severity":1,"message":"532","line":170,"column":11,"nodeType":"486","messageId":"487","endLine":170,"endColumn":23},{"ruleId":"484","severity":1,"message":"533","line":15,"column":12,"nodeType":"486","messageId":"487","endLine":15,"endColumn":19},{"ruleId":"484","severity":1,"message":"534","line":15,"column":12,"nodeType":"486","messageId":"487","endLine":15,"endColumn":21},{"ruleId":"493","severity":1,"message":"535","line":45,"column":7,"nodeType":"495","endLine":45,"endColumn":9,"suggestions":"536"},{"ruleId":"507","severity":1,"message":"508","line":89,"column":35,"nodeType":"509","messageId":"510","endLine":89,"endColumn":37},{"ruleId":"493","severity":1,"message":"537","line":14,"column":7,"nodeType":"495","endLine":14,"endColumn":9,"suggestions":"538"},{"ruleId":"521","severity":1,"message":"522","line":47,"column":87,"nodeType":"523","endLine":47,"endColumn":100},{"ruleId":"507","severity":1,"message":"508","line":90,"column":32,"nodeType":"509","messageId":"510","endLine":90,"endColumn":34},{"ruleId":"484","severity":1,"message":"513","line":1,"column":15,"nodeType":"486","messageId":"487","endLine":1,"endColumn":24},{"ruleId":"484","severity":1,"message":"539","line":6,"column":9,"nodeType":"486","messageId":"487","endLine":6,"endColumn":17},{"ruleId":"484","severity":1,"message":"540","line":7,"column":14,"nodeType":"486","messageId":"487","endLine":7,"endColumn":24},{"ruleId":"484","severity":1,"message":"540","line":7,"column":14,"nodeType":"486","messageId":"487","endLine":7,"endColumn":24},{"ruleId":"484","severity":1,"message":"541","line":14,"column":12,"nodeType":"486","messageId":"487","endLine":14,"endColumn":17},{"ruleId":"484","severity":1,"message":"542","line":14,"column":19,"nodeType":"486","messageId":"487","endLine":14,"endColumn":27},{"ruleId":"484","severity":1,"message":"543","line":53,"column":21,"nodeType":"486","messageId":"487","endLine":53,"endColumn":28},{"ruleId":"493","severity":1,"message":"499","line":166,"column":38,"nodeType":"495","endLine":166,"endColumn":40,"suggestions":"544"},{"ruleId":"507","severity":1,"message":"508","line":87,"column":35,"nodeType":"509","messageId":"510","endLine":87,"endColumn":37},{"ruleId":"493","severity":1,"message":"499","line":202,"column":38,"nodeType":"495","endLine":202,"endColumn":40,"suggestions":"545"},{"ruleId":"507","severity":1,"message":"508","line":88,"column":35,"nodeType":"509","messageId":"510","endLine":88,"endColumn":37},{"ruleId":"507","severity":1,"message":"508","line":90,"column":35,"nodeType":"509","messageId":"510","endLine":90,"endColumn":37},{"ruleId":"507","severity":1,"message":"508","line":89,"column":35,"nodeType":"509","messageId":"510","endLine":89,"endColumn":37},{"ruleId":"484","severity":1,"message":"546","line":7,"column":10,"nodeType":"486","messageId":"487","endLine":7,"endColumn":14},{"ruleId":"484","severity":1,"message":"547","line":17,"column":11,"nodeType":"486","messageId":"487","endLine":17,"endColumn":20},{"ruleId":"484","severity":1,"message":"548","line":18,"column":11,"nodeType":"486","messageId":"487","endLine":18,"endColumn":20},{"ruleId":"507","severity":1,"message":"508","line":94,"column":35,"nodeType":"509","messageId":"510","endLine":94,"endColumn":37},{"ruleId":"507","severity":1,"message":"508","line":93,"column":32,"nodeType":"509","messageId":"510","endLine":93,"endColumn":34},{"ruleId":"484","severity":1,"message":"513","line":1,"column":25,"nodeType":"486","messageId":"487","endLine":1,"endColumn":34},{"ruleId":"484","severity":1,"message":"549","line":4,"column":9,"nodeType":"486","messageId":"487","endLine":4,"endColumn":20},{"ruleId":"484","severity":1,"message":"550","line":8,"column":8,"nodeType":"486","messageId":"487","endLine":8,"endColumn":14},{"ruleId":"484","severity":1,"message":"546","line":9,"column":10,"nodeType":"486","messageId":"487","endLine":9,"endColumn":14},{"ruleId":"507","severity":1,"message":"508","line":93,"column":39,"nodeType":"509","messageId":"510","endLine":93,"endColumn":41},{"ruleId":"484","severity":1,"message":"551","line":1,"column":10,"nodeType":"486","messageId":"487","endLine":1,"endColumn":30},{"ruleId":"507","severity":1,"message":"508","line":100,"column":31,"nodeType":"509","messageId":"510","endLine":100,"endColumn":33},{"ruleId":"484","severity":1,"message":"551","line":1,"column":10,"nodeType":"486","messageId":"487","endLine":1,"endColumn":30},{"ruleId":"507","severity":1,"message":"508","line":100,"column":31,"nodeType":"509","messageId":"510","endLine":100,"endColumn":33},"no-native-reassign",["552"],"no-negated-in-lhs",["553"],"no-unused-vars","'setLogoVal' is assigned a value but never used.","Identifier","unusedVar","'currentUser' is assigned a value but never used.","'isLoaded' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getHeaderData'. Either include it or remove the dependency array.","ArrayExpression",["554"],"'setCurrentUser' is assigned a value but never used.","'setFooterVal' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'updateFlag'. Either include it or remove the dependency array.",["555"],"React Hook useEffect has missing dependencies: 'history', 'setMsg', and 'setShow'. Either include them or remove the dependency array.",["556"],"React Hook useEffect has a missing dependency: 'questionIndex'. Either include it or remove the dependency array.",["557"],"React Hook useEffect has missing dependencies: 'history', 'props', 'setPopupMsg', and 'setPopupShow'. Either include them or remove the dependency array.",["558"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'location.state'. Either include it or remove the dependency array.",["559"],"'useEffect' is defined but never used.","'shuffleOptions' is assigned a value but never used.","'imgSrc' is assigned a value but never used.","'CapTime' is assigned a value but never used.","React Hook React.useCallback has missing dependencies: 'capture1', 'props.isProctored', 'setPopupMsg', and 'setPopupShow'. Either include them or remove the dependency array.",["560"],"React Hook useEffect has missing dependencies: 'CaptureTime' and 'currentUser'. Either include them or remove the dependency array.",["561"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","react/style-prop-object","Style prop value must be an object","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'accessKeyId' is assigned a value but never used.","'secretAccessKey' is assigned a value but never used.","'sessionToken' is assigned a value but never used.","'logoVal' is assigned a value but never used.","'footerVal' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props', 'setMsg', and 'setShow'. Either include them or remove the dependency array.",["562"],"React Hook useEffect has missing dependencies: 'setMsg' and 'setShow'. Either include them or remove the dependency array.",["563"],"'instList' is assigned a value but never used.","'isDragging' is assigned a value but never used.","'value' is assigned a value but never used.","'setValue' is assigned a value but never used.","'touched' is assigned a value but never used.",["564"],["565"],"'Link' is defined but never used.","'paperCode' is assigned a value but never used.","'paperName' is assigned a value but never used.","'ShowContext' is defined but never used.","'Moment' is defined but never used.","'getDefaultNormalizer' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"566","fix":"567"},{"desc":"568","fix":"569"},{"desc":"570","fix":"571"},{"desc":"572","fix":"573"},{"desc":"574","fix":"575"},{"desc":"576","fix":"577"},{"desc":"578","fix":"579"},{"desc":"580","fix":"581"},{"desc":"582","fix":"583"},{"desc":"584","fix":"585"},{"desc":"568","fix":"586"},{"desc":"568","fix":"587"},"Update the dependencies array to be: [getHeaderData, logoVal]",{"range":"588","text":"589"},"Update the dependencies array to be: [updateFlag]",{"range":"590","text":"591"},"Update the dependencies array to be: [history, props.location, setMsg, setShow]",{"range":"592","text":"593"},"Update the dependencies array to be: [myOption, questionIndex]",{"range":"594","text":"595"},"Update the dependencies array to be: [history, props, props.location, setPopupMsg, setPopupShow]",{"range":"596","text":"597"},"Update the dependencies array to be: [myExam, history, location.state]",{"range":"598","text":"599"},"Update the dependencies array to be: [capture1, exam, props.isProctored, setPopupShow, setPopupMsg]",{"range":"600","text":"601"},"Update the dependencies array to be: [history.location, capture, history, props, setPopupMsg, setPopupShow, CaptureTime, currentUser]",{"range":"602","text":"603"},"Update the dependencies array to be: [props, setMsg, setShow]",{"range":"604","text":"605"},"Update the dependencies array to be: [setMsg, setShow]",{"range":"606","text":"607"},{"range":"608","text":"591"},{"range":"609","text":"591"},[3609,3618],"[getHeaderData, logoVal]",[9594,9596],"[updateFlag]",[1856,1872],"[history, props.location, setMsg, setShow]",[2034,2044],"[myOption, questionIndex]",[2465,2481],"[history, props, props.location, setPopupMsg, setPopupShow]",[931,947],"[myExam, history, location.state]",[1897,1923],"[capture1, exam, props.isProctored, setPopupShow, setPopupMsg]",[2914,2979],"[history.location, capture, history, props, setPopupMsg, setPopupShow, CaptureTime, currentUser]",[1403,1405],"[props, setMsg, setShow]",[463,465],"[setMsg, setShow]",[7645,7647],[10754,10756]]