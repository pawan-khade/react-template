[{"/home/pawan/Desktop/react-template-hooks/src/index.js":"1","/home/pawan/Desktop/react-template-hooks/src/App.js":"2","/home/pawan/Desktop/react-template-hooks/src/AlertDismissible.js":"3","/home/pawan/Desktop/react-template-hooks/src/api.js":"4","/home/pawan/Desktop/react-template-hooks/src/Layout/Header.js":"5","/home/pawan/Desktop/react-template-hooks/src/Layout/Content.js":"6","/home/pawan/Desktop/react-template-hooks/src/Layout/Sidebar.js":"7","/home/pawan/Desktop/react-template-hooks/src/Layout/Footer.js":"8","/home/pawan/Desktop/react-template-hooks/src/Components/LoginButton.js":"9","/home/pawan/Desktop/react-template-hooks/src/Components/Login.js":"10","/home/pawan/Desktop/react-template-hooks/src/Components/Startexam.js":"11","/home/pawan/Desktop/react-template-hooks/src/Components/Student/StudHome.js":"12","/home/pawan/Desktop/react-template-hooks/src/Components/Student/Instructions.js":"13","/home/pawan/Desktop/react-template-hooks/src/Components/Exam/MyTimer.js":"14","/home/pawan/Desktop/react-template-hooks/src/Components/Student/CountCard.js":"15","/home/pawan/Desktop/react-template-hooks/src/Components/Student/ExamCard.js":"16","/home/pawan/Desktop/react-template-hooks/src/Components/Exam/QuestionAnswer.js":"17","/home/pawan/Desktop/react-template-hooks/src/Components/Exam/QuestionButtons.js":"18","/home/pawan/Desktop/react-template-hooks/src/Components/Exam/NextSaveButton.js":"19","/home/pawan/Desktop/react-template-hooks/src/Components/Exam/EndExamButton.js":"20","/home/pawan/Desktop/react-template-hooks/src/Components/Exam/PreviousButton.js":"21","/home/pawan/Desktop/react-template-hooks/src/Components/Exam/OverallSummery.js":"22","/home/pawan/Desktop/react-template-hooks/src/Components/Exam/ReviewLater.js":"23","/home/pawan/Desktop/react-template-hooks/src/Components/Exam/Options.js":"24","/home/pawan/Desktop/react-template-hooks/src/Components/Exam/WebCamCapture.js":"25","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Adminhome.js":"26","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/ClearSession.js":"27","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/ClearSessionUserInfo.js":"28","/home/pawan/Desktop/react-template-hooks/src/popup.js":"29","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/ConfigureHeader.js":"30","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/ConfigureFooter.js":"31","/home/pawan/Desktop/react-template-hooks/src/Components/Institute/InstHome.js":"32","/home/pawan/Desktop/react-template-hooks/src/Components/Institute/InstReports.js":"33","/home/pawan/Desktop/react-template-hooks/src/Components/Institute/Reports/InstExamReport.js":"34","/home/pawan/Desktop/react-template-hooks/src/Layout/MyContent.js":"35","/home/pawan/Desktop/react-template-hooks/src/Components/Institute/Reports/InstExamStudtReport.js":"36"},{"size":199,"mtime":1610375291000,"results":"37","hashOfConfig":"38"},{"size":3128,"mtime":1611749803742,"results":"39","hashOfConfig":"38"},{"size":434,"mtime":1610102374000,"results":"40","hashOfConfig":"38"},{"size":143,"mtime":1610371769000,"results":"41","hashOfConfig":"38"},{"size":4125,"mtime":1611751068143,"results":"42","hashOfConfig":"38"},{"size":2534,"mtime":1611641552990,"results":"43","hashOfConfig":"38"},{"size":5125,"mtime":1611572071141,"results":"44","hashOfConfig":"38"},{"size":1339,"mtime":1611388814959,"results":"45","hashOfConfig":"38"},{"size":1068,"mtime":1611394431189,"results":"46","hashOfConfig":"38"},{"size":8708,"mtime":1611751303291,"results":"47","hashOfConfig":"38"},{"size":7317,"mtime":1611398221823,"results":"48","hashOfConfig":"38"},{"size":7110,"mtime":1611734794139,"results":"49","hashOfConfig":"38"},{"size":4780,"mtime":1611306543448,"results":"50","hashOfConfig":"38"},{"size":3408,"mtime":1611747340047,"results":"51","hashOfConfig":"38"},{"size":379,"mtime":1611403745246,"results":"52","hashOfConfig":"38"},{"size":4540,"mtime":1611126036086,"results":"53","hashOfConfig":"38"},{"size":2757,"mtime":1611118230139,"results":"54","hashOfConfig":"38"},{"size":2735,"mtime":1611127596343,"results":"55","hashOfConfig":"38"},{"size":9053,"mtime":1611127416426,"results":"56","hashOfConfig":"38"},{"size":2085,"mtime":1611406299706,"results":"57","hashOfConfig":"38"},{"size":1535,"mtime":1610102374000,"results":"58","hashOfConfig":"38"},{"size":3012,"mtime":1610529484000,"results":"59","hashOfConfig":"38"},{"size":4088,"mtime":1610380881000,"results":"60","hashOfConfig":"38"},{"size":1907,"mtime":1611750105288,"results":"61","hashOfConfig":"38"},{"size":2560,"mtime":1611324483825,"results":"62","hashOfConfig":"38"},{"size":454,"mtime":1611323235969,"results":"63","hashOfConfig":"38"},{"size":6146,"mtime":1611738023654,"results":"64","hashOfConfig":"38"},{"size":4970,"mtime":1611323508452,"results":"65","hashOfConfig":"38"},{"size":951,"mtime":1611738624378,"results":"66","hashOfConfig":"38"},{"size":6154,"mtime":1611738257126,"results":"67","hashOfConfig":"38"},{"size":4248,"mtime":1611737997386,"results":"68","hashOfConfig":"38"},{"size":459,"mtime":1611559269161,"results":"69","hashOfConfig":"38"},{"size":1195,"mtime":1611585258619,"results":"70","hashOfConfig":"38"},{"size":7543,"mtime":1611750799525,"results":"71","hashOfConfig":"38"},{"size":7927,"mtime":1610102374000,"results":"72","hashOfConfig":"38"},{"size":3665,"mtime":1611743407600,"results":"73","hashOfConfig":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},"1iupvn5",{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"76"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"76"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"76"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"76"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"76"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"76"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"76"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"76"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"76"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"76"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},"/home/pawan/Desktop/react-template-hooks/src/index.js",[],["157","158"],"/home/pawan/Desktop/react-template-hooks/src/App.js",[],"/home/pawan/Desktop/react-template-hooks/src/AlertDismissible.js",[],"/home/pawan/Desktop/react-template-hooks/src/api.js",[],"/home/pawan/Desktop/react-template-hooks/src/Layout/Header.js",["159","160","161","162"],"import React, { useState , useEffect, useContext } from 'react';\nimport LoginButton from '../Components/LoginButton';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport {ShowContext} from '../App';\nimport API from '../api';\n\nfunction Header()\n{\n    const {setShow,setMsg} = useContext(ShowContext);\n\n    let history                         =   useHistory();\n    let location                        =   useLocation();\n    let [toggle, setToggle]             =   useState(true);\n    let [isLoggedIn, setIsLoggedIn]     =   useState(false);\n    let [isStartExam, setIsStartExam]   =   useState(false);\n    let [isLoaded,setIsLoaded]          =   useState(false);\n    let myHeader                        =   useHeader(setIsLoaded);\n\n    useEffect(() =>\n    {\n      let PathName = location.pathname;\n      const searchString = process.env.REACT_APP_NON_AUTH_PATHS.split(' ').find((str) => str === PathName);\n      if(PathName==='/startexam')\n      {\n        if(window.innerWidth < 1000)\n        {\n            setIsStartExam(true);\n            setToggle(true);\n            document.body.classList.remove('sb-nav-fixed');document.body.classList.remove('sb-sidenav-toggled');\n        }\n        else\n        {\n            setIsStartExam(true);\n            setToggle(true);\n            document.body.classList.add('sb-sidenav-toggled');document.body.classList.remove('sb-nav-fixed');\n        }\n      }\n      else\n      {\n        setIsStartExam(false);\n        setToggle(false);\n        document.body.classList.add('sb-nav-fixed');document.body.classList.remove('sb-sidenav-toggled');\n      }\n      if(PathName!==searchString)\n      {\n          setIsLoggedIn(true);\n      }\n      else\n      {\n          setIsLoggedIn(false);\n      }\n    },[location,history,setShow,setMsg]);\n\n\n    return(\n          !isStartExam ?\n            <nav className=\"sb-topnav navbar navbar-expand navbar-dark bg-dark\">\n                <a className=\"navbar-brand\" href={void(0)}><img src=\"assets/images/logo.png\" height=\"50\" width=\"50\"></img> {myHeader}</a>\n                <button className=\"btn btn-link btn-sm order-1 order-lg-0\" id=\"sidebarToggle\" onClick={() => {toggleSidebar(setToggle,toggle)}}><i className=\"fas fa-bars\"></i></button>\n\n               <form className=\"d-none d-md-inline-block form-inline ml-auto mr-0 mr-md-3 my-2 my-md-0\">\n                     {/*<div className=\"input-group\">\n                        <input className=\"form-control\" type=\"text\" placeholder=\"Search for...\" aria-label=\"Search\" aria-describedby=\"basic-addon2\" />\n                        <div className=\"input-group-append\">\n                            <button className=\"btn btn-primary\" type=\"button\"><i className=\"fas fa-search\"></i></button>\n                        </div>\n                    </div>*/}\n                </form>\n                { isLoggedIn ? <LoginButton url={'/logout'} label={'Logout'} setIsLoggedIn={setIsLoggedIn}/>: <LoginButton url={'/login'} label={'Login'}/>}\n            </nav>\n            : null\n    );\n}\n\nfunction toggleSidebar(setToggle,toggle)\n{\n    setToggle(!toggle);\n    if(!toggle)\n    {\n        document.body.classList.add('sb-sidenav-toggled');document.body.classList.remove('sb-nav-fixed');\n    }\n    else\n    {\n        document.body.classList.add('sb-nav-fixed');document.body.classList.remove('sb-sidenav-toggled');\n    }\n}\n\n\n\nfunction useHeader(setIsLoaded)\n{\n    let [myHeader,setMyHeader]          =   useState('GudExams');\n\n    useEffect(() =>\n    {\n        getHeaderData();\n    },[]);\n    \n    async function getHeaderData()\n    {\n        await API.get('/configurations',{params :{\"type\":\"headerconfig\"}})\n        .then(function (res) \n        {\n            if(res.data.status === 'success')\n            {\n                setMyHeader(res.data.header);\n                setIsLoaded(true);\n            }\n            else\n            {\n                setMyHeader('GudExams');\n                setIsLoaded(true);\n            }\n        })\n        .catch(function (error) \n        {\n            setMyHeader('GudExams');\n            setIsLoaded(true);\n        })\n    }\n\n    return myHeader\n}\n\nexport default Header;\n","/home/pawan/Desktop/react-template-hooks/src/Layout/Content.js",[],"/home/pawan/Desktop/react-template-hooks/src/Layout/Sidebar.js",["163","164"],"import React, { useContext } from 'react';\nimport {UserContext} from '../App';\nimport { Link } from 'react-router-dom';\n\nfunction Sidebar() \n{\n    const {currentUser, setCurrentUser}   = useContext(UserContext);\n\n    if(currentUser && currentUser.role === 'STUDENT')\n    {\n        return (\n                <nav className=\"sb-sidenav accordion sb-sidenav-dark\" id=\"sidenavAccordion\" >\n                    <div className=\"sb-sidenav-menu\">\n                        <div className=\"nav\">\n                            <div className=\"sb-sidenav-menu-heading\">Main Menu</div>\n                            <Link className=\"nav-link\" to={{pathname: \"/studenthome\"}}>\n                                <div className=\"sb-nav-link-icon\"><i className=\"fas fa-tachometer-alt\"></i></div>\n                                Home\n                            </Link>\n                        </div>\n                    </div>\n                </nav>\n        );\n    }\n    else if(currentUser && currentUser.role === 'ADMIN')\n    {\n        return (\n            <nav className=\"sb-sidenav accordion sb-sidenav-dark\" id=\"sidenavAccordion\" >\n                <div className=\"sb-sidenav-menu\">\n                    <div className=\"nav\">\n                        <div className=\"sb-sidenav-menu-heading\">Main Menu</div>\n                        <Link  className=\"nav-link\" to={{pathname: \"/adminhome\"}}>\n                            <div className=\"sb-nav-link-icon\"><i className=\"fas fa-tachometer-alt\"></i></div>\n                            Home\n                        </Link>\n                        <Link  className=\"nav-link\" to={{pathname: \"/clearsession\"}}>\n                            <div className=\"sb-nav-link-icon\"><i className=\"fas fa-address-card\"></i></div>\n                            Clear Session\n                        </Link>\n\n                        <a className=\"nav-link collapsed\" data-toggle=\"collapse\" data-target=\"#collapseConfigurations\" aria-expanded=\"false\" aria-controls=\"collapseLayouts\">\n                            <div className=\"sb-nav-link-icon\"><i className=\"fas fa-cogs\"></i></div>\n                                Configurations\n                            <div className=\"sb-sidenav-collapse-arrow\"><i className=\"fas fa-angle-down\"></i></div>\n                        </a>\n                        <div className=\"collapse\" id=\"collapseConfigurations\" aria-labelledby=\"headingOne\" data-parent=\"#sidenavAccordion\">\n                            <nav className=\"sb-sidenav-menu-nested nav\">\n                                <Link className=\"nav-link\" to={{pathname: \"/configHeader\"}}>\n                                    <div className=\"sb-nav-link-icon\"><i className=\"fas fa-tools\"></i></div>\n                                    Configure Header\n                                </Link>\n                                <Link className=\"nav-link\" to={{pathname: \"/configFooter\"}}>\n                                    <div className=\"sb-nav-link-icon\"><i className=\"fas fa-tools\"></i></div>\n                                    Configure Footer\n                                </Link>\n                            </nav>\n                        </div>\n                    </div>\n                </div>\n            </nav>\n        );\n    }\n    else if(currentUser && currentUser.role === 'EADMIN')\n    {\n        return (\n            <nav className=\"sb-sidenav accordion sb-sidenav-dark\" id=\"sidenavAccordion\" >\n                <div className=\"sb-sidenav-menu\">\n                    <div className=\"nav\">\n                        <div className=\"sb-sidenav-menu-heading\">Main Menu</div>\n                        <Link  className=\"nav-link\" to={{pathname: \"/insthome\"}}>\n                            <div className=\"sb-nav-link-icon\"><i className=\"fas fa-tachometer-alt\"></i></div>\n                            Home\n                        </Link>\n                        <Link  className=\"nav-link\" to={{pathname: \"/clearsession\"}}>\n                            <div className=\"sb-nav-link-icon\"><i className=\"fas fa-address-card\"></i></div>\n                            Clear Session\n                        </Link>\n                        <Link  className=\"nav-link\" to={{pathname: \"/instreports\"}}>\n                            <div className=\"sb-nav-link-icon\"><i className=\"fas fa-clipboard-list\" aria-hidden=\"true\"></i></div>\n                            Reports\n                        </Link>\n                    </div>\n                </div>\n            </nav>\n        );\n    }\n    else\n    {\n        return (\n            <nav className=\"sb-sidenav accordion sb-sidenav-dark\" id=\"sidenavAccordion\" >\n                <div className=\"sb-sidenav-menu\">\n                    <div className=\"nav\">\n                        <div className=\"sb-sidenav-menu-heading\">Main Menu</div>\n                        <Link  className=\"nav-link\" to={{pathname: \"/\"}}>\n                            <div className=\"sb-nav-link-icon\"><i className=\"fas fa-tachometer-alt\"></i></div>\n                            Home\n                        </Link>\n                    </div>\n                </div>\n            </nav>\n        );\n    }\n}\n\nexport default Sidebar;","/home/pawan/Desktop/react-template-hooks/src/Layout/Footer.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/LoginButton.js",["165"],"import React, { useContext } from 'react';\nimport API from '../api';\nimport { useHistory } from 'react-router-dom';\nimport {UserContext} from '../App';\n\nfunction LoginButton(props)\n{\n  let history                                     =   useHistory(props);\n  const {currentUser, setCurrentUser}             =   useContext(UserContext);\n\n  async function loginLogout()\n  {\n    if(props.label === 'Logout')\n    {\n      //-----------Call Logout API and on success redirect to Login Page-------\n\n      const res = await API.post('/logout');\n\n      if(res.data.status === 'Success')\n      {\n        setCurrentUser(undefined);\n        await localStorage.clear();\n        props.setIsLoggedIn(false);\n        history.replace('/login');\n      }\n      //-----------------------------------------------------------------------\n    }\n    else\n    {\n        history.replace('/login');\n    }\n  }\n\n    return (\n        <div>\n          <button onClick={() => {loginLogout(props)}} className=\"btn btn-primary\">{props.label}</button>\n        </div>\n    );\n}\n\nexport default LoginButton;\n","/home/pawan/Desktop/react-template-hooks/src/Components/Login.js",["166","167"],"import React, { useState , useEffect, useContext  } from 'react';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport API from '../api';\nimport ReCAPTCHA   from \"react-google-recaptcha\";\nimport { useHistory } from 'react-router-dom';\nimport {UserContext} from '../App';\nimport ClipLoader from \"react-spinners/ClipLoader\";\n\nexport default function Login(props)\n{\n  const {currentUser, setCurrentUser}               =    useContext(UserContext);\n  let history                                       =    useHistory();\n  const [myRecaptcha, setMyRecaptcha]               =    useState();\n  const [myMsg, setMyMsg]                           =    useState();\n  let [loading, setLoading]                         =    useState(true);\n  const flag                                        =    useFlag(setLoading);\n  const siteKey                                     =    process.env.REACT_APP_CAPTCHA_SITE_KEY;\n\n  return (\n    !loading ?\n        flag !== undefined && <Formik\n        initialValues={{ username: \"\", password: \"\", flag:flag ,instId:\"\" }}\n        onSubmit={(values,{ setSubmitting }) =>\n        {\n          if (myRecaptcha !== undefined){\n            checkLogin(values.username,values.password,values.instId,flag,myRecaptcha,setMyMsg,history,setCurrentUser);\n          }\n        }}\n        validationSchema={Yup.object().shape({\n            username:Yup.string()\n            .required(\"Username Required\"),\n            password: Yup.string()\n            .required(\"Password is Required\"),\n            flag: Yup.number(),\n            instId: Yup.string().when('flag', {\n              is:0,\n              then: Yup.string().required(\"Inst ID is Required\")\n            })\n        })}\n    >\n    {\n        props => {\n            const {\n                values,\n                touched,\n                errors,\n                isSubmitting,\n                handleChange,\n                handleBlur,\n                handleSubmit\n            } = props;\n            return (\n\n                <div>\n                    <div className=\"container\">\n                        <div className=\"row justify-content-center\">\n                            <div className=\"col-lg-5\">\n                                <div className=\"card shadow-lg border-0 rounded-lg mt-5\">\n                                    <div className=\"card-header\"><h3 className=\"text-center font-weight-light my-4\">GudExams Login</h3></div>\n                                    <div className=\"card-body\" >\n                                        <form onSubmit={handleSubmit}>\n                                            <div className=\"form-group\">\n                                                <label>User Name</label>\n\n                                                <input className=\"form-control py-4\" id=\"username\" type=\"text\"\n                                                value ={values.userame}\n                                                placeholder=\"Enter User Name\"\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                                class1name={errors.username && touched.username && \"error\"}\n                                                />\n\n                                                {errors.username && touched.username && (\n                                                    <div className=\"alert alert-info\">{errors.username}</div>\n                                                )}\n\n                                            </div>\n                                            <div className=\"form-group\">\n                                                <label className=\"form-group\">Password</label>\n\n                                                <input className=\"form-control py-4\" id=\"password\" type=\"password\"\n                                                value ={values.password}\n                                                placeholder=\"Enter password\"\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                                class1name={errors.password && touched.password && \"error\"}\n                                                />\n\n                                                {errors.password && touched.password && (\n                                                    <div className=\"alert alert-info\">{errors.password}</div>\n                                                )}\n                                            </div>\n\n                                            {flag === 0 && (<div className=\"form-group\">\n                                                <label className=\"form-group\">Inst ID</label>\n\n                                                <input className=\"form-control py-4\" id=\"instId\" type=\"instId\"\n                                                value ={values.instId}\n                                                placeholder=\"Enter Institute ID\"\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                                class1name={errors.instId && touched.instId && \"error\"}\n                                                />\n\n                                                {errors.instId && touched.instId && (\n                                                    <div className=\"alert alert-info\">{errors.instId}</div>\n                                                )}\n                                            </div>)}\n\n                                            <ReCAPTCHA name=\"myRecaptcha\" id=\"myRecaptcha\" sitekey={siteKey} onChange={(value) => setMyRecaptcha(value)}/>\n\n                                            <div className=\"form-group d-flex align-items-center justify-content-between mt-4 mb-0\">\n                                                <button className=\"btn btn-primary\" type=\"submit\" id=\"submit\" disabled={isSubmitting}>Login</button>\n                                            </div><br/>\n\n                                            {myMsg !== undefined && (\n                                                <div className=\"alert alert-success\">{myMsg}</div>\n                                            )}\n\n                                        </form>\n                                    </div>\n                                    <div className=\"card-footer text-center\">\n                                        <div className=\"small\"><a href=\"/register\">Need an account? Sign up!</a></div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                      </div>\n                </div>\n            );\n        }\n    }\n    </Formik>\n    :\n    <div className=\"col-lg-12\" style={{position:\"absolute\",top:\"40%\",left:\"50%\"}}>\n        <ClipLoader color={'#ff0000'} loading={loading} size={200} />\n    </div>\n  );\n}\n\nasync function checkLogin(username,password,instId,flag,myRecaptcha,setMyMsg,history,setCurrentUser)\n{\n    await API.post('/login',{\"username\":username,\"password\":password,\"inst_id\":instId,\"flag\":flag,\"myRecaptcha\":myRecaptcha}).then(res =>\n    {\n        \n            if(res.data.status === 'success')\n            {\n                localStorage.setItem(\"token\",JSON.stringify(res.data.token));\n                if(res.data.data.role === 'STUDENT')\n                {\n                    setCurrentUser(res.data.data);\n                    history.replace({ pathname: '/studenthome',state:{currentUser: res.data.data}});\n                }\n                else if(res.data.data.role === 'ADMIN')\n                {\n                    setCurrentUser(res.data.data);\n                    history.replace({ pathname: '/adminhome',state:{currentUser: res.data.data}});\n                }\n                else if(res.data.data.role === 'EADMIN')\n                {\n                    setCurrentUser(res.data.data);\n                    history.replace({ pathname: '/insthome',state:{currentUser: res.data.data}});\n                }\n            }\n            else\n            {\n                setMyMsg(res.data.message);\n            }\n    })\n}\n\n\n\nfunction useFlag(setLoading)\n{\n    const [flag, setFlag]   =    useState();\n\n    useEffect(() => {updateFlag();}, []);\n\n    async function updateFlag()\n    {\n        setLoading(true);\n        const res = await API.get('/settings',{params: {\"type\":\"login\"}});\n        if(res.data.status==='success')\n        {\n            setFlag(res.data.flag);\n            setLoading(false);\n        }\n    }\n\n    return flag;\n}\n","/home/pawan/Desktop/react-template-hooks/src/Components/Startexam.js",["168","169","170","171","172"],"import React ,{ useState, useEffect, useContext }  from 'react';\nimport QuestionAnswer from \"./Exam/QuestionAnswer\";\nimport QuestionButtons from \"./Exam/QuestionButtons\";\nimport NextSaveButton from \"./Exam/NextSaveButton\";\nimport EndExamButton from \"./Exam/EndExamButton\";\nimport PreviousButton from \"./Exam/PreviousButton\";\nimport OverallSummery from \"./Exam/OverallSummery\";\nimport ReviewLater from \"./Exam/ReviewLater\";\nimport MyTimer from \"./Exam/MyTimer.js\";\nimport { useHistory } from 'react-router-dom';\nimport API from '../api';\nimport {ShowContext} from '../App';\nimport {PopupContext} from '../App';\nimport WebCamCapture from './Exam/WebCamCapture';\n\nfunction Startexam(props)\n{\n  const {setShow,setMsg}                          =   useContext(ShowContext);\n  const {setPopupShow,setPopupMsg}                =   useContext(PopupContext);\n  let history                                     =   useHistory();\n  let [myOption, setMyOption]                     =   useState();\n  let [myPhotoCapture, setMyPhotoCapture]         =   useState(false);\n  let [myCameraPerm, setMyCameraPerm]             =   useState(false);\n\n  if(props.location.state)\n  {\n    var originalSelectedOptions        = getSelectedOptions(props.location.state.questions);\n    var questionIndex                  = props.location.state.currentQuestionIndex;\n    var myReviewArray                  = getReviewOptions(props.location.state.questions);\n  }\n\n  let [selectedOptions, setSelectedOptions] = useState(originalSelectedOptions);\n\n  useEffect(() => \n  {\n    if (props.location.state === undefined)\n    {\n      setShow(true);\n      setMsg('You are redirected because you have refreshed the examination page forcefully');\n      history.replace('/studenthome');\n    }\n  }, [props.location])\n\n\n  useEffect(() => {\n    if(myOption)\n    {\n      setSelectedOptions(prev => {\n        return {...prev, [questionIndex]: myOption}\n      });\n    }\n  }, [myOption]);\n//----------------------Catching Opening of other window------------------------\n  useEffect(() =>\n  {\n    const onBlurCallback = () => onBlur(props, setPopupShow,setPopupMsg, history);\n    window.addEventListener('blur', onBlurCallback);\n    return () =>\n    {\n      window.removeEventListener('blur', onBlurCallback);\n    };\n  }, [props.location]);\n//------------------------------------------------------------------------------\n//------------------------Restraining back button of browser--------------------\n  useEffect(() => {\n  window.history.pushState(props.location.state, '', '/startexam');\n}, [props.location]);\n//------------------------------------------------------------------------------\n//------------------------Proctoring -------------------------------------------\nuseEffect(() => {\n\n  if(props.location.state)\n  {\n    if(props.location.state.exam.paper.photo_capture)\n    {\n      setMyPhotoCapture(true);\n    }\n    else\n    {\n      setMyCameraPerm(true);\n    }\n  }\n}, [props.location]);\n//------------------------------------------------------------------------------\n\n  return (\n    props.location.state ?\n      <div className=\"row\">\n          <div className='card col-lg-12'>\n              <div className=\"card-header bg-primary row\" style={{color:\"white\"}}>\n                <div className=\"col-lg-8\">\n                  <h5><b>Subject Name: {props.location.state.exam.paper.paper_name} ({props.location.state.exam.paper.paper_code}) </b></h5>\n                </div>\n                <div className=\"col-lg-4\">\n                      <i className=\"fas fa-clock fa-lg\" style={{float:\"right\"}}></i> &nbsp;&nbsp;\n                      {myCameraPerm && (<div style={{float:\"right\"}}><MyTimer data={props}/></div>)}\n                </div>\n              </div>\n          </div>\n\n          <div className=\"card col-lg-8\">\n            <div className=\"card-body\">\n            {myCameraPerm && (<QuestionAnswer questions={props} setMyOption={setMyOption}  selectedOptions={selectedOptions}/>)}\n              <hr/>\n              <div className=\"col-lg-12 row\">\n              {myCameraPerm && (<PreviousButton data={props} setMyOption={setMyOption}/>)}\n              {myCameraPerm && (<NextSaveButton data={props} myOption={myOption} setMyOption={setMyOption} setSelectedOptions={setSelectedOptions} />)}\n              {myCameraPerm && (<EndExamButton index={questionIndex} length={props.location.state.questions.length} data={props}/>)}\n              {myCameraPerm && (<ReviewLater data={props} myReviewQuestions={myReviewArray} index={questionIndex}/>)}\n                {myPhotoCapture && (<WebCamCapture exam={props.location.state.exam.id} setMyCameraPerm={setMyCameraPerm}/>)}\n              </div>\n            </div>\n          </div>\n          <div className=\"col-lg-4\" style={{float: \"right\"}}>\n          {myCameraPerm && (<QuestionButtons qas={props} setSelectedOptions={setSelectedOptions} setMyOption={setMyOption}/>)}\n          {myCameraPerm && (<OverallSummery data={props}/>)}\n          </div>\n      </div> : null\n  );\n}\n\nasync function onBlur(props, setPopupShow,setPopupMsg, history)\n{\n  const exam                    = props.location.state.exam;\n  const total_allowable_alerts  = props.location.state.exam.paper.exam_switch_alerts;\n  const ExamId                  = exam.id;\n\n  await API.put('/exam/'+ExamId,{\"status\": \"windowswitch\"})\n  .then((res) => {\n    if(res.data.status === 'success')\n    {\n      if(parseInt(res.data.switchedcount) === parseInt(total_allowable_alerts))\n      {\n          //---------------end Examination-----------------------------------\n          handleEndExam(exam,history,setPopupShow,setPopupMsg,res.data.switchedcount);\n          //-----------------------------------------------------------------\n      }\n      else if(parseInt(res.data.switchedcount)+ 5 === parseInt(total_allowable_alerts))\n      {\n        setPopupShow(true);\n        setPopupMsg('Your Window switching limit is about to expire. Continuing switching window now will end your Examination abruptly.');\n      }\n      else\n      {\n        setPopupShow(true);\n        setPopupMsg('Please do not switch window while exam is in progress. This Event will be Recorded.');\n      }\n    }\n  })\n  .catch((error) =>\n  {\n    setPopupShow(true);\n    setPopupMsg('Please do not switch window while exam is in progress.');\n  });\n};\n\nasync function handleEndExam(exam,history,setPopupShow,setPopupMsg,cnt)\n{\n  const ExamId    = exam.id;\n\n  await API.put('/exam/'+ExamId,{\"status\": \"end\"})\n  .then((res) => {\n    if(res.data.status === 'success')\n    {\n      setPopupShow(true);\n      setPopupMsg('Your Examination is Ended abruptly because you switched window '+cnt+' times.');\n      history.replace(\"/studenthome\");\n    }\n  })\n  .catch((error) =>\n  {\n    setPopupShow(true);\n    setPopupMsg('Please do not switch window while exam is in progress.');\n  });\n}\n\n\nfunction getSelectedOptions(questions)\n{\n  let originalSelectedOptions = {};\n  questions.map((question,index) =>\n  {\n    originalSelectedOptions[index] = question.stdanswer\n  });\n  return originalSelectedOptions;\n}\n\nfunction getReviewOptions(questions)\n{\n  let array = [];\n  questions.map((question,index) =>\n  {\n      if(question.answered.indexOf('review') >= 0)\n      {\n        array[index] = true;\n      }\n      else\n      {\n        array[index] = false;\n      }\n  });\n  return array;\n}\n\nexport default Startexam;\n","/home/pawan/Desktop/react-template-hooks/src/Components/Student/StudHome.js",["173","174","175","176","177"],"import React, { useState , useEffect, useContext } from 'react';\nimport API from '../../api';\nimport CountCard from './CountCard';\nimport ExamCard from './ExamCard';\nimport { useLocation } from 'react-router-dom';\nimport {UserContext} from '../../App';\nimport ClipLoader from \"react-spinners/ClipLoader\";\n\nfunction StudHome()\n{\n  const location                                  =   useLocation();\n  const {currentUser, setCurrentUser}             =   useContext(UserContext);\n  let [loading, setLoading]                       =   useState(true);\n\n  const [userRequest, setUserRequest] = useState({\n    loading: true,\n    myExams: null,\n    numExams:0,\n    compExams:0,\n    yetToStartExam:0,\n    resumeExam:0,\n    expiredExam:0\n  });\n\n  //------------------------Restraining back button of browser--------------------\n  useEffect(() => \n  {\n    window.history.pushState(location.state, '', '/studenthome');\n  }, [location]);\n  //------------------------------------------------------------------------------\n\n  useEffect(() =>\n  {\n    getExamData(setUserRequest,setLoading);\n  },[]);\n\n  return (\n      !userRequest.loading && currentUser && !loading?\n      <div>\n        <div className=\"container-fluid\">\n            <h1 className=\"mt-4\">Student Home</h1>\n            <ol className=\"breadcrumb mb-4\">\n              <li className=\"breadcrumb-item active\">\n                <b>Student Name:</b> {currentUser.name} \n                &nbsp;&nbsp;&nbsp;\n                <b>Enrollment No:</b> ({currentUser.username})\n              </li>\n            </ol>\n            <div className=\"row col-lg-12\">\n              <CountCard count={userRequest.numExams} label={\"All\"} color={\"danger\"} onClick={() => {getExamData(setUserRequest,setLoading);}}/>\n              <CountCard count={userRequest.compExams} label={\"Completed\"} color={\"success\"} onClick={() => {getExamData(setUserRequest,setLoading,'over');}}/>\n              <CountCard count={userRequest.yetToStartExam} label={\"Yet To Start\"} color={\"warning\"} onClick={() => {getExamData(setUserRequest,setLoading,'yettostart');}}/>\n              <CountCard count={userRequest.resumeExam} label={\"Resume\"} color={\"primary\"} onClick={() => {getExamData(setUserRequest,setLoading,'inprogress');}}/>\n              <CountCard count={userRequest.expiredExam} label={\"Expired\"} color={\"info\"} onClick={() => {getExamData(setUserRequest,setLoading,'expired');}}/>\n            </div>\n            <br/><br/>\n            <div className=\"row col-lg-12\">\n            {\n              userRequest.myExams ? userRequest.myExams.data.map((exam) =>\n              (\n                  <ExamCard exam={exam} key={exam.id}/>\n              )) : null\n            }\n            </div><br/>\n        </div>\n      </div> : \n      <div className=\"col-lg-12\" style={{position:\"absolute\",top:\"40%\",left:\"50%\"}}>\n        <ClipLoader color={'#ff0000'} loading={loading} size={200} />\n      </div>\n  );\n}\n\n\nasync function getExamData(setUserRequest,setLoading,filter1='All')\n{\n        setLoading(true);\n        const res = await API.get('/exam');\n        const exams = await res.data;\n        console.log(exams.data);\n        //-------------------Sort data according to exam date for cards---------\n        let unsortedData= exams.data;\n        let sorted = {};\n        sorted = unsortedData.sort(function(a,b)\n        {\n          return a.paper.from_date - b.paper.from_date;\n        });\n        //----------------------------------------------------------------------\n        let i               = 0;\n        let compleated      = 0;\n        let yetToStart      = 0;\n        let resume          = 0;\n        let expired         = 0;\n        let EndTime         = '';\n        let Now             = '';\n        let overIndex          = Array();\n        let inprogressIndex    = Array();\n        let yetToStartIndex    = Array();\n        let expiredIndex       = Array();\n\n        console.log(sorted);\n\n        Object.keys(sorted).forEach(function(key)\n        {\n          EndTime           = sorted[key].paper.to_date;\n          Now               = sorted[key].now;\n\n          if(sorted[key].examstatus === 'over')\n          {\n            compleated = compleated+1;\n            overIndex.push(key);\n          }\n          else if(sorted[key].examstatus === '')\n          {\n            if(EndTime < Now)\n            {\n              expired = expired+1;\n              expiredIndex.push(key);\n            }\n            else\n            {\n              yetToStart = yetToStart+1;\n              yetToStartIndex.push(key);\n            }\n          }\n          else if(sorted[key].examstatus === 'inprogress')\n          {\n            if(EndTime < Now)\n            {\n              expired = expired+1;\n              expiredIndex.push(key);\n            }\n            else\n            {\n              resume = resume+1;\n              inprogressIndex.push(key);\n            }\n          }\n          else if(sorted[key].examstatus === 'expired')\n          {\n            expired = expired+1;\n            expiredIndex.push(key);\n          }\n        });\n\n        //---------------------------Filtering array based on examStatus-------\n        if(filter1 === 'over')\n        {\n          for(i=0;i< inprogressIndex.length;i++)\n          {\n            delete sorted[inprogressIndex[i]];\n          }\n          \n          for(i=0;i< yetToStartIndex.length;i++)\n          {\n            delete sorted[yetToStartIndex[i]];\n          }\n          \n          for(i=0;i< expiredIndex.length;i++)\n          {\n            delete sorted[expiredIndex[i]];\n          }\n        }\n        else if(filter1 === 'inprogress')\n        {\n          for(i=0;i< overIndex.length;i++)\n          {\n            delete sorted[overIndex[i]];\n          }\n          \n          for(i=0;i< expiredIndex.length;i++)\n          {\n            delete sorted[expiredIndex[i]];\n          }\n\n          for(i=0;i< yetToStartIndex.length;i++)\n          {\n            delete sorted[yetToStartIndex[i]];\n          }\n        }\n        else if(filter1 === 'expired')\n        {\n          for(i=0;i< overIndex.length;i++)\n          {\n            delete sorted[overIndex[i]];\n          }\n          \n          for(i=0;i< yetToStartIndex.length;i++)\n          {\n            delete sorted[yetToStartIndex[i]];\n          }\n\n          for(i=0;i< inprogressIndex.length;i++)\n          {\n            delete sorted[inprogressIndex[i]];\n          }\n        }\n        else if(filter1 === 'yettostart')\n        {\n          for(i=0;i< overIndex.length;i++)\n          {\n            delete sorted[overIndex[i]];\n          }\n          \n          for(i=0;i< expiredIndex.length;i++)\n          {\n            delete sorted[expiredIndex[i]];\n          }\n\n          for(i=0;i< inprogressIndex.length;i++)\n          {\n            delete sorted[inprogressIndex[i]];\n          }\n        }\n        //---------------------------------------------------------------------\n        setUserRequest({ loading:false, myExams:exams, numExams:exams.data.length,  compExams:compleated, yetToStartExam:yetToStart, resumeExam:resume, expiredExam:expired });\n        setLoading(false);\n}\n\nexport default StudHome;\n","/home/pawan/Desktop/react-template-hooks/src/Components/Student/Instructions.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Exam/MyTimer.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Student/CountCard.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Student/ExamCard.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Exam/QuestionAnswer.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Exam/QuestionButtons.js",["178"],"import React from 'react';\nimport { useHistory } from 'react-router-dom';\n\nfunction QuestionButtons(props) {\n  const qas           = props.qas.location.state.questions;\n  const myIndex       = props.qas.location.state.currentQuestionIndex;\n  let history         =   useHistory();\n        return (\n          <div className=\"col-lg-12\" style={{float: \"right\"}}>\n              <div className='card col-lg-12'>\n                  <div className=\"card-header bg-primary row\" style={{color:\"white\"}}>\n                    <div className=\"col-lg-12\">\n                      <h6><b><center>Questions</center></b></h6>\n                    </div>\n                  </div>\n                  <div className=\"card-body col-lg-12 row\" style={{float:\"right\" ,width:\"350px\"}}>\n                    {qas.map((qa,index) => (\n                      <div className=\"col-lg-2\" key={qa.qnid_sr} style={{margin:\"2px\"}}>\n\n                          <input type=\"button\" className={getColor(index,myIndex,qa)} value={qa.qnid_sr}  style={{margin:\"2px\"}} onClick={() => {changeIndex(props,index,history)}}/>\n\n                      </div>\n                    ))}\n                  </div>\n              </div>\n            </div>\n        );\n}\n\nfunction changeIndex(props,index,history)\n{\n  var originalSelectedOptions        = getSelectedOptions(props.qas.location.state.questions);\n\n  const examDetailsButtons = {\n    exam                               :  props.qas.location.state.exam,\n    questions                          :  props.qas.location.state.questions,\n    currentQuestionIndex               :  index,\n    solvedQuestionIndexes              :  props.qas.location.state.solvedQuestionIndexes, unsolvedQuestionIndexes            :  props.qas.location.state.unsolvedQuestionIndexes,\n    markedSolvedIndexes                :  props.qas.location.state.markedSolvedIndexes,\n    markedUnsolvedIndexes              :  props.qas.location.state.markedUnsolvedIndexes\n  }\n  props.setSelectedOptions(originalSelectedOptions);\n  props.setMyOption(undefined);\n  history.replace(\"/startexam\", examDetailsButtons) ;\n}\n\nfunction getSelectedOptions(questions)\n{\n  let originalSelectedOptions = {};\n  questions.map((question,index) =>\n  {\n    originalSelectedOptions[index] = question.stdanswer\n  });\n  return originalSelectedOptions;\n}\n\nfunction getColor(index,myIndex,qa)\n{\n    if(index === myIndex) {return \"btn btn-sm btn-danger\";}\n    switch (qa.answered) {\n      case \"unanswered\"         : return \"btn btn-sm btn-outline-dark\";\n      case \"answered\"           : return \"btn btn-sm btn-success\";\n      case \"answeredandreview\"  : return \"btn btn-sm btn-primary\";\n      default                   : return \"btn btn-sm btn-warning\";\n    }\n}\n\nexport default QuestionButtons;\n","/home/pawan/Desktop/react-template-hooks/src/Components/Exam/NextSaveButton.js",["179"],"import React, { useState, useEffect, useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport API from '../../api';\nimport {ShowContext} from '../../App';\n\nfunction NextSaveButton(props) {\n        const {setShow,setMsg} = useContext(ShowContext);\n\n        const [islast, setIslast]   = useState(false)\n        const myIndex               = parseInt(props.data.location.state.currentQuestionIndex);\n        let history                 = useHistory();\n        const maxQuestions          = parseInt(props.data.location.state.questions.length);\n\n        useEffect(() =>\n        {\n          myIndex < (maxQuestions) ? setIslast(false) : setIslast(true);\n        },[myIndex,maxQuestions]);\n\n        console.log('myOption', props.myOption);\n        return (\n            <div className=\"col-lg-3\">\n                <button className=\"btn btn-primary\"\n                onClick={() => {\n                  saveAndChangeIndex(props,(myIndex+1),history,maxQuestions,props.myOption,setShow,setMsg)\n                }}\n                disabled={islast}>Save & Next</button>\n            </div>\n        );\n}\n\nasync function saveAndChangeIndex(props,index,history,maxQuestions,myOption,setShow,setMsg)\n{\n  let myQuestions           = props.data.location.state.questions;\n  const myIndex             = (index-1);\n  const curOptionStatus     = myQuestions[myIndex].answered;\n  const answerId            = myQuestions[myIndex].id;\n  let newOptionStatus       = '';\n\n  let myUnsolvedQuestionIndexes   =  props.data.location.state.unsolvedQuestionIndexes;\n  let mySolvedQuestionIndexes     =  props.data.location.state.solvedQuestionIndexes;\n  let myMarkedUnsolvedIndexes     =  props.data.location.state.markedUnsolvedIndexes;\n  let myMarkedSolvedIndexes       =  props.data.location.state.markedSolvedIndexes;\n\n  //-----------------------Find new option status2---------------------------\n    if(curOptionStatus === 'unanswered'){\n      newOptionStatus = 'answered';\n    }\n    else if(curOptionStatus === 'unansweredandreview'){\n      newOptionStatus = 'answeredandreview';\n    }\n    else {\n      newOptionStatus = curOptionStatus;\n    }\n    //-----------------------------------------------------------------\n\n  if(myOption !== undefined && myOption !== null)\n  {\n    //-----------------------Send Data to Server--------------------------------\n    const ExamId = props.data.location.state.exam.id;\n    await API.put('/answer/'+answerId,{\"type\":\"saveanswer\",\"answered\": newOptionStatus, \"stdanswer\": myOption, \"answer_by\": ExamId})\n    .then(res =>\n     {\n         if(res.data.status === 'success')\n         {\n           //-----------------------Save Data to Local Array---------------------------\n             if(curOptionStatus === 'unanswered'){\n               newOptionStatus = 'answered';\n               myQuestions[myIndex].answered = newOptionStatus;\n               myQuestions[myIndex].stdanswer = myOption;\n               myUnsolvedQuestionIndexes = myUnsolvedQuestionIndexes.filter(item => item !== myIndex);\n               mySolvedQuestionIndexes.push(myIndex);\n               myUnsolvedQuestionIndexes.sort();\n               mySolvedQuestionIndexes.sort();\n             }\n             else if(curOptionStatus === 'unansweredandreview'){\n               newOptionStatus = 'answeredandreview';\n               myQuestions[myIndex].answered = newOptionStatus;\n               myQuestions[myIndex].stdanswer = myOption;\n               myMarkedUnsolvedIndexes = myMarkedUnsolvedIndexes.filter(item => item !== myIndex);\n               myMarkedSolvedIndexes.push(myIndex);\n               myMarkedUnsolvedIndexes.sort();\n               myMarkedSolvedIndexes.sort();\n             }\n             else {\n               newOptionStatus = curOptionStatus;\n             }\n             //-----------------------------------------------------------------\n             var originalSelectedOptions        = getSelectedOptions(myQuestions);\n\n             if(index < maxQuestions)\n             {\n               const examDetailsButtons = {\n                 exam                               :  props.data.location.state.exam,\n                 questions                          :  myQuestions,\n                 currentQuestionIndex               :  myIndex+1,\n                 solvedQuestionIndexes              :  mySolvedQuestionIndexes, unsolvedQuestionIndexes            :  myUnsolvedQuestionIndexes,\n                 markedSolvedIndexes                :  myMarkedSolvedIndexes,\n                 markedUnsolvedIndexes              :  myMarkedUnsolvedIndexes\n               }\n               props.setMyOption(undefined);\n               history.replace(\"/startexam\", examDetailsButtons) ;\n             }\n             if(index === maxQuestions)\n             {\n               const examDetailsButtons = {\n                 exam                               :  props.data.location.state.exam,\n                 questions                          :  myQuestions,\n                 currentQuestionIndex               :  myIndex,\n                 solvedQuestionIndexes              :  mySolvedQuestionIndexes, unsolvedQuestionIndexes            :  myUnsolvedQuestionIndexes,\n                 markedSolvedIndexes                :  myMarkedSolvedIndexes,\n                 markedUnsolvedIndexes              :  myMarkedUnsolvedIndexes\n               }\n               props.setSelectedOptions(originalSelectedOptions);\n               props.setMyOption(undefined);\n               history.replace(\"/startexam\", examDetailsButtons) ;\n             }\n         }\n     })\n    .catch(error =>\n     {\n       if(error.response.status !== 429)\n       {\n           let examDetails = {};\n           const myQuestions = getQuestions(props.data.location.state.exam);\n           if(myQuestions)\n           {\n             examDetails = {\n             exam                               :  props.data.location.state.exam,\n             questions                          :  myQuestions,\n             currentQuestionIndex               :  myIndex,\n             solvedQuestionIndexes              :  getIndexes(myQuestions,'answered'), unsolvedQuestionIndexes            :  getIndexes(myQuestions,'unanswered'),\n             markedSolvedIndexes                :  getIndexes(myQuestions,'answeredandreview'),\n             markedUnsolvedIndexes              :  getIndexes(myQuestions,'unansweredandreview'),\n             }\n             props.setMyOption(undefined);\n             history.replace(\"/startexam\", examDetails) ;\n           }\n        }\n        else\n        {\n           setShow(true);\n           setMsg('Server is Busy. Please wait for some Seconds...');\n           if(index < maxQuestions)\n           {\n             const examDetailsButtons = {\n             exam                               :  props.data.location.state.exam,\n             questions                          :  props.data.location.state.questions,\n             currentQuestionIndex               :  myIndex,\n             solvedQuestionIndexes              :  props.data.location.state.solvedQuestionIndexes, unsolvedQuestionIndexes            :  props.data.location.state.unsolvedQuestionIndexes,\n             markedSolvedIndexes                :  props.data.location.state.markedSolvedIndexes,\n             markedUnsolvedIndexes              :  props.data.location.state.markedUnsolvedIndexes,\n             }\n             props.setMyOption(undefined);\n             history.replace(\"/startexam\", examDetailsButtons) ;\n           }\n        }\n     });\n    //--------------------------------------------------------------------------\n  }\n  else\n  {\n    if(index < maxQuestions)\n    {\n      const examDetailsButtons = {\n      exam                               :  props.data.location.state.exam,\n      questions                          :  props.data.location.state.questions,\n      currentQuestionIndex               :  myIndex+1,\n      solvedQuestionIndexes              :  props.data.location.state.solvedQuestionIndexes, unsolvedQuestionIndexes            :  props.data.location.state.unsolvedQuestionIndexes,\n      markedSolvedIndexes                :  props.data.location.state.markedSolvedIndexes,\n      markedUnsolvedIndexes              :  props.data.location.state.markedUnsolvedIndexes,\n      }\n      props.setMyOption(undefined);\n      history.replace(\"/startexam\", examDetailsButtons) ;\n    }\n  }\n}\n\n\nasync function getQuestions(exam)\n{\n  const ExamId = exam.id;\n  const res = await API.get('/answer',{params: {\"exam_id\": ExamId}});\n\n  if(res.data.status === 'success')\n  {\n    return res.data.data;\n  }\n  else\n  {\n    return null;\n  }\n}\n\nfunction getSelectedOptions(questions)\n{\n  let originalSelectedOptions = {};\n  questions.map((question,index) =>\n  {\n    originalSelectedOptions[index] = question.stdanswer\n  });\n  return originalSelectedOptions;\n}\n\n\nfunction getIndexes(myQuestions,searchString)\n{\n  let arr     = [];\n  myQuestions.forEach(function(question,index){\n    if(question.answered === searchString)\n    {\n      arr.push(index);\n    }\n  });\n  return arr;\n}\n\nexport default NextSaveButton;\n","/home/pawan/Desktop/react-template-hooks/src/Components/Exam/EndExamButton.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Exam/PreviousButton.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Exam/OverallSummery.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Exam/ReviewLater.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Exam/Options.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Exam/WebCamCapture.js",["180","181","182"],"import React, { useState,useEffect, useContext } from 'react';\nimport Webcam from \"react-webcam\";\nimport { useHistory } from 'react-router-dom';\nimport {PopupContext} from '../../App';\nimport API from '../../api';\n\nconst CaptureTime = process.env.REACT_APP_PHOTO_CAPTURE_TIME * 1000;\n\nconst WebCamCapture = (props) => {\n    const webcamRef                         = React.useRef(null);\n    const [imgSrc, setimgSrc]               = useState(null);\n    const videoConstraints                  = {facingMode: \"user\"};\n    let history                             = useHistory();\n    const {setPopupShow,setPopupMsg}        = useContext(PopupContext);\n    const exam                              = props.exam;\n    \n  \n    useEffect(() => {    \n        navigator.mediaDevices.getUserMedia({ video: true, voice: true })\n        .then(function(stream) \n        {\n            props.setMyCameraPerm(true);\n        })\n        .catch(function(err) \n        {\n            props.setMyCameraPerm(false);\n            setPopupShow(true);\n            setPopupMsg('Without Camera Premission Examination can not be started.');\n            history.replace('/studenthome');\n        });\n        let myCapture = setInterval(capture, CaptureTime);\n\n        //------------------Cleanup-----------------------------------------\n        return () => {\n            clearInterval(myCapture);\n        }\n        //------------------------------------------------------------------\n    },[history.location]);  \n\n    const capture                = React.useCallback(\n      () => \n      { \n        if(webcamRef)\n        {\n            const imageSrc           = webcamRef.current.getScreenshot();\n            setimgSrc(imageSrc);  \n            storeSnap(exam,imageSrc);\n        }\n      },\n      [webcamRef,setimgSrc]\n    );\n  \n    return (\n        <div className=\"col-lg-12\" style={{margin:\"20px\"}}>\n            <center>\n                <Webcam\n                audio={false}\n                height={400}\n                ref={webcamRef}\n                screenshotFormat=\"image/jpeg\"\n                width={300}\n                videoConstraints={videoConstraints}\n                screenshotQuality={\"1\"}\n                />\n            </center>\n        </div>\n    );\n  };    \n\n  async function storeSnap(exam,image)\n  {\n    await API.post('/proctor/',{\"type\": \"snapshot\",\"exam\":exam,\"image\":image})\n    .then((res) => {\n        console.log('snap stored successfully');\n    })\n    .catch((error) =>\n    {\n        console.log('problem storing snapshot');\n    });\n  }\n\n  export default WebCamCapture;","/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Adminhome.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/ClearSession.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/ClearSessionUserInfo.js",[],"/home/pawan/Desktop/react-template-hooks/src/popup.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/ConfigureHeader.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Admin/Configurations/ConfigureFooter.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Institute/InstHome.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Institute/InstReports.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Institute/Reports/InstExamReport.js",["183"],"import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport API from '../../../api';\nimport Axios from 'axios';\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport Moment from 'react-moment';\n\n\nfunction InstExamReport()\n{\n    const [allPapers, setAllPapers]                 =   useState([]);\n    const [allExams, setAllExams]                   =   useState([]);\n    let [loading, setLoading]                       =   useState(true);\n    let i                                           =   1;\n   \n\n    useEffect(() => \n    {\n        getPrograms(setAllPapers,setAllExams,setLoading);\n    },[]);\n\n    return (\n    allPapers.length > 0 && !loading ?\n      <div>\n        <div className=\"container-fluid\">\n            <h1 className=\"mt-4\">Institute Examination Report</h1>\n            <ol className=\"breadcrumb mb-4\">\n                <li className=\"breadcrumb-item active\">Institute Examination Report</li>\n            </ol>\n            <div className=\"row col-lg-12\" style={{overflow:\"auto\"}}>\n                <table className=\"table table-bordered\" id=\"dataTable\">\n                    <thead>\n                    <tr style={{backgroundColor:\"aqua\"}}>\n                        <th>Sr</th>\n                        <th>Date & Start Time</th>\n                        <th>Code</th>\n                        <th>Subject Name</th>\n                        <th>Marks</th>\n                        <th>Total Q's</th>\n                        <th>Duration</th>\n                        <th>Total<br/>Students</th>\n                        <th>Total<br/>End</th>\n                        <th>Total<br/>Inprogress</th>\n                        <th>Total<br/>Not Attend</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    { \n                        allPapers.map((data, index) => (    \n                            <tr key={index}>\n                                <td><center>{i++}</center></td>\n                                <td><center><Moment format=\"MMMM Do YYYY, H:mm:ss A\">{data.from_date}</Moment></center></td> \n                                <td><center>{data.paper_code}</center></td>  \n                                <td>{data.paper_name}</td>\n                                <td><center>{data.marks}</center></td> \n                                <td><center>{data.questions}</center></td>  \n                                <td><center>{data.durations}</center></td>\n                                <td><center>{getCount(allExams,'total',data.id)}</center></td> \n                                <td><center>\n                                    <Link to={{pathname: \"/instexamstudentreport\", state:{data:allExams,paper_id:data.id,type:'over',paper_code:data.paper_code}}}>     \n                                        {getCount(allExams,'end',data.id)}\n                                    </Link></center>\n                                </td>                                   \n                                <td><center>\n                                    <Link to={{pathname: \"/instexamstudentreport\", state:{data:allExams,paper_id:data.id,type:'inprogress',paper_code:data.paper_code}}}>\n                                    {getCount(allExams,'inprogress',data.id)}\n                                    </Link>\n                                    </center>\n                                </td> \n                                <td><center>\n                                    <Link to={{pathname: \"/instexamstudentreport\", state:{data:allExams,paper_id:data.id,type:'notattend',paper_code:data.paper_code}}}>\n                                    {getCount(allExams,'notattend',data.id)}\n                                    </Link>\n                                    </center>\n                                </td>                                   \n                            </tr>                 \n                        ))                                                            \n                    } \n                    </tbody>\n                </table>\n            </div>\n        </div>\n      </div>\n      : <div className=\"col-lg-12\" style={{position:\"absolute\",top:\"40%\",left:\"50%\"}}>\n            <ClipLoader color={'#ff0000'} loading={loading} size={200} />\n        </div>\n    );\n}\n\nasync function getPrograms(setAllPapers,setAllExams,setLoading)\n{\n    let allPapers = [];\n    let allExams  = [];\n        const res = await API.get('/program');\n        if(res.data.status==='success')\n        {\n            if(res.data.data.length > 0)\n            {\n                for(let i=0;i<res.data.data.length;i++)\n                {\n                    \n                    Axios.all([\n                        await API.get('/paper',{ params: {\"program_id\":res.data.data[i].id}}),\n                        await API.get('/exam/'+res.data.data[i].id,{ params: {\"type\":\"byprogramid\"}})\n                    ])\n                    .then(responseArr => \n                    {\n                        if(responseArr[0].data.status==='success')\n                        {\n                            if(responseArr[0].data.data.length > 0)\n                            {\n                                allPapers.push(...responseArr[0].data.data);\n                            }\n                        }   \n                        \n                        if(responseArr[1].data.status==='success')\n                        {\n                            if(responseArr[1].data.data.length > 0)\n                            {\n                                allExams.push(...responseArr[1].data.data);\n                            }\n                        }\n                    });\n                    \n                }\n                allPapers = [...allPapers];\n                allPapers = [...new Set(allPapers)];\n\n                allPapers.sort(function(a,b)\n                {\n                    return a.from_date - b.from_date;\n                });\n                \n                if(allPapers.length > 0 && allExams.length > 0)\n                {\n                    setAllPapers(allPapers);\n                    setAllExams(allExams);\n                    setLoading(false);\n                    //console.log(allExams);\n                } \n            }\n        }\n}\n\nfunction getCount(allExams,str,paper_id)\n{\n    let total=0;\n    let end=0;\n    let inprogress=0;\n    let absent=0;\n\n    if(str === 'total')\n    {\n        for(let i=0;i < allExams.length; i++)\n        {\n            if(parseInt(paper_id) === parseInt(allExams[i].paper.id))\n            {\n                total++;\n            }\n        }\n        return total;\n    }\n    else if(str === 'end')\n    {\n        for(let i=0;i < allExams.length; i++)\n        {\n            if(parseInt(paper_id) === parseInt(allExams[i].paper.id) && allExams[i].examstatus === 'over')\n            {\n                end++;\n            }\n        }\n        return end;\n    }\n    else if(str === 'inprogress')\n    {\n        for(let i=0;i < allExams.length; i++)\n        {\n            if(parseInt(paper_id) === parseInt(allExams[i].paper.id) && allExams[i].examstatus === 'inprogress')\n            {\n                inprogress++;\n            }\n        }\n        return inprogress;\n    }\n    else if(str === 'notattend')\n    {\n        for(let i=0;i < allExams.length; i++)\n        {\n            if(parseInt(paper_id) === parseInt(allExams[i].paper.id) && allExams[i].examstatus === '')\n            {\n                absent++;\n            }\n        }\n        return absent;\n    }\n}\n\nexport default InstExamReport;\n","/home/pawan/Desktop/react-template-hooks/src/Layout/MyContent.js",[],"/home/pawan/Desktop/react-template-hooks/src/Components/Institute/Reports/InstExamStudtReport.js",[],{"ruleId":"184","replacedBy":"185"},{"ruleId":"186","replacedBy":"187"},{"ruleId":"188","severity":1,"message":"189","line":16,"column":10,"nodeType":"190","messageId":"191","endLine":16,"endColumn":18},{"ruleId":"192","severity":1,"message":"193","line":58,"column":17,"nodeType":"194","endLine":58,"endColumn":60},{"ruleId":"195","severity":1,"message":"196","line":58,"column":60,"nodeType":"194","endLine":58,"endColumn":117},{"ruleId":"197","severity":1,"message":"198","line":97,"column":7,"nodeType":"199","endLine":97,"endColumn":9,"suggestions":"200"},{"ruleId":"188","severity":1,"message":"201","line":7,"column":25,"nodeType":"190","messageId":"191","endLine":7,"endColumn":39},{"ruleId":"192","severity":1,"message":"193","line":41,"column":25,"nodeType":"194","endLine":41,"endColumn":174},{"ruleId":"188","severity":1,"message":"202","line":9,"column":10,"nodeType":"190","messageId":"191","endLine":9,"endColumn":21},{"ruleId":"188","severity":1,"message":"202","line":12,"column":10,"nodeType":"190","messageId":"191","endLine":12,"endColumn":21},{"ruleId":"197","severity":1,"message":"203","line":179,"column":38,"nodeType":"199","endLine":179,"endColumn":40,"suggestions":"204"},{"ruleId":"197","severity":1,"message":"205","line":42,"column":6,"nodeType":"199","endLine":42,"endColumn":22,"suggestions":"206"},{"ruleId":"197","severity":1,"message":"207","line":52,"column":6,"nodeType":"199","endLine":52,"endColumn":16,"suggestions":"208"},{"ruleId":"197","severity":1,"message":"209","line":62,"column":6,"nodeType":"199","endLine":62,"endColumn":22,"suggestions":"210"},{"ruleId":"211","severity":1,"message":"212","line":181,"column":34,"nodeType":"213","messageId":"214","endLine":181,"endColumn":36},{"ruleId":"211","severity":1,"message":"212","line":191,"column":34,"nodeType":"213","messageId":"214","endLine":191,"endColumn":36},{"ruleId":"188","severity":1,"message":"201","line":12,"column":23,"nodeType":"190","messageId":"191","endLine":12,"endColumn":37},{"ruleId":"215","severity":1,"message":"216","line":95,"column":34,"nodeType":"217","messageId":"218","endLine":95,"endColumn":41},{"ruleId":"215","severity":1,"message":"216","line":96,"column":34,"nodeType":"217","messageId":"218","endLine":96,"endColumn":41},{"ruleId":"215","severity":1,"message":"216","line":97,"column":34,"nodeType":"217","messageId":"218","endLine":97,"endColumn":41},{"ruleId":"215","severity":1,"message":"216","line":98,"column":34,"nodeType":"217","messageId":"218","endLine":98,"endColumn":41},{"ruleId":"211","severity":1,"message":"212","line":50,"column":34,"nodeType":"213","messageId":"214","endLine":50,"endColumn":36},{"ruleId":"211","severity":1,"message":"212","line":197,"column":34,"nodeType":"213","messageId":"214","endLine":197,"endColumn":36},{"ruleId":"188","severity":1,"message":"219","line":11,"column":12,"nodeType":"190","messageId":"191","endLine":11,"endColumn":18},{"ruleId":"197","severity":1,"message":"220","line":38,"column":7,"nodeType":"199","endLine":38,"endColumn":25,"suggestions":"221"},{"ruleId":"197","severity":1,"message":"222","line":50,"column":7,"nodeType":"199","endLine":50,"endColumn":28,"suggestions":"223"},{"ruleId":"224","severity":1,"message":"225","line":106,"column":27,"nodeType":"213","messageId":"226","endLine":123,"endColumn":22},"no-native-reassign",["227"],"no-negated-in-lhs",["228"],"no-unused-vars","'isLoaded' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getHeaderData'. Either include it or remove the dependency array.","ArrayExpression",["229"],"'setCurrentUser' is assigned a value but never used.","'currentUser' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'updateFlag'. Either include it or remove the dependency array.",["230"],"React Hook useEffect has missing dependencies: 'history', 'setMsg', and 'setShow'. Either include them or remove the dependency array.",["231"],"React Hook useEffect has a missing dependency: 'questionIndex'. Either include it or remove the dependency array.",["232"],"React Hook useEffect has missing dependencies: 'history', 'props', 'setPopupMsg', and 'setPopupShow'. Either include them or remove the dependency array.",["233"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-array-constructor","The array literal notation [] is preferable.","CallExpression","preferLiteral","'imgSrc' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'capture', 'history', 'props', 'setPopupMsg', and 'setPopupShow'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["234"],"React Hook React.useCallback has a missing dependency: 'exam'. Either include it or remove the dependency array.",["235"],"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'allPapers'.","unsafeRefs","no-global-assign","no-unsafe-negation",{"desc":"236","fix":"237"},{"desc":"238","fix":"239"},{"desc":"240","fix":"241"},{"desc":"242","fix":"243"},{"desc":"244","fix":"245"},{"desc":"246","fix":"247"},{"desc":"248","fix":"249"},"Update the dependencies array to be: [getHeaderData]",{"range":"250","text":"251"},"Update the dependencies array to be: [updateFlag]",{"range":"252","text":"253"},"Update the dependencies array to be: [history, props.location, setMsg, setShow]",{"range":"254","text":"255"},"Update the dependencies array to be: [myOption, questionIndex]",{"range":"256","text":"257"},"Update the dependencies array to be: [history, props, props.location, setPopupMsg, setPopupShow]",{"range":"258","text":"259"},"Update the dependencies array to be: [capture, history, history.location, props, setPopupMsg, setPopupShow]",{"range":"260","text":"261"},"Update the dependencies array to be: [exam]",{"range":"262","text":"263"},[3497,3499],"[getHeaderData]",[8410,8412],"[updateFlag]",[1750,1766],"[history, props.location, setMsg, setShow]",[1921,1931],"[myOption, questionIndex]",[2266,2282],"[history, props, props.location, setPopupMsg, setPopupShow]",[1456,1474],"[capture, history, history.location, props, setPopupMsg, setPopupShow]",[1760,1781],"[exam]"]